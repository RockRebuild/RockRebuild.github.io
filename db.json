{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/JAVA 多线程.md","hash":"4f1705f7dfcf9097406b74be9aa1c728a081b9fd","modified":1658941485833},{"_id":"source/_posts/JAVA-IO.md","hash":"86c28b3666d14e2a514a46fad808bcb76dd0c4e6","modified":1665674061466},{"_id":"source/_posts/JAVA-Servlet.md","hash":"e5e36f30cd974bad0a94b0ad6c014568e369c31f","modified":1661429465719},{"_id":"source/_posts/JAVA反射.md","hash":"3745ebc4d2b7a83afa5306c68d159d899feb8238","modified":1665674261058},{"_id":"source/_posts/JAVA注解.md","hash":"0bb8e252eeffcfb006cdaad500b4591276e0fcda","modified":1661429424712},{"_id":"source/_posts/JAVA基础梳理.md","hash":"a65bedc38f6738b8df377bb9ef3176fa844f273a","modified":1658941483094},{"_id":"source/_posts/JAVA设计模式.md","hash":"608e056fe170605f5f4ee2d553528ad148e15707","modified":1659169505525},{"_id":"source/_posts/JAVA集合.md","hash":"2d2187b421ccf079fa82cd16c6d371df8c8e7b2b","modified":1658941481218},{"_id":"source/_posts/JAVA项目分层.md","hash":"5aa1ba58ae286795705c5d6b3c71c93cd530c806","modified":1658941559420},{"_id":"source/_posts/JVM.md","hash":"3a39e53166cf78301b0b4e2683d3ca2f742cc20f","modified":1665674987071},{"_id":"source/_posts/Lambda.md","hash":"13372643bf94bc7be337fc282b3d4659297ede41","modified":1661428987837},{"_id":"source/_posts/Redis.md","hash":"9b8ce3e76f1ba4eca42d2189624c937883138fbf","modified":1741699018166},{"_id":"source/_posts/MySQL数据库知识点梳理.md","hash":"46ca0080d4923b778c6cc2adde5692decfa78f00","modified":1658941521199},{"_id":"source/_posts/SpringBoot.md","hash":"8e641cc8755937a2672c13a2fa2553496dfeda08","modified":1665673002495},{"_id":"source/_posts/maven.md","hash":"5de9faa16971995dd32a8d5a890a139cb770e663","modified":1661427913108},{"_id":"source/_posts/shell脚本报错.md","hash":"1ae48c9355fe8db9d60abb05861cf42d7a2d5305","modified":1658978751257},{"_id":"source/_posts/ssm框架-MyBatis.md","hash":"46f89db0616288856bd9aeb5cf896ef0f93c47a8","modified":1661428411359},{"_id":"source/_posts/ssm框架-SpringMVC.md","hash":"2a7ef49faac3aa72a0ef626fc98d6965d4345df8","modified":1661428486327},{"_id":"source/_posts/stop方法中断线程不安全.md","hash":"497b00b3ff68539445749fe667b75dc6df9acad6","modified":1734448204949},{"_id":"source/_posts/线性数据结构 数组、链表、栈、队列.md","hash":"83dfde17f27f116921713d6ef5cc507c261394ba","modified":1665673238811},{"_id":"source/_posts/ssm框架-Spring.md","hash":"fc288a27e52be1866bc4be856a84ba88826f49aa","modified":1661428450460},{"_id":"source/_posts/数据结构和算法.md","hash":"87e91f4801e371bb63da2cca725f1a1032029d87","modified":1665673514871},{"_id":"source/_posts/权限模型.md","hash":"09d170b8fb8572feface9b137bbe185c3f1deabb","modified":1734350305266},{"_id":"source/_posts/问题记录-Servlet找不到包.md","hash":"9e4f68d0b1417794f2957e073f185334e7695f46","modified":1661429452720},{"_id":"source/friends/index.md","hash":"1d9e64a881eee144adba15c8ec947f5a3bb2bff4","modified":1658378804662},{"_id":"source/about/index.md","hash":"5c76b24c25589d82266b20d5a74abea5f88edac8","modified":1658378804660},{"_id":"source/_posts/问题记录-Tomcat启动乱码.md","hash":"3b7228066b0aa3df6d93fb214a7f9bda2a9b07b8","modified":1661429457273},{"_id":"source/tags/index.md","hash":"36d8e2098e7bfd845074272d9b4e90cc00e5c700","modified":1658378804662},{"_id":"source/categories/index.md","hash":"409dd6e31ec5ad141152d7bb68dd13e9678649da","modified":1658941060838},{"_id":"source/contact/index.md","hash":"13c648d2b8d03b60fa17904f0a0bddb8ca39b338","modified":1658378804661},{"_id":"source/_posts/JAVA-Servlet/image-3.png","hash":"08a13ddf197cec95b679f9df930b12a2f383ad30","modified":1659374322080},{"_id":"source/_posts/JAVA基础梳理/image-3.png","hash":"c77768c09c2a06b27bd56c9ff2b495ff77d2ee61","modified":1658378804642},{"_id":"source/_posts/JVM/image-1.png","hash":"0133787ff116443cbc2238c0f7ea2ff535856712","modified":1663161589252},{"_id":"source/_posts/JVM/image-14.png","hash":"580565b50be74b1c677ed1cb555b82b1f9bdc01c","modified":1663689165854},{"_id":"source/_posts/Redis/image-13.png","hash":"677661b1e20e1120e321826f43ac6a7d528bbe5f","modified":1663835952670},{"_id":"source/_posts/Redis/image-43.png","hash":"61366e50e8679b9bb6ee9bc6abddc89b79dc42b5","modified":1663936429733},{"_id":"source/_posts/Redis/image-42.png","hash":"5bf4470f4197fe730c331fb6da3b22c5a39c9cb1","modified":1663936347059},{"_id":"source/_posts/Redis/image-53.png","hash":"d8996d1da6a33aa7617c265f8beeaab14c3c5508","modified":1664194299921},{"_id":"source/_posts/Redis/image-57.png","hash":"9b1b62ec06b2aa2edb7a07108ec4c7857a64973e","modified":1664195002212},{"_id":"source/_posts/Redis/image-54.png","hash":"d3aa7d0a96a68d8fa9bbb741e218607d11049a20","modified":1664194511334},{"_id":"source/_posts/ssm框架-Spring/image-2.png","hash":"c2a44cb7caf5c228f9b8cd2a518c03c5e87fc5ee","modified":1660651822462},{"_id":"source/_posts/数据结构和算法/image-1.png","hash":"49456c40f45316d303657405af14033f82e4a560","modified":1661945479356},{"_id":"source/_posts/JAVA-Servlet/image-2.png","hash":"29c5103185beed147500f1c4d1a6bdbd27a7894b","modified":1659374273405},{"_id":"source/_posts/JAVA-Servlet/image-1.png","hash":"b5a24ea60b50f687ea3ceed66574838785dbf351","modified":1659374202354},{"_id":"source/_posts/JAVA-IO/image-10.png","hash":"546b6fd09c0759bac64a333feecde3da29de0ae7","modified":1664466909582},{"_id":"source/_posts/JAVA-IO/image-3.png","hash":"e7a10ae32fb7c2eb58a9f28e8d1a45bef2e902a8","modified":1664461903682},{"_id":"source/_posts/JAVA-IO/image-5.png","hash":"8507f42395532154e8c8b23990c25151435609c1","modified":1664462722153},{"_id":"source/_posts/JAVA-IO/image-4.png","hash":"ad6b1535498168d385ff5223e21d04f66733e3f2","modified":1664462596450},{"_id":"source/_posts/JAVA基础梳理/image-1.png","hash":"5abaa4b37323a5f6dc86b9f237385147da213940","modified":1658378804639},{"_id":"source/_posts/JAVA集合/image-1.png","hash":"6d17acf200ac16610759fb3b469606d7a13055f9","modified":1658378804645},{"_id":"source/_posts/JAVA项目分层/1626175175_1.png","hash":"8cf740f9af75109a957e7868b6bee42e85374503","modified":1658378804648},{"_id":"source/_posts/JAVA项目分层/1626175175_2.png","hash":"67f6fbb5d3ea24730982c363d0e9c6055697493a","modified":1658378804649},{"_id":"source/_posts/JAVA项目分层/1626175175_3.png","hash":"97bd1d01d46b15407ec555c8b4ed75d5a57386b9","modified":1658378804650},{"_id":"source/_posts/JAVA项目分层/1626175175_5.png","hash":"2dcf97196880be3adc8230b2c117c0b8f3f7cdf9","modified":1658378804653},{"_id":"source/_posts/JVM/image-11.png","hash":"c8b3cadecc61dc7b4ec6e3472f17ba30d896fc8c","modified":1663687709884},{"_id":"source/_posts/JAVA项目分层/1626175175_4.png","hash":"289cd2f776b82cc991e0386a4cc5fd67828d7422","modified":1658378804652},{"_id":"source/_posts/JVM/image-12.png","hash":"6caf9929d67699de611ca63bcaf3ad88e4f031f5","modified":1663687839578},{"_id":"source/_posts/JVM/image-8.png","hash":"82d3d40f5681bbf0077c65e91c2456066187c47a","modified":1663664433848},{"_id":"source/_posts/Redis/image-10.png","hash":"f7727337373db162840a06162c1cae072892b4d2","modified":1663835694636},{"_id":"source/_posts/Redis/image-27.png","hash":"2583bd9c25a4e51c77ffe08a25e9b1c669d805bb","modified":1663932649670},{"_id":"source/_posts/Redis/image-31.png","hash":"bbaea24c0d872bccb308f26e0fb6150c174e9412","modified":1663934453165},{"_id":"source/_posts/Redis/image-29.png","hash":"acc68a976561002db4947090254329d81d69778d","modified":1663933833752},{"_id":"source/_posts/Redis/image-34.png","hash":"096e014bd53998ff140be7e0801d7f6db3340cec","modified":1663935132570},{"_id":"source/_posts/Redis/image-36.png","hash":"efaeb8802535d6ff9a3dc754f5c8bf182a58f3e6","modified":1663935396438},{"_id":"source/_posts/Redis/image-37.png","hash":"42fd4f433b35a5ac1d7331b048d56296719e7642","modified":1663935440757},{"_id":"source/_posts/Redis/image-39.png","hash":"9d525fcb71b0e6b4609e3715508cb748e15fa307","modified":1663936008523},{"_id":"source/_posts/Redis/image-4.png","hash":"8f03c9e27db20af0d7dd6bb9376c20a049c624cb","modified":1663834742738},{"_id":"source/_posts/Redis/image-45.png","hash":"5d97d7fb6ee3ce9b6dabbacc97408b1d9477bf12","modified":1663939117679},{"_id":"source/_posts/Redis/image-47.png","hash":"c79ab9aeb2f9e4312e3f978018d51e3320d434f2","modified":1663942976649},{"_id":"source/_posts/Redis/image-49.png","hash":"597da29156da62b6a830ca36eef3650b6291eff6","modified":1664174580766},{"_id":"source/_posts/Redis/image-5.png","hash":"638b2f3622227499e4d688ec0a474383f3be7830","modified":1663834846076},{"_id":"source/_posts/Redis/image-52.png","hash":"57fb7c1c20f9059bb19e701fe427ff37948f6194","modified":1664194064244},{"_id":"source/_posts/Redis/image-58.png","hash":"d7b15be459fcf6adf58214fa089727998c637f98","modified":1664195988592},{"_id":"source/_posts/Redis/image-8.png","hash":"c03565fa606876045edf7c050aa83d557c6c811c","modified":1663835312433},{"_id":"source/_posts/ssm框架-Spring/image-1.png","hash":"cca614af49c497ace853eb303b62d5a8af6ff627","modified":1660645472819},{"_id":"source/_posts/Redis/image-9.png","hash":"7fba51910b14e3df26c73a0d3d51b74b8328ff6b","modified":1663835367813},{"_id":"source/_posts/ssm框架-Spring/image-3.png","hash":"7dd2c1b0f8fc0045eade3bb499f846e4a16c9c91","modified":1660652354623},{"_id":"source/_posts/ssm框架-Spring/image-4.png","hash":"af32a6234ab600f2c6f8da921336ebeed11e5467","modified":1661345659528},{"_id":"source/_posts/JAVA-IO/image-1.png","hash":"7ce809f4a81f8d0e43d20ac79cf5523fce0c5d68","modified":1664461262432},{"_id":"source/_posts/JAVA-IO/image-8.png","hash":"97c83cbf33b701f3def5927adc9d45ee865e5ec9","modified":1664465268767},{"_id":"source/_posts/JAVA-IO/image-9.png","hash":"67551b1ae107b1d3ce5fb71a77bf3d766b26759f","modified":1664465476018},{"_id":"source/_posts/JVM/image-10.png","hash":"f9e57a0ad64607a4e881d8956ddc8ea0dedd0a3f","modified":1663665470629},{"_id":"source/_posts/JVM/image-13.png","hash":"ffdc1cfc3e037dc604071708fc78b27e750ab483","modified":1663689282628},{"_id":"source/_posts/JVM/image-3.png","hash":"e7482711375e8a4cf90b135fd89ea87ed18cb9fe","modified":1663164089187},{"_id":"source/_posts/JVM/image-7.png","hash":"3a655b8a11b34a7c8829b2285afd44b61f7b6483","modified":1663656920137},{"_id":"source/_posts/maven/image-2.png","hash":"6268d301cd43b20331207385ab6ab53daa541a2f","modified":1660310534438},{"_id":"source/_posts/Redis/image-1.png","hash":"a4256fed74d9ad2bb163eaded5731a8a1d5a657a","modified":1663774583706},{"_id":"source/_posts/JVM/image-9.png","hash":"533a6d4096de42af0a7ab6b4508e3d7a30208fb7","modified":1663665241240},{"_id":"source/_posts/Redis/image-12.png","hash":"17f94c754255908adbabbcff9b2f3621952c2b97","modified":1663835870898},{"_id":"source/_posts/Redis/image-16.png","hash":"cdc613318b3445b535e365cb219d418aa03a9fac","modified":1663930747857},{"_id":"source/_posts/Redis/image-19.png","hash":"6272854406eb29cab81213c60b4f341e6ab86586","modified":1663931314455},{"_id":"source/_posts/Redis/image-17.png","hash":"46edfbd909672e625dbf176e52207662ec69ee2c","modified":1663930884140},{"_id":"source/_posts/Redis/image-24.png","hash":"b9c59a8d3d0c1b1b69f3b5aa18f9504a93a9b445","modified":1663931617321},{"_id":"source/_posts/Redis/image-20.png","hash":"9827700a72e912ddf42f161d307b8016ff79f84f","modified":1663931366928},{"_id":"source/_posts/Redis/image-22.png","hash":"74a37a5784ea3a5d81e9cc6729460e4063d368fd","modified":1663931466046},{"_id":"source/_posts/Redis/image-25.png","hash":"d2c209d514e36eb8b12c1fefadc2af15a0450ba9","modified":1663931787048},{"_id":"source/_posts/Redis/image-28.png","hash":"828a1885cd9e36e933a6b7b374bcaf58ea34c9a9","modified":1663933386945},{"_id":"source/_posts/Redis/image-33.png","hash":"d0c4977d2a1aed5a403630afd17d9227912456fa","modified":1663935028109},{"_id":"source/_posts/Redis/image-30.png","hash":"3eaf6f289a8016d5407c3ea315d550612e59d4d5","modified":1663934348106},{"_id":"source/_posts/Redis/image-40.png","hash":"7fe6e9073d77bdbf854667b6c519500199c72e08","modified":1663936056537},{"_id":"source/_posts/Redis/image-38.png","hash":"6ef34db9f5a690f50bd343a7248f9357dddb798a","modified":1663935520314},{"_id":"source/_posts/Redis/image-41.png","hash":"80e90f45cfd267fc60756b10c93f571ab0fad703","modified":1663936319130},{"_id":"source/_posts/Redis/image-46.png","hash":"b7f52ce3bef8d799ebb72b626e3ea82e41977522","modified":1663939774519},{"_id":"source/_posts/Redis/image-50.png","hash":"228b658dedbc1c1916d86e388b5e9bb0aab48d6c","modified":1664175219299},{"_id":"source/_posts/Redis/image-44.png","hash":"ad382e22cc5843a189a425ee263370f5a057eac6","modified":1663939005375},{"_id":"source/_posts/Redis/image-51.png","hash":"47d1cbcec7d802b8982e75fa8b71da18d0de0c88","modified":1664193840375},{"_id":"source/_posts/Redis/image-55.png","hash":"d9779b3a1db13fc9a9ce94c3babd7c707375b8cc","modified":1664194833377},{"_id":"source/_posts/Redis/image-7.png","hash":"381ef96acff2b6f44c26a3fd74746864d8a0624d","modified":1663835076986},{"_id":"source/_posts/JAVA 多线程/image-1.png","hash":"f384153f0e126e1e10ae57f6ae80759f29c894a3","modified":1658378804637},{"_id":"source/_posts/JAVA-IO/image-11.png","hash":"b6c038c7b566e38e5b68f6571beb902215a5d5f1","modified":1664466944566},{"_id":"source/_posts/JAVA-IO/image-13.png","hash":"b4e83fd6d3532fe87888b80a7ced6bdb097add1d","modified":1664467184620},{"_id":"source/_posts/JAVA-IO/image-12.png","hash":"b6c038c7b566e38e5b68f6571beb902215a5d5f1","modified":1664466948738},{"_id":"source/_posts/JAVA-IO/image-2.png","hash":"81bd7210271f9e007aee4ceb595eaff831a77a97","modified":1664461405217},{"_id":"source/_posts/JAVA基础梳理/image-2.png","hash":"709f1f317e344a1c32e68497adedd5a31aa654dc","modified":1658378804641},{"_id":"source/_posts/JVM/image-2.png","hash":"109c975e5a00c71d4795436b38f99f79f3937504","modified":1663163374763},{"_id":"source/_posts/JVM/image-5.png","hash":"6c2506c91d0cc29447d0c69ffdac50360eccf4e0","modified":1663415945813},{"_id":"source/_posts/Redis/image-11.png","hash":"48343f315c7abd71e6cab03a7bd4802a19c3406f","modified":1663835821397},{"_id":"source/_posts/Redis/image-14.png","hash":"6b35dfe8adfcd168d18648a3ea2382c60b13d40b","modified":1663836194391},{"_id":"source/_posts/Redis/image-15.png","hash":"dc38e8ba58abce344e96865d5969d927fa416cbf","modified":1663930639968},{"_id":"source/_posts/Redis/image-18.png","hash":"e5666ba777fa78a838213625a25622b22d6a8c8e","modified":1663931095671},{"_id":"source/_posts/Redis/image-21.png","hash":"059f98cc9200d1874bbe2c61cb9322c3ddda8221","modified":1663931427156},{"_id":"source/_posts/Redis/image-23.png","hash":"09b2745836efd4d76f8b3e16a085369523446efe","modified":1663931502047},{"_id":"source/_posts/Redis/image-26.png","hash":"0ca63b8699eb2e0f4cb07f3ca157e5f96f26e1e0","modified":1663932241748},{"_id":"source/_posts/Redis/image-3.png","hash":"0bd3aa8576760ffc6b63113334c744304d2ba528","modified":1663834634371},{"_id":"source/_posts/Redis/image-32.png","hash":"a15310fb58f27ff57f8f051aac372c858da8ae64","modified":1663934945721},{"_id":"source/_posts/Redis/image-56.png","hash":"e96de134c61ff42cfe08516007e5170ffca5b92c","modified":1664194903046},{"_id":"source/_posts/Redis/image-6.png","hash":"17e1eda93f25827b1e72cb092d670c17384f7eb9","modified":1663834982571},{"_id":"source/_posts/JAVA反射/image-3.png","hash":"3ea259fc7f28f3861a3d6568420d24d5e31ea110","modified":1664604573946},{"_id":"source/_posts/JVM/image-4.png","hash":"815986e9247806236aed972aed1ace44552230e4","modified":1663163988935},{"_id":"source/_posts/MySQL数据库知识点梳理/qizhongjon.png","hash":"2841cbdcab0ae96ac0620e5d0ed5224e2dedc899","modified":1658378804658},{"_id":"source/_posts/Redis/image-2.png","hash":"6bfd1f400b37f553cc57b7a0e700106803212494","modified":1663834422891},{"_id":"source/_posts/JAVA-IO/image-6.png","hash":"9542fb82ef17c5a52bdb92fb5d79c7ed05ef67da","modified":1664464787627},{"_id":"source/_posts/JAVA-IO/image-7.png","hash":"9542fb82ef17c5a52bdb92fb5d79c7ed05ef67da","modified":1664464794557},{"_id":"source/_posts/Redis/image-35.png","hash":"0e062ee9e4edf91e985c262754603a6d9c2adf46","modified":1663935300010},{"_id":"source/_posts/Redis/image-48.png","hash":"ecc521f4535022349fc478fd5c8d5cb11e1b0dda","modified":1664010966282},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1658927611120},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1658927611122},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"64a0ce154feb1aa09cdc366ac4962a8234d85594","modified":1658927611123},{"_id":"themes/hexo-theme-matery/README.md","hash":"93ae00dc14ff64e0b6f2faa3b14b12e4df135e2f","modified":1658927611123},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1658927611121},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1658927611128},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"867e8214cbadec4805b1e5e951120c4f2ba28546","modified":1734196734502},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1658927611159},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1658927611160},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1658927611161},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1658927611159},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"7e92c983794c5c4a2b16eca2452eb187316262ef","modified":1658927611163},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1658927611161},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"851531e78e90a2dc923d6b5d98d3548d37e0cb7a","modified":1658927611162},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"0a678b78c44c3345f4f1c3207ecdb0e6b5ee6cd0","modified":1658939220650},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1658927611164},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1658927611163},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"b7c5cfa249c4d1c4f9de7bd500e847af2c04b2d6","modified":1658927611165},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1658927611166},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1658927611167},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1658927611168},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1658927611167},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1658927611168},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1658927611126},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1658927611127},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"c3d2849348bd52fab85b38040818b429057d3101","modified":1658927611126},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1658927611127},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1658927611130},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"861fe6cc4446699c6e6104661c9fee1293ed00c8","modified":1658942692612},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"442c710d69892eb56d3d257cf4c2e195e6913eea","modified":1658927611130},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1658927611130},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"dee1bf78556a2422e2f6dfc9a7563f37806d9c9f","modified":1658927611131},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1658927611129},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1658927611132},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1658927611134},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1658927611132},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1658927611133},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"a924658cbc1a1aeafe9fa455b08bd495071285a1","modified":1658927611134},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"efbc689d2b466ba4666b0cea2084a263d7f271d1","modified":1658927611134},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1658927611135},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1658927611136},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1658927611137},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1658927611137},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"21218d9ece7944fa2185968fbc79faa1fcff2b15","modified":1658927611138},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1658927611139},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"8cf6c23c2685d6261f688a32fbb5e64c1f4e7ccb","modified":1658927611139},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1658927611140},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1658927611141},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1658927611140},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1658927611142},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"75f026d4dd2a088b4b45132415c0c1a7bdcc96d6","modified":1658927611143},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"2d1aff1cb54f47478564b48d046371ed73048562","modified":1658927611141},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"a7bd2f374eeca8e39d39d1c9087a8f2ac96e2093","modified":1658927611144},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1658927611142},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1658927611144},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1658927611145},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1658927611144},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1658927611146},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1658927611146},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1658927611147},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1658927611148},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1658927611151},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1658927611148},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5ee3ade52bc7494226ed30e7dd4531d1d91ca67c","modified":1658927611149},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"beb3044890bfe7cfd26328565da4f8f955563424","modified":1658927611149},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1658927611151},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1658927611153},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1658927611152},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1658927611153},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1658927611154},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1658927611155},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1658927611156},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1658927611154},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1658927611156},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1658927611157},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1658927611156},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1658927611157},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1658927611158},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"18415c69461d706cf8039580cc79d00c029c637c","modified":1658927611169},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1658927611158},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"98e7c48678c69f089d0d42f6d005c83265e9f400","modified":1658927611171},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1658927611170},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1658927611171},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1658927611173},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1658927611172},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1658927611173},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1658927611174},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"36d90a4b90df89c8fdc588203e394903b11747c8","modified":1658927611174},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1658927611178},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1658927611178},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1658927611175},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1658927611179},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"861fe6cc4446699c6e6104661c9fee1293ed00c8","modified":1658942692612},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1658927611180},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1658927611390},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1658927611358},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"861fe6cc4446699c6e6104661c9fee1293ed00c8","modified":1658942692612},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1658927611181},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1658927611183},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1658927611182},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1658927611184},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1658927611205},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1658927611186},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1658927611185},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1658927611206},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1658927611207},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1658927611207},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1658927611203},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1658927611204},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1658927611205},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1658927611209},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1658927611204},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1658927611221},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1658927611210},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1658927611222},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1658927611229},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1658927611231},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1658927611232},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1658927611232},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1658927611236},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1658927611236},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1658927611246},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1658927611287},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1658927611277},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1658927611287},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1658927611288},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1658927611299},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1658927611288},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1658927611298},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1658927611300},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1658927611300},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1658927611301},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1658927611297},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1658927611308},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"1aec6cfcbf8c833f728b8736060fe5690e19d92f","modified":1658927611302},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1658927611315},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1658927611315},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eceb98f80392cb57df1af5b160d85924f69fb2e0","modified":1658927611321},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1658927611321},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1658927611356},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1658927611357},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1658927611356},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1658927611357},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1658927611364},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1658927611367},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1658927611371},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1658927611370},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1658927611379},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1658927611376},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1658927611381},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1658927611380},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1658927611382},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1658927611385},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1658927611387},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1658927611388},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1658927611194},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1658927611194},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1658927611201},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1658927611201},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1658927611238},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1658927611241},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1658927611242},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1658927611242},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1658927611242},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1658927611239},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1658927611239},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1658927611240},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1658927611310},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1658927611245},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1658927611311},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1658927611311},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1658927611309},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1658927611312},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1658927611313},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1658927611314},{"_id":"source/_posts/maven/image-1.png","hash":"d800b213caaa61e91ef2b1c8ea397aef5e40dcb0","modified":1660290636338},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1658927611220},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1658927611235},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1658927611230},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1658927611330},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1658927611334},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1658927611336},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1658927611362},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1658927611361},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1658927611366},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1658927611365},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1658927611369},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1658927611375},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1658927611374},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1658927611373},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1658927611378},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1658927611384},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1658927611386},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1658927611389},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ede2eead53284cf2fd47e495b97d207da3bd5d6e","modified":1658927611188},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"d2f1e2762d9455a0b63f9696c747824143de6803","modified":1658927611189},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1658927611193},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1658927611200},{"_id":"source/_posts/JVM/image-6.png","hash":"7a2bfa29938efb867d914c8d35fb42466bbefe3a","modified":1663656823405},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1658927611360},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1658927611212},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1658927611248},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1658927611250},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"c2f2b1b0346e28ceae19f4b3d174f033311aa060","modified":1658927611324},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"3a17de5f24e0437c3c681b15f147ceef3980736f","modified":1658927611327},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1658927611353},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1658927611192},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1658927611177},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"e47dd1412564cd6aacc4e0a596fd83074a747870","modified":1658927611326},{"_id":"source/_posts/JAVA反射/image-1.png","hash":"4b49be3dd3ce33a2df5bcc5eecbe9edac1353b4a","modified":1664553402964},{"_id":"source/_posts/JAVA反射/image-4.png","hash":"e24bc21c7f6147ca3e84f9a55247521dc0d111c5","modified":1664713860107},{"_id":"source/_posts/JAVA反射/image-20221002202918484.png","hash":"10cd95bd0629f59f3c4efc8231aa9db9377420ec","modified":1664713758853},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1658927611351},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1658927611199},{"_id":"source/_posts/JAVA反射/image-2.png","hash":"8166c56bf105ae1c05ce7c5b5753ee2802218153","modified":1664604154213},{"_id":"source/_posts/JAVA反射/image-20221001140225816.png","hash":"8166c56bf105ae1c05ce7c5b5753ee2802218153","modified":1664604146001},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1658927611319},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"80063546f828243e2345670701656b735fc3ead8","modified":1658927611307},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1658927611219},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1658927611227},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"5755d222f96a897b9f509d2859be21996a3dbfd0","modified":1658927611285},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1658927611276},{"_id":"public/search.xml","hash":"66725aa9a99328f418809a84f494bfa3847cdd9f","modified":1741702711823},{"_id":"public/about/index.html","hash":"cc2ea7ef68baedd06a47ec336bbca090cc2ae318","modified":1741702535871},{"_id":"public/friends/index.html","hash":"74356c7a16c533dd2eae56959ca2703a323601c5","modified":1741702535871},{"_id":"public/contact/index.html","hash":"ca16769e848d51cdd897810fab8768bd893a5f49","modified":1741702535871},{"_id":"public/categories/index.html","hash":"0934d45834e4c80accca7275be781ebbd3d4813a","modified":1741702535871},{"_id":"public/tags/index.html","hash":"1f0bf9518233a88afb3d00ea4ccca26e8ce94036","modified":1741702535871},{"_id":"public/2023/12/17/stop-fang-fa-zhong-duan-xian-cheng-bu-an-quan/index.html","hash":"884de55e4e40173fad8b805e54580214504fd7bc","modified":1741702535871},{"_id":"public/2023/01/05/quan-xian-mo-xing/index.html","hash":"f01570ac85f18790085bc076391a1214f61c3dc5","modified":1741702535871},{"_id":"public/2022/07/22/shu-ju-jie-gou-he-suan-fa/index.html","hash":"c6433899fab167c693a01f8dfb4d8901f47b1356","modified":1741702535871},{"_id":"public/2022/07/06/xian-xing-shu-ju-jie-gou-shu-zu-lian-biao-zhan-dui-lie/index.html","hash":"87521fd8de4c7679e3cfe6ed92d217aad07d92f9","modified":1741702535871},{"_id":"public/2022/06/13/jvm/index.html","hash":"e8d3c479d2cbafffd50f331f6baae1a4da80d803","modified":1741702535871},{"_id":"public/2022/04/30/java-io/index.html","hash":"5a08d33b6e3429020cea1f17d37e42399b5ece5e","modified":1741702535871},{"_id":"public/2022/02/17/redis/index.html","hash":"f243c64834eaab27d2ad7be885519c136154ebdc","modified":1741702535871},{"_id":"public/2022/01/13/java-fan-she/index.html","hash":"84765d0552905dd81d8c33e1188d612b614272ca","modified":1741702535871},{"_id":"public/2021/10/12/java-she-ji-mo-shi/index.html","hash":"85bf6520312a59a02c1d973d0a54c8ebe610c972","modified":1741702535871},{"_id":"public/2021/08/23/maven/index.html","hash":"abf3c23cfd4d151da7f39558de63d33250a0fd91","modified":1741702535871},{"_id":"public/2021/07/13/java-xiang-mu-fen-ceng/index.html","hash":"871df284149041981a81653ec9f5f61a0c232583","modified":1741702535871},{"_id":"public/2021/05/02/springboot/index.html","hash":"767671c6edf1ec76bb08a662ca9cd34d16c2664b","modified":1741702535871},{"_id":"public/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/index.html","hash":"b91d38d7ad0dec49eca80a7a1bfd0f0d96ca5515","modified":1741702535871},{"_id":"public/2020/10/02/ssm-kuang-jia-spring/index.html","hash":"f5f1325f181538090dfbbe2d6858b80a84b3015a","modified":1741702535871},{"_id":"public/2021/02/11/ssm-kuang-jia-springmvc/index.html","hash":"d3e876f3496f35a11bf1a2356d436f56a4357940","modified":1741702535871},{"_id":"public/2020/06/29/java-ji-he/index.html","hash":"fb7a97572d539fbe5d59d9f12ebf39998299f9ab","modified":1741702535871},{"_id":"public/2020/06/13/lambda/index.html","hash":"f462cbb70385b5d8cd5cc87df6d40c0b7b66176e","modified":1741702535871},{"_id":"public/2020/05/17/ssm-kuang-jia-mybatis/index.html","hash":"383c145c1716c0d8fb622c5148eed7861c857a03","modified":1741702535871},{"_id":"public/2020/04/12/java-duo-xian-cheng/index.html","hash":"14a2383953ae50bdfc003b5cba4f80a12722569f","modified":1741702535871},{"_id":"public/2019/09/30/java-servlet/index.html","hash":"a85c97b580a6b821fbe9a035e68663726bed0cf3","modified":1741702535871},{"_id":"public/2019/09/28/wen-ti-ji-lu-tomcat-qi-dong-luan-ma/index.html","hash":"94b4ece77aead6650c22e792b77d488b219e9dab","modified":1741702535871},{"_id":"public/2019/09/26/wen-ti-ji-lu-servlet-zhao-bu-dao-bao/index.html","hash":"62644a0cfbae15efea20aee9363cc2f69a0b2c7c","modified":1741702535871},{"_id":"public/2019/07/12/java-ji-chu-shu-li/index.html","hash":"62953de9b5bc1c2c92894dffbc62e08776116504","modified":1741702535871},{"_id":"public/2019/02/07/java-zhu-jie/index.html","hash":"ff59c8239dcaaf80dd94bb15dbd6820ea4c21472","modified":1741702535871},{"_id":"public/2019/01/08/shell-jiao-ben-bao-cuo/index.html","hash":"30a3808f46d9029f1c36344832753556c21263b2","modified":1741702535871},{"_id":"public/archives/index.html","hash":"328986ab1366aab402a13b439449232c2508e0c3","modified":1741702535871},{"_id":"public/archives/page/2/index.html","hash":"96791db21520e1f82e3706d24e96358f7178380f","modified":1741702535871},{"_id":"public/archives/page/3/index.html","hash":"a940a0eac1d2bbe18bbceccf4dc7784914c6e870","modified":1741702535871},{"_id":"public/archives/page/4/index.html","hash":"cb875956ad2c4d9620e6ce1e1992617c3957d656","modified":1741702535871},{"_id":"public/archives/2019/index.html","hash":"e0747f58e45a2af3b001d30e3087f18a22e3a5a2","modified":1741702535871},{"_id":"public/archives/page/5/index.html","hash":"14def37a7e7d485c160443feab52b7a18c093d4f","modified":1741702535871},{"_id":"public/archives/2019/01/index.html","hash":"ac2595e4e4c921468a1e2b4a6e1bec3835cb508c","modified":1741702535871},{"_id":"public/archives/2019/02/index.html","hash":"6436e19d6df4a6f94a9ff31cd92dcebdb0db28a2","modified":1741702535871},{"_id":"public/archives/2019/07/index.html","hash":"7498f1552f258859bbeee31e95dacdd3be9a8405","modified":1741702535871},{"_id":"public/archives/2020/index.html","hash":"16d96c49c75e76426c3162f7b8df318089582c35","modified":1741702535871},{"_id":"public/archives/2019/09/index.html","hash":"e48d84604a6d99a70494106e5d9a6d64874b5532","modified":1741702535871},{"_id":"public/archives/2020/04/index.html","hash":"50e7c88558da331338b2d27dad47e4c09e4973c3","modified":1741702535871},{"_id":"public/archives/2020/05/index.html","hash":"f8bc39f3c942613ea88160df6df96356b4c2fa82","modified":1741702535871},{"_id":"public/archives/2020/06/index.html","hash":"2ea706e82618129dac72229da42f906013c7241e","modified":1741702535871},{"_id":"public/archives/2020/10/index.html","hash":"8e740b6238c9219d3bf563bfbba095ecfcf1e0a8","modified":1741702535871},{"_id":"public/archives/2021/index.html","hash":"4a8fa5b0ccfef2fbb1559ccdacdeab172cb1b75f","modified":1741702535871},{"_id":"public/archives/2021/02/index.html","hash":"2adbbe19fa5b1e31d2d88b467dca173d020a6584","modified":1741702535871},{"_id":"public/archives/2021/04/index.html","hash":"c51a612ca75dfb7f09609518dbf132dc50252713","modified":1741702535871},{"_id":"public/archives/2021/05/index.html","hash":"90837c4c04303c6927a24bba81d4cdb3f65f3d9f","modified":1741702535871},{"_id":"public/archives/2021/08/index.html","hash":"3490517f610275882970cb4b00221e69b714e6c1","modified":1741702535871},{"_id":"public/archives/2021/07/index.html","hash":"26e196767b983988810f733e80ab835aec3f2842","modified":1741702535871},{"_id":"public/archives/2022/01/index.html","hash":"8aaa9eca1a17a7228ad433f8b8b8fe5779d34cd3","modified":1741702535871},{"_id":"public/archives/2022/index.html","hash":"cb498c0538592e359c3235b54911f5e05c4ff028","modified":1741702535871},{"_id":"public/archives/2021/10/index.html","hash":"ca06cf2b0f35e23eb940c5b53600c4f67791f291","modified":1741702535871},{"_id":"public/archives/2022/02/index.html","hash":"2e025816372574ce74e8f03ace95c751078eccbf","modified":1741702535871},{"_id":"public/archives/2022/04/index.html","hash":"0e48c70efb1747a45cda6d203074e9669f48e397","modified":1741702535871},{"_id":"public/archives/2022/06/index.html","hash":"068d987a60dccd3456f1db86f81a94e79a51f378","modified":1741702535871},{"_id":"public/archives/2022/07/index.html","hash":"a1fcd108cfdea40abbb63f0039fa25a157396edf","modified":1741702535871},{"_id":"public/archives/2023/index.html","hash":"03b6e82f70b5f050998a53e2546acdfc28e6b32f","modified":1741702535871},{"_id":"public/archives/2023/01/index.html","hash":"bcd712ae04516b69181b1e1e5641ad40479da80a","modified":1741702535871},{"_id":"public/archives/2023/12/index.html","hash":"283eefadbeb16b435066e772cff83aa9fb03b3ac","modified":1741702535871},{"_id":"public/categories/program/index.html","hash":"ae5e3f69f3210bb801bc879f6a2a93641028b43e","modified":1741702535871},{"_id":"public/categories/program/page/2/index.html","hash":"c7f6c34c0952ac00c69b363398ff33cee903163a","modified":1741702535871},{"_id":"public/categories/program/page/3/index.html","hash":"0b742cf6ecc9c72a6123a4df636f5311cd273540","modified":1741702535871},{"_id":"public/categories/program/page/4/index.html","hash":"c3f6272156d9d903106c92edc6682b8945c219fb","modified":1741702535871},{"_id":"public/index.html","hash":"9a0fa508f6a90297ec900ed43fc2598f207b97f7","modified":1741702535871},{"_id":"public/categories/bugfix/index.html","hash":"524aa761f5c35d56c308afd9925b123a83240496","modified":1741702535871},{"_id":"public/page/3/index.html","hash":"37e0cbc9a1570b0f9f809d08d01e12a9b495095e","modified":1741702535871},{"_id":"public/page/2/index.html","hash":"8fb15cd93ab86203fa8f39c99f9f2d43c67b02d0","modified":1741702535871},{"_id":"public/page/4/index.html","hash":"e18134617d498a2b99e19e9c9d33fcb8809bd86d","modified":1741702535871},{"_id":"public/page/5/index.html","hash":"02258aeee7258a580fca10bc1766c4b401550f3a","modified":1741702535871},{"_id":"public/tags/java/index.html","hash":"6216447014ed489460dd5d1bd5bb31a395dab488","modified":1741702535871},{"_id":"public/tags/java/page/2/index.html","hash":"8556a3af80400cffe8257fea9357b3f4cca1f6d4","modified":1741702535871},{"_id":"public/tags/java/page/3/index.html","hash":"1c3494aca076150e63dfea666bf170ac7d284d11","modified":1741702535871},{"_id":"public/tags/java/page/4/index.html","hash":"75a9703a7f968c1c585518cd34a267da2e2dbb08","modified":1741702535871},{"_id":"public/tags/database/index.html","hash":"66524a5687e6c30215dbba0bdc30a0f17003fa0d","modified":1741702535871},{"_id":"public/tags/linux/index.html","hash":"924cc85b4547ec2ad85dc2d862f1c81abe2c0c30","modified":1741702535871},{"_id":"public/medias/avatar.jpg","hash":"861fe6cc4446699c6e6104661c9fee1293ed00c8","modified":1737548267796},{"_id":"public/favicon.png","hash":"861fe6cc4446699c6e6104661c9fee1293ed00c8","modified":1737548267796},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1737548267796},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1737548267796},{"_id":"public/medias/logo.png","hash":"861fe6cc4446699c6e6104661c9fee1293ed00c8","modified":1737548267796},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1737548267796},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1737548267796},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1737548267796},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1737548267796},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1737548267796},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1737548267796},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1737548267796},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1737548267796},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1737548267796},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1737548267796},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1737548267796},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1737548267796},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1737548267796},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1737548267796},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1737548267796},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1737548267796},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1737548267796},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1737548267796},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1737548267796},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1737548267796},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1737548267796},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1737548267796},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1737548267796},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1737548267796},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1737548267796},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1737548267796},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1737548267796},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1737548267796},{"_id":"public/2019/09/30/java-servlet/image-3.png","hash":"08a13ddf197cec95b679f9df930b12a2f383ad30","modified":1737548267796},{"_id":"public/2019/07/12/java-ji-chu-shu-li/image-3.png","hash":"c77768c09c2a06b27bd56c9ff2b495ff77d2ee61","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-13.png","hash":"677661b1e20e1120e321826f43ac6a7d528bbe5f","modified":1737548267796},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1737548267796},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1737548267796},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1737548267796},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1737548267796},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1737548267796},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1737548267796},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1737548267796},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1737548267796},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1737548267796},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1737548267796},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1737548267796},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1737548267796},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1737548267796},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1737548267796},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-42.png","hash":"5bf4470f4197fe730c331fb6da3b22c5a39c9cb1","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-43.png","hash":"61366e50e8679b9bb6ee9bc6abddc89b79dc42b5","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-53.png","hash":"d8996d1da6a33aa7617c265f8beeaab14c3c5508","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-54.png","hash":"d3aa7d0a96a68d8fa9bbb741e218607d11049a20","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-57.png","hash":"9b1b62ec06b2aa2edb7a07108ec4c7857a64973e","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-1.png","hash":"0133787ff116443cbc2238c0f7ea2ff535856712","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-14.png","hash":"580565b50be74b1c677ed1cb555b82b1f9bdc01c","modified":1737548267796},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1737548267796},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1737548267796},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1737548267796},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1737548267796},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1737548267796},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1737548267796},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1737548267796},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1737548267796},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1737548267796},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1737548267796},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1737548267796},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1737548267796},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1737548267796},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1737548267796},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1737548267796},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1737548267796},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1737548267796},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1737548267796},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1737548267796},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1737548267796},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1737548267796},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1737548267796},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1737548267796},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1737548267796},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1737548267796},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1737548267796},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1737548267796},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1737548267796},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1737548267796},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1737548267796},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1737548267796},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1737548267796},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1737548267796},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1737548267796},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1737548267796},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1737548267796},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1737548267796},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1737548267796},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1737548267796},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1737548267796},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1737548267796},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1737548267796},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1737548267796},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1737548267796},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1737548267796},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1737548267796},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1737548267796},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1737548267796},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1737548267796},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1737548267796},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1737548267796},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1737548267796},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1737548267796},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1737548267796},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1737548267796},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1737548267796},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1737548267796},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1737548267796},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1737548267796},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1737548267796},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1737548267796},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1737548267796},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1737548267796},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1737548267796},{"_id":"public/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1737548267796},{"_id":"public/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1737548267796},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1737548267796},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1737548267796},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1737548267796},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1737548267796},{"_id":"public/2020/10/02/ssm-kuang-jia-spring/image-2.png","hash":"c2a44cb7caf5c228f9b8cd2a518c03c5e87fc5ee","modified":1737548267796},{"_id":"public/2022/07/22/shu-ju-jie-gou-he-suan-fa/image-1.png","hash":"49456c40f45316d303657405af14033f82e4a560","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-10.png","hash":"546b6fd09c0759bac64a333feecde3da29de0ae7","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-3.png","hash":"e7a10ae32fb7c2eb58a9f28e8d1a45bef2e902a8","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-4.png","hash":"ad6b1535498168d385ff5223e21d04f66733e3f2","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-5.png","hash":"8507f42395532154e8c8b23990c25151435609c1","modified":1737548267796},{"_id":"public/2019/09/30/java-servlet/image-1.png","hash":"b5a24ea60b50f687ea3ceed66574838785dbf351","modified":1737548267796},{"_id":"public/2019/09/30/java-servlet/image-2.png","hash":"29c5103185beed147500f1c4d1a6bdbd27a7894b","modified":1737548267796},{"_id":"public/2019/07/12/java-ji-chu-shu-li/image-1.png","hash":"5abaa4b37323a5f6dc86b9f237385147da213940","modified":1737548267796},{"_id":"public/2021/07/13/java-xiang-mu-fen-ceng/1626175175_1.png","hash":"8cf740f9af75109a957e7868b6bee42e85374503","modified":1737548267796},{"_id":"public/2020/06/29/java-ji-he/image-1.png","hash":"6d17acf200ac16610759fb3b469606d7a13055f9","modified":1737548267796},{"_id":"public/2021/07/13/java-xiang-mu-fen-ceng/1626175175_2.png","hash":"67f6fbb5d3ea24730982c363d0e9c6055697493a","modified":1737548267796},{"_id":"public/2021/07/13/java-xiang-mu-fen-ceng/1626175175_3.png","hash":"97bd1d01d46b15407ec555c8b4ed75d5a57386b9","modified":1737548267796},{"_id":"public/2021/07/13/java-xiang-mu-fen-ceng/1626175175_5.png","hash":"2dcf97196880be3adc8230b2c117c0b8f3f7cdf9","modified":1737548267796},{"_id":"public/2021/07/13/java-xiang-mu-fen-ceng/1626175175_4.png","hash":"289cd2f776b82cc991e0386a4cc5fd67828d7422","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-10.png","hash":"f7727337373db162840a06162c1cae072892b4d2","modified":1737548267796},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1737548267796},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-27.png","hash":"2583bd9c25a4e51c77ffe08a25e9b1c669d805bb","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-29.png","hash":"acc68a976561002db4947090254329d81d69778d","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-31.png","hash":"bbaea24c0d872bccb308f26e0fb6150c174e9412","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-34.png","hash":"096e014bd53998ff140be7e0801d7f6db3340cec","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-37.png","hash":"42fd4f433b35a5ac1d7331b048d56296719e7642","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-36.png","hash":"efaeb8802535d6ff9a3dc754f5c8bf182a58f3e6","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-39.png","hash":"9d525fcb71b0e6b4609e3715508cb748e15fa307","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-4.png","hash":"8f03c9e27db20af0d7dd6bb9376c20a049c624cb","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-45.png","hash":"5d97d7fb6ee3ce9b6dabbacc97408b1d9477bf12","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-47.png","hash":"c79ab9aeb2f9e4312e3f978018d51e3320d434f2","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-49.png","hash":"597da29156da62b6a830ca36eef3650b6291eff6","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-5.png","hash":"638b2f3622227499e4d688ec0a474383f3be7830","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-52.png","hash":"57fb7c1c20f9059bb19e701fe427ff37948f6194","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-58.png","hash":"d7b15be459fcf6adf58214fa089727998c637f98","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-8.png","hash":"c03565fa606876045edf7c050aa83d557c6c811c","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-9.png","hash":"7fba51910b14e3df26c73a0d3d51b74b8328ff6b","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-11.png","hash":"c8b3cadecc61dc7b4ec6e3472f17ba30d896fc8c","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-12.png","hash":"6caf9929d67699de611ca63bcaf3ad88e4f031f5","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-8.png","hash":"82d3d40f5681bbf0077c65e91c2456066187c47a","modified":1737548267796},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1737548267796},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1737548267796},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1737548267796},{"_id":"public/2020/10/02/ssm-kuang-jia-spring/image-1.png","hash":"cca614af49c497ace853eb303b62d5a8af6ff627","modified":1737548267796},{"_id":"public/2020/10/02/ssm-kuang-jia-spring/image-4.png","hash":"af32a6234ab600f2c6f8da921336ebeed11e5467","modified":1737548267796},{"_id":"public/2020/10/02/ssm-kuang-jia-spring/image-3.png","hash":"7dd2c1b0f8fc0045eade3bb499f846e4a16c9c91","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-1.png","hash":"7ce809f4a81f8d0e43d20ac79cf5523fce0c5d68","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-8.png","hash":"97c83cbf33b701f3def5927adc9d45ee865e5ec9","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-9.png","hash":"67551b1ae107b1d3ce5fb71a77bf3d766b26759f","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-1.png","hash":"a4256fed74d9ad2bb163eaded5731a8a1d5a657a","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-12.png","hash":"17f94c754255908adbabbcff9b2f3621952c2b97","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-16.png","hash":"cdc613318b3445b535e365cb219d418aa03a9fac","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-17.png","hash":"46edfbd909672e625dbf176e52207662ec69ee2c","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-19.png","hash":"6272854406eb29cab81213c60b4f341e6ab86586","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-20.png","hash":"9827700a72e912ddf42f161d307b8016ff79f84f","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-22.png","hash":"74a37a5784ea3a5d81e9cc6729460e4063d368fd","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-24.png","hash":"b9c59a8d3d0c1b1b69f3b5aa18f9504a93a9b445","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-25.png","hash":"d2c209d514e36eb8b12c1fefadc2af15a0450ba9","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-28.png","hash":"828a1885cd9e36e933a6b7b374bcaf58ea34c9a9","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-30.png","hash":"3eaf6f289a8016d5407c3ea315d550612e59d4d5","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-33.png","hash":"d0c4977d2a1aed5a403630afd17d9227912456fa","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-38.png","hash":"6ef34db9f5a690f50bd343a7248f9357dddb798a","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-40.png","hash":"7fe6e9073d77bdbf854667b6c519500199c72e08","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-41.png","hash":"80e90f45cfd267fc60756b10c93f571ab0fad703","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-44.png","hash":"ad382e22cc5843a189a425ee263370f5a057eac6","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-46.png","hash":"b7f52ce3bef8d799ebb72b626e3ea82e41977522","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-51.png","hash":"47d1cbcec7d802b8982e75fa8b71da18d0de0c88","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-50.png","hash":"228b658dedbc1c1916d86e388b5e9bb0aab48d6c","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-55.png","hash":"d9779b3a1db13fc9a9ce94c3babd7c707375b8cc","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-7.png","hash":"381ef96acff2b6f44c26a3fd74746864d8a0624d","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-10.png","hash":"f9e57a0ad64607a4e881d8956ddc8ea0dedd0a3f","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-13.png","hash":"ffdc1cfc3e037dc604071708fc78b27e750ab483","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-3.png","hash":"e7482711375e8a4cf90b135fd89ea87ed18cb9fe","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-7.png","hash":"3a655b8a11b34a7c8829b2285afd44b61f7b6483","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-9.png","hash":"533a6d4096de42af0a7ab6b4508e3d7a30208fb7","modified":1737548267796},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1737548267796},{"_id":"public/2021/08/23/maven/image-2.png","hash":"6268d301cd43b20331207385ab6ab53daa541a2f","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-11.png","hash":"b6c038c7b566e38e5b68f6571beb902215a5d5f1","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-13.png","hash":"b4e83fd6d3532fe87888b80a7ced6bdb097add1d","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-12.png","hash":"b6c038c7b566e38e5b68f6571beb902215a5d5f1","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-2.png","hash":"81bd7210271f9e007aee4ceb595eaff831a77a97","modified":1737548267796},{"_id":"public/2020/04/12/java-duo-xian-cheng/image-1.png","hash":"f384153f0e126e1e10ae57f6ae80759f29c894a3","modified":1737548267796},{"_id":"public/2019/07/12/java-ji-chu-shu-li/image-2.png","hash":"709f1f317e344a1c32e68497adedd5a31aa654dc","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-11.png","hash":"48343f315c7abd71e6cab03a7bd4802a19c3406f","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-14.png","hash":"6b35dfe8adfcd168d18648a3ea2382c60b13d40b","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-15.png","hash":"dc38e8ba58abce344e96865d5969d927fa416cbf","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-18.png","hash":"e5666ba777fa78a838213625a25622b22d6a8c8e","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-23.png","hash":"09b2745836efd4d76f8b3e16a085369523446efe","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-21.png","hash":"059f98cc9200d1874bbe2c61cb9322c3ddda8221","modified":1737548267796},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-26.png","hash":"0ca63b8699eb2e0f4cb07f3ca157e5f96f26e1e0","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-32.png","hash":"a15310fb58f27ff57f8f051aac372c858da8ae64","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-3.png","hash":"0bd3aa8576760ffc6b63113334c744304d2ba528","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-56.png","hash":"e96de134c61ff42cfe08516007e5170ffca5b92c","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-6.png","hash":"17e1eda93f25827b1e72cb092d670c17384f7eb9","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-2.png","hash":"109c975e5a00c71d4795436b38f99f79f3937504","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-5.png","hash":"6c2506c91d0cc29447d0c69ffdac50360eccf4e0","modified":1737548267796},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1737548267796},{"_id":"public/2022/01/13/java-fan-she/image-3.png","hash":"3ea259fc7f28f3861a3d6568420d24d5e31ea110","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-2.png","hash":"6bfd1f400b37f553cc57b7a0e700106803212494","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-4.png","hash":"815986e9247806236aed972aed1ace44552230e4","modified":1737548267796},{"_id":"public/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/qizhongjon.png","hash":"2841cbdcab0ae96ac0620e5d0ed5224e2dedc899","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-6.png","hash":"9542fb82ef17c5a52bdb92fb5d79c7ed05ef67da","modified":1737548267796},{"_id":"public/2022/04/30/java-io/image-7.png","hash":"9542fb82ef17c5a52bdb92fb5d79c7ed05ef67da","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-35.png","hash":"0e062ee9e4edf91e985c262754603a6d9c2adf46","modified":1737548267796},{"_id":"public/2022/02/17/redis/image-48.png","hash":"ecc521f4535022349fc478fd5c8d5cb11e1b0dda","modified":1737548267796},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1737548267796},{"_id":"public/2021/08/23/maven/image-1.png","hash":"d800b213caaa61e91ef2b1c8ea397aef5e40dcb0","modified":1737548267796},{"_id":"public/2022/06/13/jvm/image-6.png","hash":"7a2bfa29938efb867d914c8d35fb42466bbefe3a","modified":1737548267796},{"_id":"public/2022/01/13/java-fan-she/image-20221002202918484.png","hash":"10cd95bd0629f59f3c4efc8231aa9db9377420ec","modified":1737548267796},{"_id":"public/2022/01/13/java-fan-she/image-1.png","hash":"4b49be3dd3ce33a2df5bcc5eecbe9edac1353b4a","modified":1737548267796},{"_id":"public/2022/01/13/java-fan-she/image-4.png","hash":"e24bc21c7f6147ca3e84f9a55247521dc0d111c5","modified":1737548267796},{"_id":"public/2022/01/13/java-fan-she/image-2.png","hash":"8166c56bf105ae1c05ce7c5b5753ee2802218153","modified":1737548267796},{"_id":"public/2022/01/13/java-fan-she/image-20221001140225816.png","hash":"8166c56bf105ae1c05ce7c5b5753ee2802218153","modified":1737548267796},{"_id":"source/_posts/redis数据结构.md","hash":"1dcc8eb3990f74f07bee9a718866776f550cb9ba","modified":1741702650733},{"_id":"source/_posts/redis数据结构/image-2.png","hash":"0217e671fa047971e63be246e08f02a8bec6a58e","modified":1741700133619},{"_id":"source/_posts/redis数据结构/image-1.png","hash":"b6959830f42729177b126e8a50ecbb754b609981","modified":1741698221152},{"_id":"source/_posts/redis数据结构/image-3.png","hash":"f999e6ebc7094c0063272b2411668b398ea168ad","modified":1741700941753},{"_id":"source/_posts/redis数据结构/image-4.png","hash":"6bc63ee3fd160afd6d355450a431cfecfb21d8ac","modified":1741701520824},{"_id":"public/2023/10/11/redis-shu-ju-jie-gou/index.html","hash":"c1b1f1e1a7e8d31d008dd9ea145071700f5056eb","modified":1741702711823},{"_id":"public/archives/2023/10/index.html","hash":"860b2680326ad8c7f3100341df2d09df8d92b352","modified":1741702535871},{"_id":"public/tags/redis/index.html","hash":"d0e15d25b451a36efdeea520b276ee81fe8928b5","modified":1741702535871},{"_id":"public/2023/10/11/redis-shu-ju-jie-gou/image-2.png","hash":"0217e671fa047971e63be246e08f02a8bec6a58e","modified":1741702535871},{"_id":"public/2023/10/11/redis-shu-ju-jie-gou/image-3.png","hash":"f999e6ebc7094c0063272b2411668b398ea168ad","modified":1741702535871},{"_id":"public/2023/10/11/redis-shu-ju-jie-gou/image-1.png","hash":"b6959830f42729177b126e8a50ecbb754b609981","modified":1741702535871},{"_id":"public/2023/10/11/redis-shu-ju-jie-gou/image-4.png","hash":"6bc63ee3fd160afd6d355450a431cfecfb21d8ac","modified":1741702535871}],"Category":[{"name":"编程","_id":"cm67vdk9o000494wagpnpbu0f"},{"name":"问题记录","_id":"cm67vdka2001j94wag8gz0e23"}],"Data":[],"Page":[{"title":"about","date":"2022-04-07T06:05:44.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-04-07 14:05:44\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-07-21T04:46:44.660Z","path":"about/index.html","comments":1,"_id":"cm67vdk9h000094waafid16ns","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2022-04-07T06:08:11.000Z","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-04-07 14:08:11\n---\n","updated":"2022-07-21T04:46:44.662Z","path":"friends/index.html","comments":1,"layout":"page","_id":"cm67vdk9m000294wafnr0dn6o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2022-04-07T06:06:59.000Z","type":"contact","about":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2022-04-07 14:06:59\ntype: \"contact\"\nabout: \"contact\"\n---\n","updated":"2022-07-21T04:46:44.661Z","path":"contact/index.html","comments":1,"layout":"page","_id":"cm67vdk9p000694wa7y7z7su8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2022-07-27T16:57:40.838Z","path":"categories/index.html","comments":1,"_id":"cm67vdk9r000894wad0ox2r3p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-04-07T06:04:47.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-04-07 14:04:47\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-07-21T04:46:44.662Z","path":"tags/index.html","comments":1,"_id":"cm67vdk9s000a94wa0umz72nt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JAVA-IO","date":"2022-04-30T03:42:56.000Z","_content":"\n# JAVA-IO\n\n## InputStream-字节输入流\n\n- 继承关系\n\n{% asset_image-1.png %}\n\n- 分类：\n\n  - FileInputStream 文件输入流\n\n  - BufferedInputStream 缓冲输入流\n\n  - ObjectInputStream 对象输入流\n\n    \n\n\n\n## OutputStream-字节输出流\n\n- 继承关系\n\n{% asset_image-3.png %}\n\n- 分类\n\n  - FileOutputStream 文件输出流\n  - BufferedOutputStream 缓冲输出流\n  - ObjectOutputStream 对象输出流\n  - PrintStream 打印输出流\n\n\n\n## Reader-字符输入流\n\n- 继承关系\n\n{% asset_image-8.png %}\n\n- 分类\n\n  - FileReader 文件输入流\n  - BufferedReader 缓冲输入流\n\n\n\n## Writer-字符输出流\n\n- 继承关系\n\n{% asset_image-9.png %}\n\n- 分类\n\n  - FileWriter 文件输出流\n\n  - BufferedWriter 缓冲输出流\n  - PrintWriter 打印输出流\n\n\n\n## 节点流与处理流\n\n1. 节点流\n\n   可以从一个特定的数据源读写数据，如FileReader、FileWriter\n\n2. 处理流（包装流）\n\n   连接在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter。\n\n   - 对象流ObjectInputStream和ObjectOutputStream，需要将基本类型或对象进行序列化和反序列化操作，保存数据的值和数据类型。其类需要实现Serializable\n\n   - 以缓冲的方式提高输入输出效率\n   - 提供一系列便捷的方法来一次输入输出大批量的数据，更加灵活。使用装饰器设计模式，不与直接数据源相连\n\n{% asset_image-8.png %}\n\n\n\n## 转换流\n\n- InputStreamReader\n\n  Reader的子类，可以将InputStream（字节流）包装成Reader（字符流）\n\n{% asset_image-12.png %}\n\n- OutputStreamWriter\n\n  Writer的子类，可以将OutputStream（字节流）包装成Writer（字符流）\n\n{% asset_image-13.png %}","source":"_posts/JAVA-IO.md","raw":"---\ntitle: JAVA-IO\ndate: 2022-04-30 11:42:56\ntags: JAVA\ncategories: 编程\n---\n\n# JAVA-IO\n\n## InputStream-字节输入流\n\n- 继承关系\n\n{% asset_image-1.png %}\n\n- 分类：\n\n  - FileInputStream 文件输入流\n\n  - BufferedInputStream 缓冲输入流\n\n  - ObjectInputStream 对象输入流\n\n    \n\n\n\n## OutputStream-字节输出流\n\n- 继承关系\n\n{% asset_image-3.png %}\n\n- 分类\n\n  - FileOutputStream 文件输出流\n  - BufferedOutputStream 缓冲输出流\n  - ObjectOutputStream 对象输出流\n  - PrintStream 打印输出流\n\n\n\n## Reader-字符输入流\n\n- 继承关系\n\n{% asset_image-8.png %}\n\n- 分类\n\n  - FileReader 文件输入流\n  - BufferedReader 缓冲输入流\n\n\n\n## Writer-字符输出流\n\n- 继承关系\n\n{% asset_image-9.png %}\n\n- 分类\n\n  - FileWriter 文件输出流\n\n  - BufferedWriter 缓冲输出流\n  - PrintWriter 打印输出流\n\n\n\n## 节点流与处理流\n\n1. 节点流\n\n   可以从一个特定的数据源读写数据，如FileReader、FileWriter\n\n2. 处理流（包装流）\n\n   连接在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter。\n\n   - 对象流ObjectInputStream和ObjectOutputStream，需要将基本类型或对象进行序列化和反序列化操作，保存数据的值和数据类型。其类需要实现Serializable\n\n   - 以缓冲的方式提高输入输出效率\n   - 提供一系列便捷的方法来一次输入输出大批量的数据，更加灵活。使用装饰器设计模式，不与直接数据源相连\n\n{% asset_image-8.png %}\n\n\n\n## 转换流\n\n- InputStreamReader\n\n  Reader的子类，可以将InputStream（字节流）包装成Reader（字符流）\n\n{% asset_image-12.png %}\n\n- OutputStreamWriter\n\n  Writer的子类，可以将OutputStream（字节流）包装成Writer（字符流）\n\n{% asset_image-13.png %}","slug":"JAVA-IO","published":1,"updated":"2022-10-13T15:14:21.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9j000194wa97u0hnyg","content":"<h1 id=\"JAVA-IO\"><a href=\"#JAVA-IO\" class=\"headerlink\" title=\"JAVA-IO\"></a>JAVA-IO</h1><h2 id=\"InputStream-字节输入流\"><a href=\"#InputStream-字节输入流\" class=\"headerlink\" title=\"InputStream-字节输入流\"></a>InputStream-字节输入流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类：</p>\n<ul>\n<li><p>FileInputStream 文件输入流</p>\n</li>\n<li><p>BufferedInputStream 缓冲输入流</p>\n</li>\n<li><p>ObjectInputStream 对象输入流</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"OutputStream-字节输出流\"><a href=\"#OutputStream-字节输出流\" class=\"headerlink\" title=\"OutputStream-字节输出流\"></a>OutputStream-字节输出流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类</p>\n<ul>\n<li>FileOutputStream 文件输出流</li>\n<li>BufferedOutputStream 缓冲输出流</li>\n<li>ObjectOutputStream 对象输出流</li>\n<li>PrintStream 打印输出流</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reader-字符输入流\"><a href=\"#Reader-字符输入流\" class=\"headerlink\" title=\"Reader-字符输入流\"></a>Reader-字符输入流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类</p>\n<ul>\n<li>FileReader 文件输入流</li>\n<li>BufferedReader 缓冲输入流</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Writer-字符输出流\"><a href=\"#Writer-字符输出流\" class=\"headerlink\" title=\"Writer-字符输出流\"></a>Writer-字符输出流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类</p>\n<ul>\n<li><p>FileWriter 文件输出流</p>\n</li>\n<li><p>BufferedWriter 缓冲输出流</p>\n</li>\n<li><p>PrintWriter 打印输出流</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"节点流与处理流\"><a href=\"#节点流与处理流\" class=\"headerlink\" title=\"节点流与处理流\"></a>节点流与处理流</h2><ol>\n<li><p>节点流</p>\n<p>可以从一个特定的数据源读写数据，如FileReader、FileWriter</p>\n</li>\n<li><p>处理流（包装流）</p>\n<p>连接在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter。</p>\n<ul>\n<li><p>对象流ObjectInputStream和ObjectOutputStream，需要将基本类型或对象进行序列化和反序列化操作，保存数据的值和数据类型。其类需要实现Serializable</p>\n</li>\n<li><p>以缓冲的方式提高输入输出效率</p>\n</li>\n<li><p>提供一系列便捷的方法来一次输入输出大批量的数据，更加灵活。使用装饰器设计模式，不与直接数据源相连</p>\n</li>\n</ul>\n</li>\n</ol>\n\n\n\n\n<h2 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><ul>\n<li><p>InputStreamReader</p>\n<p>Reader的子类，可以将InputStream（字节流）包装成Reader（字符流）</p>\n</li>\n</ul>\n\n\n<ul>\n<li><p>OutputStreamWriter</p>\n<p>Writer的子类，可以将OutputStream（字节流）包装成Writer（字符流）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-IO\"><a href=\"#JAVA-IO\" class=\"headerlink\" title=\"JAVA-IO\"></a>JAVA-IO</h1><h2 id=\"InputStream-字节输入流\"><a href=\"#InputStream-字节输入流\" class=\"headerlink\" title=\"InputStream-字节输入流\"></a>InputStream-字节输入流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类：</p>\n<ul>\n<li><p>FileInputStream 文件输入流</p>\n</li>\n<li><p>BufferedInputStream 缓冲输入流</p>\n</li>\n<li><p>ObjectInputStream 对象输入流</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"OutputStream-字节输出流\"><a href=\"#OutputStream-字节输出流\" class=\"headerlink\" title=\"OutputStream-字节输出流\"></a>OutputStream-字节输出流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类</p>\n<ul>\n<li>FileOutputStream 文件输出流</li>\n<li>BufferedOutputStream 缓冲输出流</li>\n<li>ObjectOutputStream 对象输出流</li>\n<li>PrintStream 打印输出流</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Reader-字符输入流\"><a href=\"#Reader-字符输入流\" class=\"headerlink\" title=\"Reader-字符输入流\"></a>Reader-字符输入流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类</p>\n<ul>\n<li>FileReader 文件输入流</li>\n<li>BufferedReader 缓冲输入流</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Writer-字符输出流\"><a href=\"#Writer-字符输出流\" class=\"headerlink\" title=\"Writer-字符输出流\"></a>Writer-字符输出流</h2><ul>\n<li>继承关系</li>\n</ul>\n\n\n<ul>\n<li><p>分类</p>\n<ul>\n<li><p>FileWriter 文件输出流</p>\n</li>\n<li><p>BufferedWriter 缓冲输出流</p>\n</li>\n<li><p>PrintWriter 打印输出流</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"节点流与处理流\"><a href=\"#节点流与处理流\" class=\"headerlink\" title=\"节点流与处理流\"></a>节点流与处理流</h2><ol>\n<li><p>节点流</p>\n<p>可以从一个特定的数据源读写数据，如FileReader、FileWriter</p>\n</li>\n<li><p>处理流（包装流）</p>\n<p>连接在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter。</p>\n<ul>\n<li><p>对象流ObjectInputStream和ObjectOutputStream，需要将基本类型或对象进行序列化和反序列化操作，保存数据的值和数据类型。其类需要实现Serializable</p>\n</li>\n<li><p>以缓冲的方式提高输入输出效率</p>\n</li>\n<li><p>提供一系列便捷的方法来一次输入输出大批量的数据，更加灵活。使用装饰器设计模式，不与直接数据源相连</p>\n</li>\n</ul>\n</li>\n</ol>\n\n\n\n\n<h2 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><ul>\n<li><p>InputStreamReader</p>\n<p>Reader的子类，可以将InputStream（字节流）包装成Reader（字符流）</p>\n</li>\n</ul>\n\n\n<ul>\n<li><p>OutputStreamWriter</p>\n<p>Writer的子类，可以将OutputStream（字节流）包装成Writer（字符流）</p>\n</li>\n</ul>\n"},{"title":"Servlet","date":"2019-09-30T14:02:29.000Z","_content":"\n# Servlet\n\n## C/S、B/S架构\n\n1. Client/Server架构\n   - 在客户端安装特定软件\n   - 图形显示效果好\n   - 服务器功能升级，需要客户端也同步升级，不利于维护\n2. Browser/Server架构\n   - 无需安装客户端，浏览器可访问\n   - 功能升级，只需升级服务器端\n   - 图形显示效果一般\n   - 需要通过http协议访问\n\n\n\n## 常见服务器\n\n1. Tomcat 免费开源、支持servlet和JSP规范\n2. jetty 运行效率比Tomcat高\n3. TODO 后续补充...\n\n\n\n## Tomcat目录结构\n\n- bin 存放二进制可执行文件\n- conf 存放配置信息\n- lib 类库，jar包\n- logs 日志文件\n- temp 运行时产生的临时数据\n- webapps 存放web项目\n- work 运行时生成的文件\n\n\n\n## Servlet运行测试\n\n1. 概念：\n\n   Server Applet的简称，是服务端的程序，可交互式的处理客户端发送到服务端的请求，并完成操作响应。\n\n2. 作用：\n\n   - 接收客户端请求，完成操作\n   - 动态生成网页\n   - 将包含操作结果的动态网页响应给客户端\n\n3. 开发环境：\n\n   lib/servlet-api.jar配置到classpath中\n\n4. 实现Servlet的五个方法\n\n   ```java\n   // Tomcat10的servlet-api.jar下包名改成了jakarta\n   import jakarta.servlet.*;\n   import java.io.IOException;\n   \n   public class MyServlet implements Servlet {\n       public void init(ServletConfig servletConfig) throws ServletException {\n   \n       }\n   \n       public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n   \n       }\n   \n       public void destroy(){\n   \n       }\n   \n       public String getServletInfo(){\n           return null;\n       }\n   \n       public ServletConfig getServletConfig(){\n           return null;\n       }\n   }\n   ```\n\n5. 配置web.xml\n\n   ```xml\n   <web-app> \n   <!--配置Servlet -->\n     <servlet>\n   \t<servlet-name>myServlet</servlet-name>\n   \t<servlet-class>MyServlet</servlet-class>\n       <!--配置Servlet 正整数或0则在servlet加载时执行，值越小优先级越高。未配置或负数则在servlet被请求时再加载-->\n        <load-on-standup>1</load-on-standup>\n     </servlet>\n     <!-- 对servlet做映射 -->\n     <servlet-mapping>\n   \t<!-- 与servelet的name一致-->\n     \t<servlet-name>myServlet</servlet-name>\n   \t<url-pattern>/myservlet</url-pattern>\n     </servlet-mapping>\n   </web-app>\n   ```\n\n6. 重启Tomcat，访问localhost:8080/myWeb/myservlet\n\n\n\n## IDEA部署Tomcat\n\n{% asset_img image-1.png %}\n\n{% asset_img image-2.png %}\n\n{% asset_img image-3.png %}\n\n\n\n## HTTP协议\n\n1. 描述：超文本传输协议，给予请求和响应模式的、无状态的、应用层的协议，运行于TCP协议基础之上。\n2. 特点：\n   - 支持客户端/服务器模式\n   - 简单快速：客户端指向服务器发送请求方法和路径，服务器即可响应数据，通信速度很快\n   - 灵活：http允许传输任意类型的数据，传输的数据类型由Content-type标识\n   - 无连接：每次TCP连接只处理一个或多个请求，服务器处理完请求即断开连接，节省时间。（HTTP1.1会等几秒断开，如果有新连接则暂时不断）\n   - 无状态：HTTP协议是无状态协议，对事务处理没有记忆能力\n   - HTTP1.1：一个TCP连接上可以传送多个HTTP请求，多个请求和响应可以重叠进行，增加更多的响应头和请求头，Connection报头来控制\n\n3. 通信流程：\n   - 客户端与服务器建立连接（三次握手）\n   - 客户端向服务端发送请求\n   - 服务器接收请求，并根据请求返回响应为文件作为应答\n   - 客户端与服务器关闭连接（四次挥手）\n\n4. 请求报文组成：\n\n   - 请求行：请求方法/地址 URI协议/版本\n   - 请求头：request header\n   - 空行\n   - 请求正文\n\n5. 响应报文组成：\n\n   - 状态行\n   - 响应头 response header\n   - 空行\n   - 响应正文\n\n   \n\n## Servlet\n\n1. 核心接口和类\n\n   除了实现Servlet接口，还可以通过继承GenericServlet或HttpServlet类实现\n\n2. Servlet接口\n\n   ```java\n   public void init(ServletConfig servletConfig);\n   public void service(ServletRequest request, ServletResponse response);\n   public void destroy();\n   public String getServletInfo();\n   public ServletConfig getServletConfig();\n   ```\n\n3. GenericServlet抽象类\n\n   提供了init()和destroy()的简单实现，只需继承后重写service()方法\n\n4. HttpServlet类（推荐）\n\n   与协议有关的实现，继承了GenericServlet。HTTPServlet子类通过service()方法判断请求类型查找子类重写的方法。HTTPServlet子类至少重写一个方法：doGet、doPost、doPut、doDelete\n\n\n\n## 注解（Servlet 3.0后支持）\n\n@WebServlet(name,value,urlPatterns,loadOnStartup)\n\n- name：同<servlet-name>\n- value：同<url-pattern>，可配置多个\n- urlPatterns：同value，不能同时使用\n- loadOnStartup：同<load-on-startup>\n\n\n\n## Servlet注解\n\n1. request对象\n\n   - get明文传递，效率高，数据量小，不安全；post密文传递，数据量大，安全，效率低\n\n   - 主要方法\n     - String getParameter(String name) ：根据表单组件名称获取提交数据\n     - void setCharacterEncoding(String charset)：指定每个请求的编码\n     - getRequestDispatcher(\"/otherServlet\")：转发跳转\n     - setAttribute(key,value)：存数据\n     - getAttribute(key)：取数据\n\n2. response对象\n\n   - 主要方法\n\n     - setHeader(String name,String value)：设置响应头\n     - setContentType(String type)：设置响应类型和响应式的编码格式\n     - setCharacterEncoding(String charset)：设置服务端响应内容的编码格式\n     - PrintWriter getWriter()：获取字符输出流\n     - sendRedirect(String targetURI)：页面重定向跳转\n\n   - 中文乱码\n\n     ```java\n     res.setCharacterEncoding(\"UTF-8\");\n     res.setHeader(\"Content-Type\":\"text/html;charset=UTF-8\");\n     res.setContentType(\"text/html;charset=UTF-8\");//推荐\n     ```\n\n\n\n## 转发\n\n- 服务器行为，浏览器只做了一次请求，浏览器地址不变\n- 转发之间传输的信息不会丢失\n- 只能转发给统一个web应用下的组件\n\n\n\n## 重定向\n\n- 客户端行为，浏览器做了两次请求，浏览器地址栏改变\n- response没有作用域，两次请求的数据无法共享，信息会丢失\n- ?key=value传递明文数据，getParameter(key)取数据\n- 可以重定向到任何资源路径\n\n\n\n## 生命周期\n\n1. 实例化\n\n   - 用户第一次访问servlet时由容器调用Servlet构造器创建具体的对象，也可以在启动时就创建\n   - 只执行一次\n\n2. 初始化\n\n   - 初始化阶段，init()方法会被调用\n\n   - 只被执行一次\n\n3. 服务\n\n   - 客户端发送请求时容器将请求和响应对象转发给servlet，传递给service方法\n   - 根据请求次数执行多次\n\n4. 销毁\n\n   - Servlet容器停止或重启，销毁Servlet对象，并调用destroy()方法\n   - 执行一次\n\n\n\n## Servlet特性\n\n1. 线程安全问题\n\n   Tomcat容器可以同时多个线程并发访问同一个Servlet，如果在方法中对成员变量做修改，就会有线程安全的问题\n\n2. 保证线程安全\n\n   - synchronized：将存在线程安全的问题存放在同步代码块中。效率低不推荐\n   - 实现SingleThreadModel接口，每个线程创建servlet实例，但是效率低已淘汰\n   - 尽可能使用局部变量\n\n\n\n## Cookie\n\n客户端状态管理，将状态保存在客户端\n\n1. 描述：web服务器在HTTP响应头中附带给浏览器的一小段数据。浏览器在访问该web服务器时，都应在HTTP请求投中将这个Cookie回传给Web服务器\n\n2. 创建：\n\n   ```java\n   // 创建cookie对象\n   Cookie cookie = new Cookie(\"name\", \"value\");\n   // 设置路径：访问权限\n   cookie.setPath(\"/webs\");\n   // 生命周期 >0：有效期，单位秒；0：浏览器关闭；-1：内存存储\n   cookie.setMaxAge(-1);\n   // 响应\n   resp.addCookie(cookie);\n   ```\n\n3. 获取Cookie\n\n   ```java\n   Cookie[] cookies = request.getCookies();\n   for(Cookie cookie:cookies){\n   \tSystem.out.println(cookie.getName()+cookie.getValue());\n   }\n   ```\n\n4. 编码解码\n\n   ```java\n   // 编码\n   URLEncoder.encode(\"中文\",\"UTF-8\");\n   // 解码\n   URLDecoder.decode(cookie.getName(),\"UTF-8\");\n   ```\n\n5. 优缺点：\n\n   - 优点\n     1. 可配置到期规则\n     2. 简单，键值对\n     3. 数据持久性，过期之前一直保存在浏览器上\n\n   - 缺点\n     1. 大小受限制\n     2. 用户可设置浏览器禁用Cookie\n     3. 安全风险：有可能被篡改\n\n\n\n## Session\n\n1. 描述：用于记录用户的状态。一段时间内，单个客户端与Web服务器的一连串相关的交互过程\n\n2. 原理：\n   - 服务器为每一次会话分配一个Session对象\n   - 同一个浏览器（未关闭）发起的多次请求，同属于一次会话\n   - 首次使用到Session时，服务器会自动创建Session，并创建Cookie存储SessionId发送回客户端\n\n3. Session操作\n\n   1. 创建session\n\n       ```java\n       HttpSession session = request.getSession();\n       System.out.println(\"ID\"+session.getId())\n       ```\n\n   2. 设置时效\n\n       ```java\n       session.setmaxInactiveInterval(seconds)\n       ```\n\n   3. 保存数据\n\n       ```java\n       session.setAttribute(\"key\",value);\n       ```\n\n   4. 获取数据\n\n        ```java\n        session.getAttribute(\"key\");\n        ```\n\n   5. 移除数据\n\n      ```java\n      session.removeAttribute(\"key\");\n      ```\n\n   6. 退出登录、注销\n\n      ```java\n      session.invalidate()\n      ```\n\n4. 生命周期\n   - 开始：第一次使用到Session的请求产生，创建session\n   - 结束：浏览器关闭/session超时/手动注销\n\n5. 浏览器禁用cookie解决方案-URL重写\n\n   ```java\n   String newURL= response.encodeRedirectURL(\"/要跳转的路径\")\n   response.sendRedirect(newURL)\n   ```\n\n\n\n## ServletContext对象\n\n1. 描述：全局对象，对应一个Tomcat中的web应用。Web服务器启动时，会为每一个web应用创建一块共享的存储区域。服务器关闭时销毁。\n\n2. 获取：\n\n   ```java\n   getServletContext();// this/request/session获取的ServletContext是同一个\n   ```\n\n3. 作用：\n\n   1. 获取项目真实路径\n\n      ```java\n      servletContext.getRealPath(\"/\");\n      ```\n\n   2. 获取项目上下文路径（应用程序名称）\n\n      ```java\n      servletContext.getContextPath();\n      request.getContextPath();\n      ```\n\n   3. 全局作用域的容器\n\n      - 存储数据\n\n        ```java\n        servletContext.setAttribute(\"key\",value);\n        ```\n\n      - 获取数据\n\n        ```java\n        servletContext.getAttribute(\"key\");\n        ```\n\n      - 移除数据\n\n        ```java\n        servletContext.removeAttribute(\"key\");\n        ```\n\n   4. 特点：\n\n      - 一个应用对应一个Servlet上下文\n      - 生命周期：只要容器不关闭、应用不卸载，servletContext就一直存在\n\n\n\n## 过滤器\n\n1. 描述：处于客户端与服务器目标资源之间的一道过滤技术。\n\n2. 作用：先于Servlet处理客户端请求；响应时根据执行流程再次反向执行Filter。解决多个Servlet共同代码冗余代码。\n\n3. 实现：\n\n   - 编写Java类实现Filter接口\n   - 在doFilter方法里设计拦截逻辑\n   - 设置拦截路径\n\n   ```java\n   @WebFilter(\"/filter\")\n   public class MyFilter implements Filter {\n       @Override\n       public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n           System.out.println(\"Request Filter\");\n           filterChain.doFilter(servletRequest,servletResponse);\n           System.out.println(\"Response Filter\");\n       }\n   }\n   ```\n\n4. web.xml配置\n\n   ```xml\n   <filter>\n       <filter-name>xml</filter-name>\n       <filter-class>com.learn.myservlet.learnservlet.MyServlet</filter-class>\n   </filter>\n   <filter-mapping>\n       <filter-name>xml</filter-name>\n       <url-pattern>/目标资源路径</url-pattern>\n   </filter-mapping>\n   ```\n\n5. 过滤器链\n\n   1. 描述：一个web应用中可以编写多个Filter，一组Filter组合称为Filter链\n   2. 优先级：\n      - 如果为注解，按照泪泉名称的字符串顺序决定执行顺序\n      - 如果为web.xml，按照filter-mapping注册顺序，从上到下\n      - web.xml配置优先注解\n      - 如果注解和web.xml同时配置，会创建多个过滤器对象，造成多次过滤\n\n6. 拦截路径\n\n   - 精确拦截，/test\n   - 后缀拦截，*.jsp\n   - 通配符拦截，/*","source":"_posts/JAVA-Servlet.md","raw":"---\ntitle: Servlet\ndate: 2019-09-30 22:02:29\ntags: JAVA\ncategories: 编程\n---\n\n# Servlet\n\n## C/S、B/S架构\n\n1. Client/Server架构\n   - 在客户端安装特定软件\n   - 图形显示效果好\n   - 服务器功能升级，需要客户端也同步升级，不利于维护\n2. Browser/Server架构\n   - 无需安装客户端，浏览器可访问\n   - 功能升级，只需升级服务器端\n   - 图形显示效果一般\n   - 需要通过http协议访问\n\n\n\n## 常见服务器\n\n1. Tomcat 免费开源、支持servlet和JSP规范\n2. jetty 运行效率比Tomcat高\n3. TODO 后续补充...\n\n\n\n## Tomcat目录结构\n\n- bin 存放二进制可执行文件\n- conf 存放配置信息\n- lib 类库，jar包\n- logs 日志文件\n- temp 运行时产生的临时数据\n- webapps 存放web项目\n- work 运行时生成的文件\n\n\n\n## Servlet运行测试\n\n1. 概念：\n\n   Server Applet的简称，是服务端的程序，可交互式的处理客户端发送到服务端的请求，并完成操作响应。\n\n2. 作用：\n\n   - 接收客户端请求，完成操作\n   - 动态生成网页\n   - 将包含操作结果的动态网页响应给客户端\n\n3. 开发环境：\n\n   lib/servlet-api.jar配置到classpath中\n\n4. 实现Servlet的五个方法\n\n   ```java\n   // Tomcat10的servlet-api.jar下包名改成了jakarta\n   import jakarta.servlet.*;\n   import java.io.IOException;\n   \n   public class MyServlet implements Servlet {\n       public void init(ServletConfig servletConfig) throws ServletException {\n   \n       }\n   \n       public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException {\n   \n       }\n   \n       public void destroy(){\n   \n       }\n   \n       public String getServletInfo(){\n           return null;\n       }\n   \n       public ServletConfig getServletConfig(){\n           return null;\n       }\n   }\n   ```\n\n5. 配置web.xml\n\n   ```xml\n   <web-app> \n   <!--配置Servlet -->\n     <servlet>\n   \t<servlet-name>myServlet</servlet-name>\n   \t<servlet-class>MyServlet</servlet-class>\n       <!--配置Servlet 正整数或0则在servlet加载时执行，值越小优先级越高。未配置或负数则在servlet被请求时再加载-->\n        <load-on-standup>1</load-on-standup>\n     </servlet>\n     <!-- 对servlet做映射 -->\n     <servlet-mapping>\n   \t<!-- 与servelet的name一致-->\n     \t<servlet-name>myServlet</servlet-name>\n   \t<url-pattern>/myservlet</url-pattern>\n     </servlet-mapping>\n   </web-app>\n   ```\n\n6. 重启Tomcat，访问localhost:8080/myWeb/myservlet\n\n\n\n## IDEA部署Tomcat\n\n{% asset_img image-1.png %}\n\n{% asset_img image-2.png %}\n\n{% asset_img image-3.png %}\n\n\n\n## HTTP协议\n\n1. 描述：超文本传输协议，给予请求和响应模式的、无状态的、应用层的协议，运行于TCP协议基础之上。\n2. 特点：\n   - 支持客户端/服务器模式\n   - 简单快速：客户端指向服务器发送请求方法和路径，服务器即可响应数据，通信速度很快\n   - 灵活：http允许传输任意类型的数据，传输的数据类型由Content-type标识\n   - 无连接：每次TCP连接只处理一个或多个请求，服务器处理完请求即断开连接，节省时间。（HTTP1.1会等几秒断开，如果有新连接则暂时不断）\n   - 无状态：HTTP协议是无状态协议，对事务处理没有记忆能力\n   - HTTP1.1：一个TCP连接上可以传送多个HTTP请求，多个请求和响应可以重叠进行，增加更多的响应头和请求头，Connection报头来控制\n\n3. 通信流程：\n   - 客户端与服务器建立连接（三次握手）\n   - 客户端向服务端发送请求\n   - 服务器接收请求，并根据请求返回响应为文件作为应答\n   - 客户端与服务器关闭连接（四次挥手）\n\n4. 请求报文组成：\n\n   - 请求行：请求方法/地址 URI协议/版本\n   - 请求头：request header\n   - 空行\n   - 请求正文\n\n5. 响应报文组成：\n\n   - 状态行\n   - 响应头 response header\n   - 空行\n   - 响应正文\n\n   \n\n## Servlet\n\n1. 核心接口和类\n\n   除了实现Servlet接口，还可以通过继承GenericServlet或HttpServlet类实现\n\n2. Servlet接口\n\n   ```java\n   public void init(ServletConfig servletConfig);\n   public void service(ServletRequest request, ServletResponse response);\n   public void destroy();\n   public String getServletInfo();\n   public ServletConfig getServletConfig();\n   ```\n\n3. GenericServlet抽象类\n\n   提供了init()和destroy()的简单实现，只需继承后重写service()方法\n\n4. HttpServlet类（推荐）\n\n   与协议有关的实现，继承了GenericServlet。HTTPServlet子类通过service()方法判断请求类型查找子类重写的方法。HTTPServlet子类至少重写一个方法：doGet、doPost、doPut、doDelete\n\n\n\n## 注解（Servlet 3.0后支持）\n\n@WebServlet(name,value,urlPatterns,loadOnStartup)\n\n- name：同<servlet-name>\n- value：同<url-pattern>，可配置多个\n- urlPatterns：同value，不能同时使用\n- loadOnStartup：同<load-on-startup>\n\n\n\n## Servlet注解\n\n1. request对象\n\n   - get明文传递，效率高，数据量小，不安全；post密文传递，数据量大，安全，效率低\n\n   - 主要方法\n     - String getParameter(String name) ：根据表单组件名称获取提交数据\n     - void setCharacterEncoding(String charset)：指定每个请求的编码\n     - getRequestDispatcher(\"/otherServlet\")：转发跳转\n     - setAttribute(key,value)：存数据\n     - getAttribute(key)：取数据\n\n2. response对象\n\n   - 主要方法\n\n     - setHeader(String name,String value)：设置响应头\n     - setContentType(String type)：设置响应类型和响应式的编码格式\n     - setCharacterEncoding(String charset)：设置服务端响应内容的编码格式\n     - PrintWriter getWriter()：获取字符输出流\n     - sendRedirect(String targetURI)：页面重定向跳转\n\n   - 中文乱码\n\n     ```java\n     res.setCharacterEncoding(\"UTF-8\");\n     res.setHeader(\"Content-Type\":\"text/html;charset=UTF-8\");\n     res.setContentType(\"text/html;charset=UTF-8\");//推荐\n     ```\n\n\n\n## 转发\n\n- 服务器行为，浏览器只做了一次请求，浏览器地址不变\n- 转发之间传输的信息不会丢失\n- 只能转发给统一个web应用下的组件\n\n\n\n## 重定向\n\n- 客户端行为，浏览器做了两次请求，浏览器地址栏改变\n- response没有作用域，两次请求的数据无法共享，信息会丢失\n- ?key=value传递明文数据，getParameter(key)取数据\n- 可以重定向到任何资源路径\n\n\n\n## 生命周期\n\n1. 实例化\n\n   - 用户第一次访问servlet时由容器调用Servlet构造器创建具体的对象，也可以在启动时就创建\n   - 只执行一次\n\n2. 初始化\n\n   - 初始化阶段，init()方法会被调用\n\n   - 只被执行一次\n\n3. 服务\n\n   - 客户端发送请求时容器将请求和响应对象转发给servlet，传递给service方法\n   - 根据请求次数执行多次\n\n4. 销毁\n\n   - Servlet容器停止或重启，销毁Servlet对象，并调用destroy()方法\n   - 执行一次\n\n\n\n## Servlet特性\n\n1. 线程安全问题\n\n   Tomcat容器可以同时多个线程并发访问同一个Servlet，如果在方法中对成员变量做修改，就会有线程安全的问题\n\n2. 保证线程安全\n\n   - synchronized：将存在线程安全的问题存放在同步代码块中。效率低不推荐\n   - 实现SingleThreadModel接口，每个线程创建servlet实例，但是效率低已淘汰\n   - 尽可能使用局部变量\n\n\n\n## Cookie\n\n客户端状态管理，将状态保存在客户端\n\n1. 描述：web服务器在HTTP响应头中附带给浏览器的一小段数据。浏览器在访问该web服务器时，都应在HTTP请求投中将这个Cookie回传给Web服务器\n\n2. 创建：\n\n   ```java\n   // 创建cookie对象\n   Cookie cookie = new Cookie(\"name\", \"value\");\n   // 设置路径：访问权限\n   cookie.setPath(\"/webs\");\n   // 生命周期 >0：有效期，单位秒；0：浏览器关闭；-1：内存存储\n   cookie.setMaxAge(-1);\n   // 响应\n   resp.addCookie(cookie);\n   ```\n\n3. 获取Cookie\n\n   ```java\n   Cookie[] cookies = request.getCookies();\n   for(Cookie cookie:cookies){\n   \tSystem.out.println(cookie.getName()+cookie.getValue());\n   }\n   ```\n\n4. 编码解码\n\n   ```java\n   // 编码\n   URLEncoder.encode(\"中文\",\"UTF-8\");\n   // 解码\n   URLDecoder.decode(cookie.getName(),\"UTF-8\");\n   ```\n\n5. 优缺点：\n\n   - 优点\n     1. 可配置到期规则\n     2. 简单，键值对\n     3. 数据持久性，过期之前一直保存在浏览器上\n\n   - 缺点\n     1. 大小受限制\n     2. 用户可设置浏览器禁用Cookie\n     3. 安全风险：有可能被篡改\n\n\n\n## Session\n\n1. 描述：用于记录用户的状态。一段时间内，单个客户端与Web服务器的一连串相关的交互过程\n\n2. 原理：\n   - 服务器为每一次会话分配一个Session对象\n   - 同一个浏览器（未关闭）发起的多次请求，同属于一次会话\n   - 首次使用到Session时，服务器会自动创建Session，并创建Cookie存储SessionId发送回客户端\n\n3. Session操作\n\n   1. 创建session\n\n       ```java\n       HttpSession session = request.getSession();\n       System.out.println(\"ID\"+session.getId())\n       ```\n\n   2. 设置时效\n\n       ```java\n       session.setmaxInactiveInterval(seconds)\n       ```\n\n   3. 保存数据\n\n       ```java\n       session.setAttribute(\"key\",value);\n       ```\n\n   4. 获取数据\n\n        ```java\n        session.getAttribute(\"key\");\n        ```\n\n   5. 移除数据\n\n      ```java\n      session.removeAttribute(\"key\");\n      ```\n\n   6. 退出登录、注销\n\n      ```java\n      session.invalidate()\n      ```\n\n4. 生命周期\n   - 开始：第一次使用到Session的请求产生，创建session\n   - 结束：浏览器关闭/session超时/手动注销\n\n5. 浏览器禁用cookie解决方案-URL重写\n\n   ```java\n   String newURL= response.encodeRedirectURL(\"/要跳转的路径\")\n   response.sendRedirect(newURL)\n   ```\n\n\n\n## ServletContext对象\n\n1. 描述：全局对象，对应一个Tomcat中的web应用。Web服务器启动时，会为每一个web应用创建一块共享的存储区域。服务器关闭时销毁。\n\n2. 获取：\n\n   ```java\n   getServletContext();// this/request/session获取的ServletContext是同一个\n   ```\n\n3. 作用：\n\n   1. 获取项目真实路径\n\n      ```java\n      servletContext.getRealPath(\"/\");\n      ```\n\n   2. 获取项目上下文路径（应用程序名称）\n\n      ```java\n      servletContext.getContextPath();\n      request.getContextPath();\n      ```\n\n   3. 全局作用域的容器\n\n      - 存储数据\n\n        ```java\n        servletContext.setAttribute(\"key\",value);\n        ```\n\n      - 获取数据\n\n        ```java\n        servletContext.getAttribute(\"key\");\n        ```\n\n      - 移除数据\n\n        ```java\n        servletContext.removeAttribute(\"key\");\n        ```\n\n   4. 特点：\n\n      - 一个应用对应一个Servlet上下文\n      - 生命周期：只要容器不关闭、应用不卸载，servletContext就一直存在\n\n\n\n## 过滤器\n\n1. 描述：处于客户端与服务器目标资源之间的一道过滤技术。\n\n2. 作用：先于Servlet处理客户端请求；响应时根据执行流程再次反向执行Filter。解决多个Servlet共同代码冗余代码。\n\n3. 实现：\n\n   - 编写Java类实现Filter接口\n   - 在doFilter方法里设计拦截逻辑\n   - 设置拦截路径\n\n   ```java\n   @WebFilter(\"/filter\")\n   public class MyFilter implements Filter {\n       @Override\n       public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n           System.out.println(\"Request Filter\");\n           filterChain.doFilter(servletRequest,servletResponse);\n           System.out.println(\"Response Filter\");\n       }\n   }\n   ```\n\n4. web.xml配置\n\n   ```xml\n   <filter>\n       <filter-name>xml</filter-name>\n       <filter-class>com.learn.myservlet.learnservlet.MyServlet</filter-class>\n   </filter>\n   <filter-mapping>\n       <filter-name>xml</filter-name>\n       <url-pattern>/目标资源路径</url-pattern>\n   </filter-mapping>\n   ```\n\n5. 过滤器链\n\n   1. 描述：一个web应用中可以编写多个Filter，一组Filter组合称为Filter链\n   2. 优先级：\n      - 如果为注解，按照泪泉名称的字符串顺序决定执行顺序\n      - 如果为web.xml，按照filter-mapping注册顺序，从上到下\n      - web.xml配置优先注解\n      - 如果注解和web.xml同时配置，会创建多个过滤器对象，造成多次过滤\n\n6. 拦截路径\n\n   - 精确拦截，/test\n   - 后缀拦截，*.jsp\n   - 通配符拦截，/*","slug":"JAVA-Servlet","published":1,"updated":"2022-08-25T12:11:05.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9n000394wa94457ist","content":"<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><h2 id=\"C-S、B-S架构\"><a href=\"#C-S、B-S架构\" class=\"headerlink\" title=\"C/S、B/S架构\"></a>C/S、B/S架构</h2><ol>\n<li>Client/Server架构<ul>\n<li>在客户端安装特定软件</li>\n<li>图形显示效果好</li>\n<li>服务器功能升级，需要客户端也同步升级，不利于维护</li>\n</ul>\n</li>\n<li>Browser/Server架构<ul>\n<li>无需安装客户端，浏览器可访问</li>\n<li>功能升级，只需升级服务器端</li>\n<li>图形显示效果一般</li>\n<li>需要通过http协议访问</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"常见服务器\"><a href=\"#常见服务器\" class=\"headerlink\" title=\"常见服务器\"></a>常见服务器</h2><ol>\n<li>Tomcat 免费开源、支持servlet和JSP规范</li>\n<li>jetty 运行效率比Tomcat高</li>\n<li>TODO 后续补充…</li>\n</ol>\n<h2 id=\"Tomcat目录结构\"><a href=\"#Tomcat目录结构\" class=\"headerlink\" title=\"Tomcat目录结构\"></a>Tomcat目录结构</h2><ul>\n<li>bin 存放二进制可执行文件</li>\n<li>conf 存放配置信息</li>\n<li>lib 类库，jar包</li>\n<li>logs 日志文件</li>\n<li>temp 运行时产生的临时数据</li>\n<li>webapps 存放web项目</li>\n<li>work 运行时生成的文件</li>\n</ul>\n<h2 id=\"Servlet运行测试\"><a href=\"#Servlet运行测试\" class=\"headerlink\" title=\"Servlet运行测试\"></a>Servlet运行测试</h2><ol>\n<li><p>概念：</p>\n<p>Server Applet的简称，是服务端的程序，可交互式的处理客户端发送到服务端的请求，并完成操作响应。</p>\n</li>\n<li><p>作用：</p>\n<ul>\n<li>接收客户端请求，完成操作</li>\n<li>动态生成网页</li>\n<li>将包含操作结果的动态网页响应给客户端</li>\n</ul>\n</li>\n<li><p>开发环境：</p>\n<p>lib/servlet-api.jar配置到classpath中</p>\n</li>\n<li><p>实现Servlet的五个方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Tomcat10的servlet-api.jar下包名改成了jakarta</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyServlet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Servlet</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletConfig</span> servletConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServletInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletConfig</span> <span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置web.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span> \n<span class=\"token comment\">&lt;!--配置Servlet --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>myServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>MyServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--配置Servlet 正整数或0则在servlet加载时执行，值越小优先级越高。未配置或负数则在servlet被请求时再加载--></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-standup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-standup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- 对servlet做映射 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 与servelet的name一致--></span>\n  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>myServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/myservlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>重启Tomcat，访问localhost:8080/myWeb/myservlet</p>\n</li>\n</ol>\n<h2 id=\"IDEA部署Tomcat\"><a href=\"#IDEA部署Tomcat\" class=\"headerlink\" title=\"IDEA部署Tomcat\"></a>IDEA部署Tomcat</h2><img src=\"/2019/09/30/java-servlet/image-1.png\" class=\"\">\n\n<img src=\"/2019/09/30/java-servlet/image-2.png\" class=\"\">\n\n<img src=\"/2019/09/30/java-servlet/image-3.png\" class=\"\">\n\n\n\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><ol>\n<li><p>描述：超文本传输协议，给予请求和响应模式的、无状态的、应用层的协议，运行于TCP协议基础之上。</p>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>支持客户端/服务器模式</li>\n<li>简单快速：客户端指向服务器发送请求方法和路径，服务器即可响应数据，通信速度很快</li>\n<li>灵活：http允许传输任意类型的数据，传输的数据类型由Content-type标识</li>\n<li>无连接：每次TCP连接只处理一个或多个请求，服务器处理完请求即断开连接，节省时间。（HTTP1.1会等几秒断开，如果有新连接则暂时不断）</li>\n<li>无状态：HTTP协议是无状态协议，对事务处理没有记忆能力</li>\n<li>HTTP1.1：一个TCP连接上可以传送多个HTTP请求，多个请求和响应可以重叠进行，增加更多的响应头和请求头，Connection报头来控制</li>\n</ul>\n</li>\n<li><p>通信流程：</p>\n<ul>\n<li>客户端与服务器建立连接（三次握手）</li>\n<li>客户端向服务端发送请求</li>\n<li>服务器接收请求，并根据请求返回响应为文件作为应答</li>\n<li>客户端与服务器关闭连接（四次挥手）</li>\n</ul>\n</li>\n<li><p>请求报文组成：</p>\n<ul>\n<li>请求行：请求方法/地址 URI协议/版本</li>\n<li>请求头：request header</li>\n<li>空行</li>\n<li>请求正文</li>\n</ul>\n</li>\n<li><p>响应报文组成：</p>\n<ul>\n<li>状态行</li>\n<li>响应头 response header</li>\n<li>空行</li>\n<li>响应正文</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Servlet-1\"><a href=\"#Servlet-1\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><ol>\n<li><p>核心接口和类</p>\n<p>除了实现Servlet接口，还可以通过继承GenericServlet或HttpServlet类实现</p>\n</li>\n<li><p>Servlet接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletConfig</span> servletConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServletInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletConfig</span> <span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>GenericServlet抽象类</p>\n<p>提供了init()和destroy()的简单实现，只需继承后重写service()方法</p>\n</li>\n<li><p>HttpServlet类（推荐）</p>\n<p>与协议有关的实现，继承了GenericServlet。HTTPServlet子类通过service()方法判断请求类型查找子类重写的方法。HTTPServlet子类至少重写一个方法：doGet、doPost、doPut、doDelete</p>\n</li>\n</ol>\n<h2 id=\"注解（Servlet-3-0后支持）\"><a href=\"#注解（Servlet-3-0后支持）\" class=\"headerlink\" title=\"注解（Servlet 3.0后支持）\"></a>注解（Servlet 3.0后支持）</h2><p>@WebServlet(name,value,urlPatterns,loadOnStartup)</p>\n<ul>\n<li>name：同<servlet-name></li>\n<li>value：同<url-pattern>，可配置多个</li>\n<li>urlPatterns：同value，不能同时使用</li>\n<li>loadOnStartup：同<load-on-startup></li>\n</ul>\n<h2 id=\"Servlet注解\"><a href=\"#Servlet注解\" class=\"headerlink\" title=\"Servlet注解\"></a>Servlet注解</h2><ol>\n<li><p>request对象</p>\n<ul>\n<li><p>get明文传递，效率高，数据量小，不安全；post密文传递，数据量大，安全，效率低</p>\n</li>\n<li><p>主要方法</p>\n<ul>\n<li>String getParameter(String name) ：根据表单组件名称获取提交数据</li>\n<li>void setCharacterEncoding(String charset)：指定每个请求的编码</li>\n<li>getRequestDispatcher(“/otherServlet”)：转发跳转</li>\n<li>setAttribute(key,value)：存数据</li>\n<li>getAttribute(key)：取数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>response对象</p>\n<ul>\n<li><p>主要方法</p>\n<ul>\n<li>setHeader(String name,String value)：设置响应头</li>\n<li>setContentType(String type)：设置响应类型和响应式的编码格式</li>\n<li>setCharacterEncoding(String charset)：设置服务端响应内容的编码格式</li>\n<li>PrintWriter getWriter()：获取字符输出流</li>\n<li>sendRedirect(String targetURI)：页面重定向跳转</li>\n</ul>\n</li>\n<li><p>中文乱码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//推荐</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h2><ul>\n<li>服务器行为，浏览器只做了一次请求，浏览器地址不变</li>\n<li>转发之间传输的信息不会丢失</li>\n<li>只能转发给统一个web应用下的组件</li>\n</ul>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><ul>\n<li>客户端行为，浏览器做了两次请求，浏览器地址栏改变</li>\n<li>response没有作用域，两次请求的数据无法共享，信息会丢失</li>\n<li>?key=value传递明文数据，getParameter(key)取数据</li>\n<li>可以重定向到任何资源路径</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ol>\n<li><p>实例化</p>\n<ul>\n<li>用户第一次访问servlet时由容器调用Servlet构造器创建具体的对象，也可以在启动时就创建</li>\n<li>只执行一次</li>\n</ul>\n</li>\n<li><p>初始化</p>\n<ul>\n<li><p>初始化阶段，init()方法会被调用</p>\n</li>\n<li><p>只被执行一次</p>\n</li>\n</ul>\n</li>\n<li><p>服务</p>\n<ul>\n<li>客户端发送请求时容器将请求和响应对象转发给servlet，传递给service方法</li>\n<li>根据请求次数执行多次</li>\n</ul>\n</li>\n<li><p>销毁</p>\n<ul>\n<li>Servlet容器停止或重启，销毁Servlet对象，并调用destroy()方法</li>\n<li>执行一次</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Servlet特性\"><a href=\"#Servlet特性\" class=\"headerlink\" title=\"Servlet特性\"></a>Servlet特性</h2><ol>\n<li><p>线程安全问题</p>\n<p>Tomcat容器可以同时多个线程并发访问同一个Servlet，如果在方法中对成员变量做修改，就会有线程安全的问题</p>\n</li>\n<li><p>保证线程安全</p>\n<ul>\n<li>synchronized：将存在线程安全的问题存放在同步代码块中。效率低不推荐</li>\n<li>实现SingleThreadModel接口，每个线程创建servlet实例，但是效率低已淘汰</li>\n<li>尽可能使用局部变量</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>客户端状态管理，将状态保存在客户端</p>\n<ol>\n<li><p>描述：web服务器在HTTP响应头中附带给浏览器的一小段数据。浏览器在访问该web服务器时，都应在HTTP请求投中将这个Cookie回传给Web服务器</p>\n</li>\n<li><p>创建：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建cookie对象</span>\n<span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置路径：访问权限</span>\ncookie<span class=\"token punctuation\">.</span><span class=\"token function\">setPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/webs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 生命周期 >0：有效期，单位秒；0：浏览器关闭；-1：内存存储</span>\ncookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 响应</span>\nresp<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取Cookie</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie<span class=\"token operator\">:</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>编码解码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 编码</span>\n<span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 解码</span>\n<span class=\"token class-name\">URLDecoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>优缺点：</p>\n<ul>\n<li><p>优点</p>\n<ol>\n<li>可配置到期规则</li>\n<li>简单，键值对</li>\n<li>数据持久性，过期之前一直保存在浏览器上</li>\n</ol>\n</li>\n<li><p>缺点</p>\n<ol>\n<li>大小受限制</li>\n<li>用户可设置浏览器禁用Cookie</li>\n<li>安全风险：有可能被篡改</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><ol>\n<li><p>描述：用于记录用户的状态。一段时间内，单个客户端与Web服务器的一连串相关的交互过程</p>\n</li>\n<li><p>原理：</p>\n<ul>\n<li>服务器为每一次会话分配一个Session对象</li>\n<li>同一个浏览器（未关闭）发起的多次请求，同属于一次会话</li>\n<li>首次使用到Session时，服务器会自动创建Session，并创建Cookie存储SessionId发送回客户端</li>\n</ul>\n</li>\n<li><p>Session操作</p>\n<ol>\n<li><p>创建session</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID\"</span><span class=\"token operator\">+</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>设置时效</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">setmaxInactiveInterval</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>保存数据</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>获取数据</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>移除数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>退出登录、注销</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n</li>\n<li><p>生命周期</p>\n<ul>\n<li>开始：第一次使用到Session的请求产生，创建session</li>\n<li>结束：浏览器关闭/session超时/手动注销</li>\n</ul>\n</li>\n<li><p>浏览器禁用cookie解决方案-URL重写</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> newURL<span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">encodeRedirectURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/要跳转的路径\"</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span>newURL<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"ServletContext对象\"><a href=\"#ServletContext对象\" class=\"headerlink\" title=\"ServletContext对象\"></a>ServletContext对象</h2><ol>\n<li><p>描述：全局对象，对应一个Tomcat中的web应用。Web服务器启动时，会为每一个web应用创建一块共享的存储区域。服务器关闭时销毁。</p>\n</li>\n<li><p>获取：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// this/request/session获取的ServletContext是同一个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>作用：</p>\n<ol>\n<li><p>获取项目真实路径</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>获取项目上下文路径（应用程序名称）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>全局作用域的容器</p>\n<ul>\n<li><p>存储数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>获取数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>移除数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>一个应用对应一个Servlet上下文</li>\n<li>生命周期：只要容器不关闭、应用不卸载，servletContext就一直存在</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><ol>\n<li><p>描述：处于客户端与服务器目标资源之间的一道过滤技术。</p>\n</li>\n<li><p>作用：先于Servlet处理客户端请求；响应时根据执行流程再次反向执行Filter。解决多个Servlet共同代码冗余代码。</p>\n</li>\n<li><p>实现：</p>\n<ul>\n<li>编写Java类实现Filter接口</li>\n<li>在doFilter方法里设计拦截逻辑</li>\n<li>设置拦截路径</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/filter\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request Filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response Filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>web.xml配置</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>com.learn.myservlet.learnservlet.MyServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/目标资源路径<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>过滤器链</p>\n<ol>\n<li>描述：一个web应用中可以编写多个Filter，一组Filter组合称为Filter链</li>\n<li>优先级：<ul>\n<li>如果为注解，按照泪泉名称的字符串顺序决定执行顺序</li>\n<li>如果为web.xml，按照filter-mapping注册顺序，从上到下</li>\n<li>web.xml配置优先注解</li>\n<li>如果注解和web.xml同时配置，会创建多个过滤器对象，造成多次过滤</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>拦截路径</p>\n<ul>\n<li>精确拦截，/test</li>\n<li>后缀拦截，*.jsp</li>\n<li>通配符拦截，/*</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><h2 id=\"C-S、B-S架构\"><a href=\"#C-S、B-S架构\" class=\"headerlink\" title=\"C/S、B/S架构\"></a>C/S、B/S架构</h2><ol>\n<li>Client/Server架构<ul>\n<li>在客户端安装特定软件</li>\n<li>图形显示效果好</li>\n<li>服务器功能升级，需要客户端也同步升级，不利于维护</li>\n</ul>\n</li>\n<li>Browser/Server架构<ul>\n<li>无需安装客户端，浏览器可访问</li>\n<li>功能升级，只需升级服务器端</li>\n<li>图形显示效果一般</li>\n<li>需要通过http协议访问</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"常见服务器\"><a href=\"#常见服务器\" class=\"headerlink\" title=\"常见服务器\"></a>常见服务器</h2><ol>\n<li>Tomcat 免费开源、支持servlet和JSP规范</li>\n<li>jetty 运行效率比Tomcat高</li>\n<li>TODO 后续补充…</li>\n</ol>\n<h2 id=\"Tomcat目录结构\"><a href=\"#Tomcat目录结构\" class=\"headerlink\" title=\"Tomcat目录结构\"></a>Tomcat目录结构</h2><ul>\n<li>bin 存放二进制可执行文件</li>\n<li>conf 存放配置信息</li>\n<li>lib 类库，jar包</li>\n<li>logs 日志文件</li>\n<li>temp 运行时产生的临时数据</li>\n<li>webapps 存放web项目</li>\n<li>work 运行时生成的文件</li>\n</ul>\n<h2 id=\"Servlet运行测试\"><a href=\"#Servlet运行测试\" class=\"headerlink\" title=\"Servlet运行测试\"></a>Servlet运行测试</h2><ol>\n<li><p>概念：</p>\n<p>Server Applet的简称，是服务端的程序，可交互式的处理客户端发送到服务端的请求，并完成操作响应。</p>\n</li>\n<li><p>作用：</p>\n<ul>\n<li>接收客户端请求，完成操作</li>\n<li>动态生成网页</li>\n<li>将包含操作结果的动态网页响应给客户端</li>\n</ul>\n</li>\n<li><p>开发环境：</p>\n<p>lib/servlet-api.jar配置到classpath中</p>\n</li>\n<li><p>实现Servlet的五个方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Tomcat10的servlet-api.jar下包名改成了jakarta</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyServlet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Servlet</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletConfig</span> servletConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServletInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletConfig</span> <span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置web.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span> \n<span class=\"token comment\">&lt;!--配置Servlet --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>myServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>MyServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--配置Servlet 正整数或0则在servlet加载时执行，值越小优先级越高。未配置或负数则在servlet被请求时再加载--></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-standup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-standup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- 对servlet做映射 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 与servelet的name一致--></span>\n  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>myServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/myservlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>重启Tomcat，访问localhost:8080/myWeb/myservlet</p>\n</li>\n</ol>\n<h2 id=\"IDEA部署Tomcat\"><a href=\"#IDEA部署Tomcat\" class=\"headerlink\" title=\"IDEA部署Tomcat\"></a>IDEA部署Tomcat</h2><img src=\"/2019/09/30/java-servlet/image-1.png\" class=\"\">\n\n<img src=\"/2019/09/30/java-servlet/image-2.png\" class=\"\">\n\n<img src=\"/2019/09/30/java-servlet/image-3.png\" class=\"\">\n\n\n\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><ol>\n<li><p>描述：超文本传输协议，给予请求和响应模式的、无状态的、应用层的协议，运行于TCP协议基础之上。</p>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>支持客户端/服务器模式</li>\n<li>简单快速：客户端指向服务器发送请求方法和路径，服务器即可响应数据，通信速度很快</li>\n<li>灵活：http允许传输任意类型的数据，传输的数据类型由Content-type标识</li>\n<li>无连接：每次TCP连接只处理一个或多个请求，服务器处理完请求即断开连接，节省时间。（HTTP1.1会等几秒断开，如果有新连接则暂时不断）</li>\n<li>无状态：HTTP协议是无状态协议，对事务处理没有记忆能力</li>\n<li>HTTP1.1：一个TCP连接上可以传送多个HTTP请求，多个请求和响应可以重叠进行，增加更多的响应头和请求头，Connection报头来控制</li>\n</ul>\n</li>\n<li><p>通信流程：</p>\n<ul>\n<li>客户端与服务器建立连接（三次握手）</li>\n<li>客户端向服务端发送请求</li>\n<li>服务器接收请求，并根据请求返回响应为文件作为应答</li>\n<li>客户端与服务器关闭连接（四次挥手）</li>\n</ul>\n</li>\n<li><p>请求报文组成：</p>\n<ul>\n<li>请求行：请求方法/地址 URI协议/版本</li>\n<li>请求头：request header</li>\n<li>空行</li>\n<li>请求正文</li>\n</ul>\n</li>\n<li><p>响应报文组成：</p>\n<ul>\n<li>状态行</li>\n<li>响应头 response header</li>\n<li>空行</li>\n<li>响应正文</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Servlet-1\"><a href=\"#Servlet-1\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><ol>\n<li><p>核心接口和类</p>\n<p>除了实现Servlet接口，还可以通过继承GenericServlet或HttpServlet类实现</p>\n</li>\n<li><p>Servlet接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletConfig</span> servletConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServletInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ServletConfig</span> <span class=\"token function\">getServletConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>GenericServlet抽象类</p>\n<p>提供了init()和destroy()的简单实现，只需继承后重写service()方法</p>\n</li>\n<li><p>HttpServlet类（推荐）</p>\n<p>与协议有关的实现，继承了GenericServlet。HTTPServlet子类通过service()方法判断请求类型查找子类重写的方法。HTTPServlet子类至少重写一个方法：doGet、doPost、doPut、doDelete</p>\n</li>\n</ol>\n<h2 id=\"注解（Servlet-3-0后支持）\"><a href=\"#注解（Servlet-3-0后支持）\" class=\"headerlink\" title=\"注解（Servlet 3.0后支持）\"></a>注解（Servlet 3.0后支持）</h2><p>@WebServlet(name,value,urlPatterns,loadOnStartup)</p>\n<ul>\n<li>name：同<servlet-name></li>\n<li>value：同<url-pattern>，可配置多个</li>\n<li>urlPatterns：同value，不能同时使用</li>\n<li>loadOnStartup：同<load-on-startup></li>\n</ul>\n<h2 id=\"Servlet注解\"><a href=\"#Servlet注解\" class=\"headerlink\" title=\"Servlet注解\"></a>Servlet注解</h2><ol>\n<li><p>request对象</p>\n<ul>\n<li><p>get明文传递，效率高，数据量小，不安全；post密文传递，数据量大，安全，效率低</p>\n</li>\n<li><p>主要方法</p>\n<ul>\n<li>String getParameter(String name) ：根据表单组件名称获取提交数据</li>\n<li>void setCharacterEncoding(String charset)：指定每个请求的编码</li>\n<li>getRequestDispatcher(“/otherServlet”)：转发跳转</li>\n<li>setAttribute(key,value)：存数据</li>\n<li>getAttribute(key)：取数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>response对象</p>\n<ul>\n<li><p>主要方法</p>\n<ul>\n<li>setHeader(String name,String value)：设置响应头</li>\n<li>setContentType(String type)：设置响应类型和响应式的编码格式</li>\n<li>setCharacterEncoding(String charset)：设置服务端响应内容的编码格式</li>\n<li>PrintWriter getWriter()：获取字符输出流</li>\n<li>sendRedirect(String targetURI)：页面重定向跳转</li>\n</ul>\n</li>\n<li><p>中文乱码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">res<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//推荐</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"转发\"><a href=\"#转发\" class=\"headerlink\" title=\"转发\"></a>转发</h2><ul>\n<li>服务器行为，浏览器只做了一次请求，浏览器地址不变</li>\n<li>转发之间传输的信息不会丢失</li>\n<li>只能转发给统一个web应用下的组件</li>\n</ul>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><ul>\n<li>客户端行为，浏览器做了两次请求，浏览器地址栏改变</li>\n<li>response没有作用域，两次请求的数据无法共享，信息会丢失</li>\n<li>?key=value传递明文数据，getParameter(key)取数据</li>\n<li>可以重定向到任何资源路径</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ol>\n<li><p>实例化</p>\n<ul>\n<li>用户第一次访问servlet时由容器调用Servlet构造器创建具体的对象，也可以在启动时就创建</li>\n<li>只执行一次</li>\n</ul>\n</li>\n<li><p>初始化</p>\n<ul>\n<li><p>初始化阶段，init()方法会被调用</p>\n</li>\n<li><p>只被执行一次</p>\n</li>\n</ul>\n</li>\n<li><p>服务</p>\n<ul>\n<li>客户端发送请求时容器将请求和响应对象转发给servlet，传递给service方法</li>\n<li>根据请求次数执行多次</li>\n</ul>\n</li>\n<li><p>销毁</p>\n<ul>\n<li>Servlet容器停止或重启，销毁Servlet对象，并调用destroy()方法</li>\n<li>执行一次</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Servlet特性\"><a href=\"#Servlet特性\" class=\"headerlink\" title=\"Servlet特性\"></a>Servlet特性</h2><ol>\n<li><p>线程安全问题</p>\n<p>Tomcat容器可以同时多个线程并发访问同一个Servlet，如果在方法中对成员变量做修改，就会有线程安全的问题</p>\n</li>\n<li><p>保证线程安全</p>\n<ul>\n<li>synchronized：将存在线程安全的问题存放在同步代码块中。效率低不推荐</li>\n<li>实现SingleThreadModel接口，每个线程创建servlet实例，但是效率低已淘汰</li>\n<li>尽可能使用局部变量</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>客户端状态管理，将状态保存在客户端</p>\n<ol>\n<li><p>描述：web服务器在HTTP响应头中附带给浏览器的一小段数据。浏览器在访问该web服务器时，都应在HTTP请求投中将这个Cookie回传给Web服务器</p>\n</li>\n<li><p>创建：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 创建cookie对象</span>\n<span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置路径：访问权限</span>\ncookie<span class=\"token punctuation\">.</span><span class=\"token function\">setPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/webs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 生命周期 >0：有效期，单位秒；0：浏览器关闭；-1：内存存储</span>\ncookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 响应</span>\nresp<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取Cookie</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie<span class=\"token operator\">:</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>编码解码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 编码</span>\n<span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 解码</span>\n<span class=\"token class-name\">URLDecoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>优缺点：</p>\n<ul>\n<li><p>优点</p>\n<ol>\n<li>可配置到期规则</li>\n<li>简单，键值对</li>\n<li>数据持久性，过期之前一直保存在浏览器上</li>\n</ol>\n</li>\n<li><p>缺点</p>\n<ol>\n<li>大小受限制</li>\n<li>用户可设置浏览器禁用Cookie</li>\n<li>安全风险：有可能被篡改</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><ol>\n<li><p>描述：用于记录用户的状态。一段时间内，单个客户端与Web服务器的一连串相关的交互过程</p>\n</li>\n<li><p>原理：</p>\n<ul>\n<li>服务器为每一次会话分配一个Session对象</li>\n<li>同一个浏览器（未关闭）发起的多次请求，同属于一次会话</li>\n<li>首次使用到Session时，服务器会自动创建Session，并创建Cookie存储SessionId发送回客户端</li>\n</ul>\n</li>\n<li><p>Session操作</p>\n<ol>\n<li><p>创建session</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ID\"</span><span class=\"token operator\">+</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>设置时效</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">setmaxInactiveInterval</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>保存数据</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>获取数据</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>移除数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>退出登录、注销</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">session<span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n</li>\n<li><p>生命周期</p>\n<ul>\n<li>开始：第一次使用到Session的请求产生，创建session</li>\n<li>结束：浏览器关闭/session超时/手动注销</li>\n</ul>\n</li>\n<li><p>浏览器禁用cookie解决方案-URL重写</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> newURL<span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">encodeRedirectURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/要跳转的路径\"</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span>newURL<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"ServletContext对象\"><a href=\"#ServletContext对象\" class=\"headerlink\" title=\"ServletContext对象\"></a>ServletContext对象</h2><ol>\n<li><p>描述：全局对象，对应一个Tomcat中的web应用。Web服务器启动时，会为每一个web应用创建一块共享的存储区域。服务器关闭时销毁。</p>\n</li>\n<li><p>获取：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// this/request/session获取的ServletContext是同一个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>作用：</p>\n<ol>\n<li><p>获取项目真实路径</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>获取项目上下文路径（应用程序名称）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>全局作用域的容器</p>\n<ul>\n<li><p>存储数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>获取数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>移除数据</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>一个应用对应一个Servlet上下文</li>\n<li>生命周期：只要容器不关闭、应用不卸载，servletContext就一直存在</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><ol>\n<li><p>描述：处于客户端与服务器目标资源之间的一道过滤技术。</p>\n</li>\n<li><p>作用：先于Servlet处理客户端请求；响应时根据执行流程再次反向执行Filter。解决多个Servlet共同代码冗余代码。</p>\n</li>\n<li><p>实现：</p>\n<ul>\n<li>编写Java类实现Filter接口</li>\n<li>在doFilter方法里设计拦截逻辑</li>\n<li>设置拦截路径</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/filter\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request Filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span>servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response Filter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>web.xml配置</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>com.learn.myservlet.learnservlet.MyServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/目标资源路径<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>过滤器链</p>\n<ol>\n<li>描述：一个web应用中可以编写多个Filter，一组Filter组合称为Filter链</li>\n<li>优先级：<ul>\n<li>如果为注解，按照泪泉名称的字符串顺序决定执行顺序</li>\n<li>如果为web.xml，按照filter-mapping注册顺序，从上到下</li>\n<li>web.xml配置优先注解</li>\n<li>如果注解和web.xml同时配置，会创建多个过滤器对象，造成多次过滤</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>拦截路径</p>\n<ul>\n<li>精确拦截，/test</li>\n<li>后缀拦截，*.jsp</li>\n<li>通配符拦截，/*</li>\n</ul>\n</li>\n</ol>\n"},{"title":"JAVA多线程","date":"2020-04-12T04:56:11.000Z","_content":"# JAVA 多线程\n\n## 并发并行\n\n- 并发：两个或多个事件在同一时间段发生（交替）\n\n- 并行：两个或多个事件在同一时刻发生（同时）\n\n\n\n## 进程与线程\n\n一个程序至少有一个进程，一个进程至少有一个线程。\n\n- 进程：一个内存中运行的应用程序。每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程。是系统运行程序的基本单位；系统运行一个程序是一个进程从创建、运行到消亡的过程。\n\n- 线程：是进程中的一个执行单元，负责当前进程中的程序的执行。一个进程中至少有一个线程，可以有多个线程。\n\n和多线程相比，多进程的缺点在于：\n\n1. 创建进程比创建线程开销大，尤其是在Windows系统上；\n2. 进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。\n\n多进程的优点在于：\n\n​\t多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。\n\n\n主线程：执行main方法的线程\n\n\n\n## 线程调度\n\n- 分时调度\n\n  所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间\n\n- 抢占式调度（JAVA）\n\n  优先让优先级高的线程使用CPU，优先级相同随机选择一个线程\n\n\n\n\n\n## 多线程\n\n多个现车个互不影响（在不同的栈空间）\n\n### 创建\n\n- 方式一\n\n    1. 创建一个Thread子类\n    2. 在Thread类的子类中重写Thread类中的run方法，设置线程任务\n    3. 创建Thread子类的对象\n    4. 执行Thread类中的start方法（主线程与新线程）\n\n    \n\n- 方式二\n    1. 创建一个实现Runnable接口的类\n    2. 实现run方法\n    3. 创建实现类的对象\n    4. 创建Thread类对象，构造方法中传递Runnable接口的实现类对象\n    5. 执行Thread类中的start方法（主线程与新线程）\n\n方式二避免了单继承的局限性，增强了程序的扩展性，降低了耦合性\n\n\n\n- 匿名内部类实现线程创建\n\n  ```java\n  // Thread子类实现\n  new Thread(){\n      @Override\n      public void run(){\n          System.out.println(Thread.currentThread().getName());\n      }\n  }.start();\n  \n  // Runnable接口实现\n  new Thread(new Runnable(){\n      @Override\n      public void run(){\n          System.out.println(Thread.currentThread().getName());\n      }\n  }).start();\n  ```\n\n  \n\n### 方法\n\n```java\n// 获取当前线程名称\nThread.currentThread().getName(); \n// 获取线程名称\nThread t1 = new Thread();\nt1.getName();\n// 设置线程名称\nt1.setName(\"线程1\");\n// 当前线程暂停执行指定的毫秒数\nThread.sleep(1000);\n```\n\n\n\n## 线程安全\n\n多个线程共享同一数据\n\n### 线程同步\n\n1. 同步代码块\n\n   线程执行到synchronized会检查是否有锁对象，如果有进入同步中执行，如果没有就阻塞等待。同步执行完归还同步锁\n\n   ```java\n   synchronized(同步锁对象){\n   \t// 需要同步的代码\n   }\n   ```\n\n2. 同步方法\n\n   - 方法上添加synchronized，同步锁对象是this\n   - 静态同步方法的锁对象是类.class\n\n3. 锁机制（Lock锁）更先进\n\n   在成员位置创建一个ReentrantLock（实现了Lock接口）对象，在出现安全问题的代码前调用lock获取锁，在出现安全问题的代码后调用unlock释放锁。\n\n   ```java\n   Lock l = new Lock();\n   l.lock();\n   // 线程安全问题代码\n   l.unlock(); // 一般放在try catch后的finally中\n   ```\n\n\n\n## 线程状态\n\n- New：新创建的线程，尚未执行\n- Runnable：运行中的线程，正在执行`run()`方法的Java代码\n- Blocked：运行中的线程，因为某些操作被阻塞而挂起；具有CPU的执行资格，等待CPU空闲\n- Waiting：运行中的线程，因为某些操作在等待中；通过`notify()`唤醒\n- Timed Waiting：运行中的线程，因为执行`sleep()`方法正在计时等待；放弃CPU的执行资格，CPU空闲也不执行；休眠结束唤醒\n- Terminated：线程已终止，因为`run()`方法执行完毕\n\n{% asset_image-1.png %}\n\n线程终止的原因有：\n\n- 线程正常终止：`run()`方法执行到`return`语句返回；\n- 线程意外终止：`run()`方法因为未捕获的异常导致线程终止；\n- 对某个线程的`Thread`实例调用`stop()`方法强制终止（强烈不推荐使用）。\n\n\n\n## 线程通信-等待唤醒机制\n\n等待唤醒机制使各线程有效利用资源，解决线程间处理同一个资源的问题\n\n1. wait\n\n   线程不再活动参与调度，进入wait set中，这是线程状态是WAITING。等待其他线程执行notify后从wait set中释放出来，重新进入调度队列中\n\n2. notify\n\n   选取所通知对象的wait set中的一个线程释放\n\n3. notifyAll\n\n   释放所通知对象的wait set中的所有线程\n\n- 在`synchronized`内部可以调用`wait()`使线程进入等待状态；\n- 必须在已获得的锁对象上调用`wait()`方法；\n- 在`synchronized`内部可以调用`notify()`或`notifyAll()`唤醒其他等待线程；\n- 必须在已获得的锁对象上调用`notify()`或`notifyAll()`方法；\n- 已唤醒的线程还需要重新获得锁后才能继续执行。\n\n\n\n## 线程池\n\n使线程可以复用，减少了反复创建和销毁线程的时间\n\n线程池是一个容器。当程序第一次启动时，创建多个线程保存在集合中。没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。\n\n- 降低资源消耗\n- 提高响应速度\n- 提高线程可管理性\n\njava.util.concurrent.Executors:线程池的工厂类\n\n-  创建线程池\n\n   ```java\n   ExecutorService es = Executors.newFixedThreadPool(2);\n   ```\n\n- submit执行线程任务\n\n   ```java\n   es.submit(new Runnable() {\n       @Override\n       public void run() {\n       \tSystem.out.println(Thread.currentThread().getName());\n       }\n   });\n   ```\n\n- 销毁线程池（不建议使用）\n\n   ```java\n   es.shutdown();\n   ```\n","source":"_posts/JAVA 多线程.md","raw":"---\ntitle: JAVA多线程\ndate: 2020-04-12 12:56:11\ntags: JAVA\ncategories: 编程\n---\n# JAVA 多线程\n\n## 并发并行\n\n- 并发：两个或多个事件在同一时间段发生（交替）\n\n- 并行：两个或多个事件在同一时刻发生（同时）\n\n\n\n## 进程与线程\n\n一个程序至少有一个进程，一个进程至少有一个线程。\n\n- 进程：一个内存中运行的应用程序。每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程。是系统运行程序的基本单位；系统运行一个程序是一个进程从创建、运行到消亡的过程。\n\n- 线程：是进程中的一个执行单元，负责当前进程中的程序的执行。一个进程中至少有一个线程，可以有多个线程。\n\n和多线程相比，多进程的缺点在于：\n\n1. 创建进程比创建线程开销大，尤其是在Windows系统上；\n2. 进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。\n\n多进程的优点在于：\n\n​\t多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。\n\n\n主线程：执行main方法的线程\n\n\n\n## 线程调度\n\n- 分时调度\n\n  所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间\n\n- 抢占式调度（JAVA）\n\n  优先让优先级高的线程使用CPU，优先级相同随机选择一个线程\n\n\n\n\n\n## 多线程\n\n多个现车个互不影响（在不同的栈空间）\n\n### 创建\n\n- 方式一\n\n    1. 创建一个Thread子类\n    2. 在Thread类的子类中重写Thread类中的run方法，设置线程任务\n    3. 创建Thread子类的对象\n    4. 执行Thread类中的start方法（主线程与新线程）\n\n    \n\n- 方式二\n    1. 创建一个实现Runnable接口的类\n    2. 实现run方法\n    3. 创建实现类的对象\n    4. 创建Thread类对象，构造方法中传递Runnable接口的实现类对象\n    5. 执行Thread类中的start方法（主线程与新线程）\n\n方式二避免了单继承的局限性，增强了程序的扩展性，降低了耦合性\n\n\n\n- 匿名内部类实现线程创建\n\n  ```java\n  // Thread子类实现\n  new Thread(){\n      @Override\n      public void run(){\n          System.out.println(Thread.currentThread().getName());\n      }\n  }.start();\n  \n  // Runnable接口实现\n  new Thread(new Runnable(){\n      @Override\n      public void run(){\n          System.out.println(Thread.currentThread().getName());\n      }\n  }).start();\n  ```\n\n  \n\n### 方法\n\n```java\n// 获取当前线程名称\nThread.currentThread().getName(); \n// 获取线程名称\nThread t1 = new Thread();\nt1.getName();\n// 设置线程名称\nt1.setName(\"线程1\");\n// 当前线程暂停执行指定的毫秒数\nThread.sleep(1000);\n```\n\n\n\n## 线程安全\n\n多个线程共享同一数据\n\n### 线程同步\n\n1. 同步代码块\n\n   线程执行到synchronized会检查是否有锁对象，如果有进入同步中执行，如果没有就阻塞等待。同步执行完归还同步锁\n\n   ```java\n   synchronized(同步锁对象){\n   \t// 需要同步的代码\n   }\n   ```\n\n2. 同步方法\n\n   - 方法上添加synchronized，同步锁对象是this\n   - 静态同步方法的锁对象是类.class\n\n3. 锁机制（Lock锁）更先进\n\n   在成员位置创建一个ReentrantLock（实现了Lock接口）对象，在出现安全问题的代码前调用lock获取锁，在出现安全问题的代码后调用unlock释放锁。\n\n   ```java\n   Lock l = new Lock();\n   l.lock();\n   // 线程安全问题代码\n   l.unlock(); // 一般放在try catch后的finally中\n   ```\n\n\n\n## 线程状态\n\n- New：新创建的线程，尚未执行\n- Runnable：运行中的线程，正在执行`run()`方法的Java代码\n- Blocked：运行中的线程，因为某些操作被阻塞而挂起；具有CPU的执行资格，等待CPU空闲\n- Waiting：运行中的线程，因为某些操作在等待中；通过`notify()`唤醒\n- Timed Waiting：运行中的线程，因为执行`sleep()`方法正在计时等待；放弃CPU的执行资格，CPU空闲也不执行；休眠结束唤醒\n- Terminated：线程已终止，因为`run()`方法执行完毕\n\n{% asset_image-1.png %}\n\n线程终止的原因有：\n\n- 线程正常终止：`run()`方法执行到`return`语句返回；\n- 线程意外终止：`run()`方法因为未捕获的异常导致线程终止；\n- 对某个线程的`Thread`实例调用`stop()`方法强制终止（强烈不推荐使用）。\n\n\n\n## 线程通信-等待唤醒机制\n\n等待唤醒机制使各线程有效利用资源，解决线程间处理同一个资源的问题\n\n1. wait\n\n   线程不再活动参与调度，进入wait set中，这是线程状态是WAITING。等待其他线程执行notify后从wait set中释放出来，重新进入调度队列中\n\n2. notify\n\n   选取所通知对象的wait set中的一个线程释放\n\n3. notifyAll\n\n   释放所通知对象的wait set中的所有线程\n\n- 在`synchronized`内部可以调用`wait()`使线程进入等待状态；\n- 必须在已获得的锁对象上调用`wait()`方法；\n- 在`synchronized`内部可以调用`notify()`或`notifyAll()`唤醒其他等待线程；\n- 必须在已获得的锁对象上调用`notify()`或`notifyAll()`方法；\n- 已唤醒的线程还需要重新获得锁后才能继续执行。\n\n\n\n## 线程池\n\n使线程可以复用，减少了反复创建和销毁线程的时间\n\n线程池是一个容器。当程序第一次启动时，创建多个线程保存在集合中。没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。\n\n- 降低资源消耗\n- 提高响应速度\n- 提高线程可管理性\n\njava.util.concurrent.Executors:线程池的工厂类\n\n-  创建线程池\n\n   ```java\n   ExecutorService es = Executors.newFixedThreadPool(2);\n   ```\n\n- submit执行线程任务\n\n   ```java\n   es.submit(new Runnable() {\n       @Override\n       public void run() {\n       \tSystem.out.println(Thread.currentThread().getName());\n       }\n   });\n   ```\n\n- 销毁线程池（不建议使用）\n\n   ```java\n   es.shutdown();\n   ```\n","slug":"JAVA 多线程","published":1,"updated":"2022-07-27T17:04:45.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9q000794wabju0cedp","content":"<h1 id=\"JAVA-多线程\"><a href=\"#JAVA-多线程\" class=\"headerlink\" title=\"JAVA 多线程\"></a>JAVA 多线程</h1><h2 id=\"并发并行\"><a href=\"#并发并行\" class=\"headerlink\" title=\"并发并行\"></a>并发并行</h2><ul>\n<li><p>并发：两个或多个事件在同一时间段发生（交替）</p>\n</li>\n<li><p>并行：两个或多个事件在同一时刻发生（同时）</p>\n</li>\n</ul>\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p>一个程序至少有一个进程，一个进程至少有一个线程。</p>\n<ul>\n<li><p>进程：一个内存中运行的应用程序。每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程。是系统运行程序的基本单位；系统运行一个程序是一个进程从创建、运行到消亡的过程。</p>\n</li>\n<li><p>线程：是进程中的一个执行单元，负责当前进程中的程序的执行。一个进程中至少有一个线程，可以有多个线程。</p>\n</li>\n</ul>\n<p>和多线程相比，多进程的缺点在于：</p>\n<ol>\n<li>创建进程比创建线程开销大，尤其是在Windows系统上；</li>\n<li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。</li>\n</ol>\n<p>多进程的优点在于：</p>\n<p>​    多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p>\n<p>主线程：执行main方法的线程</p>\n<h2 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h2><ul>\n<li><p>分时调度</p>\n<p>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间</p>\n</li>\n<li><p>抢占式调度（JAVA）</p>\n<p>优先让优先级高的线程使用CPU，优先级相同随机选择一个线程</p>\n</li>\n</ul>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>多个现车个互不影响（在不同的栈空间）</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><ul>\n<li><p>方式一</p>\n<ol>\n<li>创建一个Thread子类</li>\n<li>在Thread类的子类中重写Thread类中的run方法，设置线程任务</li>\n<li>创建Thread子类的对象</li>\n<li>执行Thread类中的start方法（主线程与新线程）</li>\n</ol>\n</li>\n<li><p>方式二</p>\n<ol>\n<li>创建一个实现Runnable接口的类</li>\n<li>实现run方法</li>\n<li>创建实现类的对象</li>\n<li>创建Thread类对象，构造方法中传递Runnable接口的实现类对象</li>\n<li>执行Thread类中的start方法（主线程与新线程）</li>\n</ol>\n</li>\n</ul>\n<p>方式二避免了单继承的局限性，增强了程序的扩展性，降低了耦合性</p>\n<ul>\n<li><p>匿名内部类实现线程创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Thread子类实现</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Runnable接口实现</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取当前线程名称</span>\n<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 获取线程名称</span>\n<span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置线程名称</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 当前线程暂停执行指定的毫秒数</span>\n<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p>多个线程共享同一数据</p>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><ol>\n<li><p>同步代码块</p>\n<p>线程执行到synchronized会检查是否有锁对象，如果有进入同步中执行，如果没有就阻塞等待。同步执行完归还同步锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>同步锁对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 需要同步的代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>同步方法</p>\n<ul>\n<li>方法上添加synchronized，同步锁对象是this</li>\n<li>静态同步方法的锁对象是类.class</li>\n</ul>\n</li>\n<li><p>锁机制（Lock锁）更先进</p>\n<p>在成员位置创建一个ReentrantLock（实现了Lock接口）对象，在出现安全问题的代码前调用lock获取锁，在出现安全问题的代码后调用unlock释放锁。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Lock</span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 线程安全问题代码</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一般放在try catch后的finally中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><ul>\n<li>New：新创建的线程，尚未执行</li>\n<li>Runnable：运行中的线程，正在执行<code>run()</code>方法的Java代码</li>\n<li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；具有CPU的执行资格，等待CPU空闲</li>\n<li>Waiting：运行中的线程，因为某些操作在等待中；通过<code>notify()</code>唤醒</li>\n<li>Timed Waiting：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；放弃CPU的执行资格，CPU空闲也不执行；休眠结束唤醒</li>\n<li>Terminated：线程已终止，因为<code>run()</code>方法执行完毕</li>\n</ul>\n\n\n<p>线程终止的原因有：</p>\n<ul>\n<li>线程正常终止：<code>run()</code>方法执行到<code>return</code>语句返回；</li>\n<li>线程意外终止：<code>run()</code>方法因为未捕获的异常导致线程终止；</li>\n<li>对某个线程的<code>Thread</code>实例调用<code>stop()</code>方法强制终止（强烈不推荐使用）。</li>\n</ul>\n<h2 id=\"线程通信-等待唤醒机制\"><a href=\"#线程通信-等待唤醒机制\" class=\"headerlink\" title=\"线程通信-等待唤醒机制\"></a>线程通信-等待唤醒机制</h2><p>等待唤醒机制使各线程有效利用资源，解决线程间处理同一个资源的问题</p>\n<ol>\n<li><p>wait</p>\n<p>线程不再活动参与调度，进入wait set中，这是线程状态是WAITING。等待其他线程执行notify后从wait set中释放出来，重新进入调度队列中</p>\n</li>\n<li><p>notify</p>\n<p>选取所通知对象的wait set中的一个线程释放</p>\n</li>\n<li><p>notifyAll</p>\n<p>释放所通知对象的wait set中的所有线程</p>\n</li>\n</ol>\n<ul>\n<li>在<code>synchronized</code>内部可以调用<code>wait()</code>使线程进入等待状态；</li>\n<li>必须在已获得的锁对象上调用<code>wait()</code>方法；</li>\n<li>在<code>synchronized</code>内部可以调用<code>notify()</code>或<code>notifyAll()</code>唤醒其他等待线程；</li>\n<li>必须在已获得的锁对象上调用<code>notify()</code>或<code>notifyAll()</code>方法；</li>\n<li>已唤醒的线程还需要重新获得锁后才能继续执行。</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>使线程可以复用，减少了反复创建和销毁线程的时间</p>\n<p>线程池是一个容器。当程序第一次启动时，创建多个线程保存在集合中。没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p>\n<ul>\n<li>降低资源消耗</li>\n<li>提高响应速度</li>\n<li>提高线程可管理性</li>\n</ul>\n<p>java.util.concurrent.Executors:线程池的工厂类</p>\n<ul>\n<li><p>创建线程池</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>submit执行线程任务</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>销毁线程池（不建议使用）</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-多线程\"><a href=\"#JAVA-多线程\" class=\"headerlink\" title=\"JAVA 多线程\"></a>JAVA 多线程</h1><h2 id=\"并发并行\"><a href=\"#并发并行\" class=\"headerlink\" title=\"并发并行\"></a>并发并行</h2><ul>\n<li><p>并发：两个或多个事件在同一时间段发生（交替）</p>\n</li>\n<li><p>并行：两个或多个事件在同一时刻发生（同时）</p>\n</li>\n</ul>\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p>一个程序至少有一个进程，一个进程至少有一个线程。</p>\n<ul>\n<li><p>进程：一个内存中运行的应用程序。每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程。是系统运行程序的基本单位；系统运行一个程序是一个进程从创建、运行到消亡的过程。</p>\n</li>\n<li><p>线程：是进程中的一个执行单元，负责当前进程中的程序的执行。一个进程中至少有一个线程，可以有多个线程。</p>\n</li>\n</ul>\n<p>和多线程相比，多进程的缺点在于：</p>\n<ol>\n<li>创建进程比创建线程开销大，尤其是在Windows系统上；</li>\n<li>进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。</li>\n</ol>\n<p>多进程的优点在于：</p>\n<p>​    多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。</p>\n<p>主线程：执行main方法的线程</p>\n<h2 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h2><ul>\n<li><p>分时调度</p>\n<p>所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间</p>\n</li>\n<li><p>抢占式调度（JAVA）</p>\n<p>优先让优先级高的线程使用CPU，优先级相同随机选择一个线程</p>\n</li>\n</ul>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>多个现车个互不影响（在不同的栈空间）</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><ul>\n<li><p>方式一</p>\n<ol>\n<li>创建一个Thread子类</li>\n<li>在Thread类的子类中重写Thread类中的run方法，设置线程任务</li>\n<li>创建Thread子类的对象</li>\n<li>执行Thread类中的start方法（主线程与新线程）</li>\n</ol>\n</li>\n<li><p>方式二</p>\n<ol>\n<li>创建一个实现Runnable接口的类</li>\n<li>实现run方法</li>\n<li>创建实现类的对象</li>\n<li>创建Thread类对象，构造方法中传递Runnable接口的实现类对象</li>\n<li>执行Thread类中的start方法（主线程与新线程）</li>\n</ol>\n</li>\n</ul>\n<p>方式二避免了单继承的局限性，增强了程序的扩展性，降低了耦合性</p>\n<ul>\n<li><p>匿名内部类实现线程创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Thread子类实现</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Runnable接口实现</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取当前线程名称</span>\n<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 获取线程名称</span>\n<span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 设置线程名称</span>\nt1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 当前线程暂停执行指定的毫秒数</span>\n<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h2><p>多个线程共享同一数据</p>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><ol>\n<li><p>同步代码块</p>\n<p>线程执行到synchronized会检查是否有锁对象，如果有进入同步中执行，如果没有就阻塞等待。同步执行完归还同步锁</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>同步锁对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 需要同步的代码</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>同步方法</p>\n<ul>\n<li>方法上添加synchronized，同步锁对象是this</li>\n<li>静态同步方法的锁对象是类.class</li>\n</ul>\n</li>\n<li><p>锁机制（Lock锁）更先进</p>\n<p>在成员位置创建一个ReentrantLock（实现了Lock接口）对象，在出现安全问题的代码前调用lock获取锁，在出现安全问题的代码后调用unlock释放锁。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Lock</span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 线程安全问题代码</span>\nl<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一般放在try catch后的finally中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h2><ul>\n<li>New：新创建的线程，尚未执行</li>\n<li>Runnable：运行中的线程，正在执行<code>run()</code>方法的Java代码</li>\n<li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；具有CPU的执行资格，等待CPU空闲</li>\n<li>Waiting：运行中的线程，因为某些操作在等待中；通过<code>notify()</code>唤醒</li>\n<li>Timed Waiting：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；放弃CPU的执行资格，CPU空闲也不执行；休眠结束唤醒</li>\n<li>Terminated：线程已终止，因为<code>run()</code>方法执行完毕</li>\n</ul>\n\n\n<p>线程终止的原因有：</p>\n<ul>\n<li>线程正常终止：<code>run()</code>方法执行到<code>return</code>语句返回；</li>\n<li>线程意外终止：<code>run()</code>方法因为未捕获的异常导致线程终止；</li>\n<li>对某个线程的<code>Thread</code>实例调用<code>stop()</code>方法强制终止（强烈不推荐使用）。</li>\n</ul>\n<h2 id=\"线程通信-等待唤醒机制\"><a href=\"#线程通信-等待唤醒机制\" class=\"headerlink\" title=\"线程通信-等待唤醒机制\"></a>线程通信-等待唤醒机制</h2><p>等待唤醒机制使各线程有效利用资源，解决线程间处理同一个资源的问题</p>\n<ol>\n<li><p>wait</p>\n<p>线程不再活动参与调度，进入wait set中，这是线程状态是WAITING。等待其他线程执行notify后从wait set中释放出来，重新进入调度队列中</p>\n</li>\n<li><p>notify</p>\n<p>选取所通知对象的wait set中的一个线程释放</p>\n</li>\n<li><p>notifyAll</p>\n<p>释放所通知对象的wait set中的所有线程</p>\n</li>\n</ol>\n<ul>\n<li>在<code>synchronized</code>内部可以调用<code>wait()</code>使线程进入等待状态；</li>\n<li>必须在已获得的锁对象上调用<code>wait()</code>方法；</li>\n<li>在<code>synchronized</code>内部可以调用<code>notify()</code>或<code>notifyAll()</code>唤醒其他等待线程；</li>\n<li>必须在已获得的锁对象上调用<code>notify()</code>或<code>notifyAll()</code>方法；</li>\n<li>已唤醒的线程还需要重新获得锁后才能继续执行。</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>使线程可以复用，减少了反复创建和销毁线程的时间</p>\n<p>线程池是一个容器。当程序第一次启动时，创建多个线程保存在集合中。没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p>\n<ul>\n<li>降低资源消耗</li>\n<li>提高响应速度</li>\n<li>提高线程可管理性</li>\n</ul>\n<p>java.util.concurrent.Executors:线程池的工厂类</p>\n<ul>\n<li><p>创建线程池</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>submit执行线程任务</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>销毁线程池（不建议使用）</p>\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n"},{"title":"JAVA反射","date":"2022-01-13T14:10:08.000Z","_content":"# JAVA反射\n\n## 开闭原则（OCP）\n\n在不修改源码的前提下，扩展功能\n\n\n\n## 反射机制\n\n允许程序在执行期间借助于Reflection API取得任何类的内部信息（比如成员变量、构造器、成员方法等），并能操作对象的属性和方法。\n\n加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构，称之为反射\n\n\n\n## 原理\n\n{% asset_image-1.png %}\n\n1. 在运行时判断任意一个对象所属的类\n2. 在运行时构造任意一个类的对象\n3. 在运行时得到任意一个类所具有的成员变量和方法\n4. 在运行时调用任意一个对象的成员变量和方法\n5. 生成动态代理\n\n\n\n## 相关类\n\n1. java.lang.Class\n2. java.lang.reflect.Method\n3. java.lang.reflect.Field\n4. java.lang.reflect.Constructor\n\n\n\n## 优点和缺点\n\n优点：可以动态的创建对象和使用对象（框架底层核心），使用灵活\n\n缺点：使用反射基本是解释执行，对执行速度有影响\n\n\n\n## 优化\n\n- Method和Field、Constructor对象都有setAccessible()方法\n\n- setAccessible()是启用和禁用访问安全检查的开关\n\n- 参数值为true表示反射对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查。\n\n\n\n## Class类的特点\n\n1. class类也是类，同样继承Object类\n\n2. Class类对象不是new出来的，而是系统创建的\n3. 某个类的class对象，在内存中只有一份，因为类只加载一次\n4. 每个类的实例都知道自己由哪个Class实例生成\n5. 通过Class对象可以完整的得到一个类的完整结构\n6. Class对象放在堆中\n7. 类的字节码二进制数据放在方法区（元数据）\n\n\n\n## 获取Class类对象\n\n{% asset_image-2.png %}\n\n1. 已知一个类的全类名，且该类在类路径下。Class类的静态方法\n\n   `Class cls = Class.forName(\"全类名\")`\n\n   应用场景：用于读取配置文件的全类名，加载类\n\n2. 若已知具体的类，通过类的class获取，该方式最为安全可靠，程序性能最高\n\n   `Class cls = Cat.class`\n\n   应用场景：多用于参数传递，比如通过反射得到对应构造器对象\n\n3. 已知某个类的实例，调用该实例的getClass()方法获取Class对象。\n\n   `Class cls = 对象.getClass()`\n\n   应用场景：通过创建好的对象，获取Class对象\n\n4. `ClassLoader cl = 对象.getClassLoader();`\n\n   `Class clz = cl.loadClass(\"全类名\");`\n\n5. 基本数据类型\n\n   `Class<Integer> clz = int.class;`\n\n6. 基本数据类型对应的包装类\n\n   `Class clz = 包装类.TYPE`\n\n{% asset_image-3.png %}\n\n\n\n## 类加载\n\n- 静态加载\n\n  编译时加载相关的类，如果没有则报错，依赖性太强\n\n- 动态加载\n\n  运行时加载需要的类，如果运行时不使用该类，则不报错，降低了依赖性\n\n- 类加载时机\n\n  - 静态\n    - 当创建对象时\n    - 当子类被加载时\n    - 调用类中的静态成员时\n  - 动态\n    - 通过反射\n\n\n\n## 类加载阶段\n\n{% asset_image-4.png %}\n\n1. 加载（Loading）\n\n   将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成\n\n2. 连接（Linking）\n\n   将类的二进制数据合并到JRE中\n\n3. 初始化（initialization）\n\n   JVM负责对类进行初始化，主要指静态成员\n\n\n\n## 反射爆破\n\n通过setAccessible(true)可以访问private暴力破解，破坏封装性","source":"_posts/JAVA反射.md","raw":"---\ntitle: JAVA反射\ndate: 2022-01-13 22:10:08\ntags: JAVA\ncategories: 编程\n---\n# JAVA反射\n\n## 开闭原则（OCP）\n\n在不修改源码的前提下，扩展功能\n\n\n\n## 反射机制\n\n允许程序在执行期间借助于Reflection API取得任何类的内部信息（比如成员变量、构造器、成员方法等），并能操作对象的属性和方法。\n\n加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构，称之为反射\n\n\n\n## 原理\n\n{% asset_image-1.png %}\n\n1. 在运行时判断任意一个对象所属的类\n2. 在运行时构造任意一个类的对象\n3. 在运行时得到任意一个类所具有的成员变量和方法\n4. 在运行时调用任意一个对象的成员变量和方法\n5. 生成动态代理\n\n\n\n## 相关类\n\n1. java.lang.Class\n2. java.lang.reflect.Method\n3. java.lang.reflect.Field\n4. java.lang.reflect.Constructor\n\n\n\n## 优点和缺点\n\n优点：可以动态的创建对象和使用对象（框架底层核心），使用灵活\n\n缺点：使用反射基本是解释执行，对执行速度有影响\n\n\n\n## 优化\n\n- Method和Field、Constructor对象都有setAccessible()方法\n\n- setAccessible()是启用和禁用访问安全检查的开关\n\n- 参数值为true表示反射对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查。\n\n\n\n## Class类的特点\n\n1. class类也是类，同样继承Object类\n\n2. Class类对象不是new出来的，而是系统创建的\n3. 某个类的class对象，在内存中只有一份，因为类只加载一次\n4. 每个类的实例都知道自己由哪个Class实例生成\n5. 通过Class对象可以完整的得到一个类的完整结构\n6. Class对象放在堆中\n7. 类的字节码二进制数据放在方法区（元数据）\n\n\n\n## 获取Class类对象\n\n{% asset_image-2.png %}\n\n1. 已知一个类的全类名，且该类在类路径下。Class类的静态方法\n\n   `Class cls = Class.forName(\"全类名\")`\n\n   应用场景：用于读取配置文件的全类名，加载类\n\n2. 若已知具体的类，通过类的class获取，该方式最为安全可靠，程序性能最高\n\n   `Class cls = Cat.class`\n\n   应用场景：多用于参数传递，比如通过反射得到对应构造器对象\n\n3. 已知某个类的实例，调用该实例的getClass()方法获取Class对象。\n\n   `Class cls = 对象.getClass()`\n\n   应用场景：通过创建好的对象，获取Class对象\n\n4. `ClassLoader cl = 对象.getClassLoader();`\n\n   `Class clz = cl.loadClass(\"全类名\");`\n\n5. 基本数据类型\n\n   `Class<Integer> clz = int.class;`\n\n6. 基本数据类型对应的包装类\n\n   `Class clz = 包装类.TYPE`\n\n{% asset_image-3.png %}\n\n\n\n## 类加载\n\n- 静态加载\n\n  编译时加载相关的类，如果没有则报错，依赖性太强\n\n- 动态加载\n\n  运行时加载需要的类，如果运行时不使用该类，则不报错，降低了依赖性\n\n- 类加载时机\n\n  - 静态\n    - 当创建对象时\n    - 当子类被加载时\n    - 调用类中的静态成员时\n  - 动态\n    - 通过反射\n\n\n\n## 类加载阶段\n\n{% asset_image-4.png %}\n\n1. 加载（Loading）\n\n   将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成\n\n2. 连接（Linking）\n\n   将类的二进制数据合并到JRE中\n\n3. 初始化（initialization）\n\n   JVM负责对类进行初始化，主要指静态成员\n\n\n\n## 反射爆破\n\n通过setAccessible(true)可以访问private暴力破解，破坏封装性","slug":"JAVA反射","published":1,"updated":"2022-10-13T15:17:41.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9r000994wadyo85qze","content":"<h1 id=\"JAVA反射\"><a href=\"#JAVA反射\" class=\"headerlink\" title=\"JAVA反射\"></a>JAVA反射</h1><h2 id=\"开闭原则（OCP）\"><a href=\"#开闭原则（OCP）\" class=\"headerlink\" title=\"开闭原则（OCP）\"></a>开闭原则（OCP）</h2><p>在不修改源码的前提下，扩展功能</p>\n<h2 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h2><p>允许程序在执行期间借助于Reflection API取得任何类的内部信息（比如成员变量、构造器、成员方法等），并能操作对象的属性和方法。</p>\n<p>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构，称之为反射</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2>\n\n<ol>\n<li>在运行时判断任意一个对象所属的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时得到任意一个类所具有的成员变量和方法</li>\n<li>在运行时调用任意一个对象的成员变量和方法</li>\n<li>生成动态代理</li>\n</ol>\n<h2 id=\"相关类\"><a href=\"#相关类\" class=\"headerlink\" title=\"相关类\"></a>相关类</h2><ol>\n<li>java.lang.Class</li>\n<li>java.lang.reflect.Method</li>\n<li>java.lang.reflect.Field</li>\n<li>java.lang.reflect.Constructor</li>\n</ol>\n<h2 id=\"优点和缺点\"><a href=\"#优点和缺点\" class=\"headerlink\" title=\"优点和缺点\"></a>优点和缺点</h2><p>优点：可以动态的创建对象和使用对象（框架底层核心），使用灵活</p>\n<p>缺点：使用反射基本是解释执行，对执行速度有影响</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><ul>\n<li><p>Method和Field、Constructor对象都有setAccessible()方法</p>\n</li>\n<li><p>setAccessible()是启用和禁用访问安全检查的开关</p>\n</li>\n<li><p>参数值为true表示反射对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查。</p>\n</li>\n</ul>\n<h2 id=\"Class类的特点\"><a href=\"#Class类的特点\" class=\"headerlink\" title=\"Class类的特点\"></a>Class类的特点</h2><ol>\n<li><p>class类也是类，同样继承Object类</p>\n</li>\n<li><p>Class类对象不是new出来的，而是系统创建的</p>\n</li>\n<li><p>某个类的class对象，在内存中只有一份，因为类只加载一次</p>\n</li>\n<li><p>每个类的实例都知道自己由哪个Class实例生成</p>\n</li>\n<li><p>通过Class对象可以完整的得到一个类的完整结构</p>\n</li>\n<li><p>Class对象放在堆中</p>\n</li>\n<li><p>类的字节码二进制数据放在方法区（元数据）</p>\n</li>\n</ol>\n<h2 id=\"获取Class类对象\"><a href=\"#获取Class类对象\" class=\"headerlink\" title=\"获取Class类对象\"></a>获取Class类对象</h2>\n\n<ol>\n<li><p>已知一个类的全类名，且该类在类路径下。Class类的静态方法</p>\n<p><code>Class cls = Class.forName(&quot;全类名&quot;)</code></p>\n<p>应用场景：用于读取配置文件的全类名，加载类</p>\n</li>\n<li><p>若已知具体的类，通过类的class获取，该方式最为安全可靠，程序性能最高</p>\n<p><code>Class cls = Cat.class</code></p>\n<p>应用场景：多用于参数传递，比如通过反射得到对应构造器对象</p>\n</li>\n<li><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象。</p>\n<p><code>Class cls = 对象.getClass()</code></p>\n<p>应用场景：通过创建好的对象，获取Class对象</p>\n</li>\n<li><p><code>ClassLoader cl = 对象.getClassLoader();</code></p>\n<p><code>Class clz = cl.loadClass(&quot;全类名&quot;);</code></p>\n</li>\n<li><p>基本数据类型</p>\n<p><code>Class&lt;Integer&gt; clz = int.class;</code></p>\n</li>\n<li><p>基本数据类型对应的包装类</p>\n<p><code>Class clz = 包装类.TYPE</code></p>\n</li>\n</ol>\n\n\n\n\n<h2 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h2><ul>\n<li><p>静态加载</p>\n<p>编译时加载相关的类，如果没有则报错，依赖性太强</p>\n</li>\n<li><p>动态加载</p>\n<p>运行时加载需要的类，如果运行时不使用该类，则不报错，降低了依赖性</p>\n</li>\n<li><p>类加载时机</p>\n<ul>\n<li>静态<ul>\n<li>当创建对象时</li>\n<li>当子类被加载时</li>\n<li>调用类中的静态成员时</li>\n</ul>\n</li>\n<li>动态<ul>\n<li>通过反射</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类加载阶段\"><a href=\"#类加载阶段\" class=\"headerlink\" title=\"类加载阶段\"></a>类加载阶段</h2>\n\n<ol>\n<li><p>加载（Loading）</p>\n<p>将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成</p>\n</li>\n<li><p>连接（Linking）</p>\n<p>将类的二进制数据合并到JRE中</p>\n</li>\n<li><p>初始化（initialization）</p>\n<p>JVM负责对类进行初始化，主要指静态成员</p>\n</li>\n</ol>\n<h2 id=\"反射爆破\"><a href=\"#反射爆破\" class=\"headerlink\" title=\"反射爆破\"></a>反射爆破</h2><p>通过setAccessible(true)可以访问private暴力破解，破坏封装性</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA反射\"><a href=\"#JAVA反射\" class=\"headerlink\" title=\"JAVA反射\"></a>JAVA反射</h1><h2 id=\"开闭原则（OCP）\"><a href=\"#开闭原则（OCP）\" class=\"headerlink\" title=\"开闭原则（OCP）\"></a>开闭原则（OCP）</h2><p>在不修改源码的前提下，扩展功能</p>\n<h2 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h2><p>允许程序在执行期间借助于Reflection API取得任何类的内部信息（比如成员变量、构造器、成员方法等），并能操作对象的属性和方法。</p>\n<p>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构，称之为反射</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2>\n\n<ol>\n<li>在运行时判断任意一个对象所属的类</li>\n<li>在运行时构造任意一个类的对象</li>\n<li>在运行时得到任意一个类所具有的成员变量和方法</li>\n<li>在运行时调用任意一个对象的成员变量和方法</li>\n<li>生成动态代理</li>\n</ol>\n<h2 id=\"相关类\"><a href=\"#相关类\" class=\"headerlink\" title=\"相关类\"></a>相关类</h2><ol>\n<li>java.lang.Class</li>\n<li>java.lang.reflect.Method</li>\n<li>java.lang.reflect.Field</li>\n<li>java.lang.reflect.Constructor</li>\n</ol>\n<h2 id=\"优点和缺点\"><a href=\"#优点和缺点\" class=\"headerlink\" title=\"优点和缺点\"></a>优点和缺点</h2><p>优点：可以动态的创建对象和使用对象（框架底层核心），使用灵活</p>\n<p>缺点：使用反射基本是解释执行，对执行速度有影响</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><ul>\n<li><p>Method和Field、Constructor对象都有setAccessible()方法</p>\n</li>\n<li><p>setAccessible()是启用和禁用访问安全检查的开关</p>\n</li>\n<li><p>参数值为true表示反射对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查。</p>\n</li>\n</ul>\n<h2 id=\"Class类的特点\"><a href=\"#Class类的特点\" class=\"headerlink\" title=\"Class类的特点\"></a>Class类的特点</h2><ol>\n<li><p>class类也是类，同样继承Object类</p>\n</li>\n<li><p>Class类对象不是new出来的，而是系统创建的</p>\n</li>\n<li><p>某个类的class对象，在内存中只有一份，因为类只加载一次</p>\n</li>\n<li><p>每个类的实例都知道自己由哪个Class实例生成</p>\n</li>\n<li><p>通过Class对象可以完整的得到一个类的完整结构</p>\n</li>\n<li><p>Class对象放在堆中</p>\n</li>\n<li><p>类的字节码二进制数据放在方法区（元数据）</p>\n</li>\n</ol>\n<h2 id=\"获取Class类对象\"><a href=\"#获取Class类对象\" class=\"headerlink\" title=\"获取Class类对象\"></a>获取Class类对象</h2>\n\n<ol>\n<li><p>已知一个类的全类名，且该类在类路径下。Class类的静态方法</p>\n<p><code>Class cls = Class.forName(&quot;全类名&quot;)</code></p>\n<p>应用场景：用于读取配置文件的全类名，加载类</p>\n</li>\n<li><p>若已知具体的类，通过类的class获取，该方式最为安全可靠，程序性能最高</p>\n<p><code>Class cls = Cat.class</code></p>\n<p>应用场景：多用于参数传递，比如通过反射得到对应构造器对象</p>\n</li>\n<li><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象。</p>\n<p><code>Class cls = 对象.getClass()</code></p>\n<p>应用场景：通过创建好的对象，获取Class对象</p>\n</li>\n<li><p><code>ClassLoader cl = 对象.getClassLoader();</code></p>\n<p><code>Class clz = cl.loadClass(&quot;全类名&quot;);</code></p>\n</li>\n<li><p>基本数据类型</p>\n<p><code>Class&lt;Integer&gt; clz = int.class;</code></p>\n</li>\n<li><p>基本数据类型对应的包装类</p>\n<p><code>Class clz = 包装类.TYPE</code></p>\n</li>\n</ol>\n\n\n\n\n<h2 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h2><ul>\n<li><p>静态加载</p>\n<p>编译时加载相关的类，如果没有则报错，依赖性太强</p>\n</li>\n<li><p>动态加载</p>\n<p>运行时加载需要的类，如果运行时不使用该类，则不报错，降低了依赖性</p>\n</li>\n<li><p>类加载时机</p>\n<ul>\n<li>静态<ul>\n<li>当创建对象时</li>\n<li>当子类被加载时</li>\n<li>调用类中的静态成员时</li>\n</ul>\n</li>\n<li>动态<ul>\n<li>通过反射</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类加载阶段\"><a href=\"#类加载阶段\" class=\"headerlink\" title=\"类加载阶段\"></a>类加载阶段</h2>\n\n<ol>\n<li><p>加载（Loading）</p>\n<p>将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成</p>\n</li>\n<li><p>连接（Linking）</p>\n<p>将类的二进制数据合并到JRE中</p>\n</li>\n<li><p>初始化（initialization）</p>\n<p>JVM负责对类进行初始化，主要指静态成员</p>\n</li>\n</ol>\n<h2 id=\"反射爆破\"><a href=\"#反射爆破\" class=\"headerlink\" title=\"反射爆破\"></a>反射爆破</h2><p>通过setAccessible(true)可以访问private暴力破解，破坏封装性</p>\n"},{"title":"JAVA基础梳理（持续补充）","date":"2019-07-12T02:38:26.000Z","_content":"\n# JAVA基础梳理（持续补充）\n\n## 1. JVM、JRE、JDK\n\n- JVM：虚拟的用于执行bytecode字节码的虚拟计算机\n- JRE：JAVA运行环境，包含JAVA虚拟机、库函数、运行JAVA应用程序所必须的文件\n- JDK：JAVA工具包，包含JRE，以及增加编译器和调试器等用于程序开发的文件\n\n{% asset_img image-1.png %}\n\n\n\n## 2. 变量\n\n- 局部变量\n\n  方法内部的变量。生命周期从声明到方法执行结束\n\n- 成员变量\n\n  方法外部、类内部的变量。生命周期伴随对象\n\n- 静态变量\n\n  使用static定义。从属于类，生命周期伴随类的加载到卸载。\n  \n  静态字段属于所有对象“共享”的变量，实际上是属于类的变量，无论修改哪个对象的静态变量，效果都是一样的：所有实例的静态变量都被修改了。所以一般访问静态变量用 类名.静态变量\n\n\n\n## 3. 数据类型\n\n- 基本数据类型\n\n  - 整数类型（byte 1字节=8位 范围-2^7~2^7-1，short 2字节，int 4字节，long 8字节）\n\n  - 浮点类型（float 4字节 范围-3.403E38~3.403E38，double 8字节 范围-1.798E308~1.798E308）\n\n  - 字符型（char 2字节）\n\n  - 布尔型（boolean 1位）\n\n- 引用数据类型（4字节，存放引用地址）\n\n  class，inerface，array\n\n\n\n## 4. 方法\n\n- 静态方法：static修饰的方法属于`class`而不属于对象。静态方法内部，无法访问`this`变量，也无法访问对象的成员变量，它只能访问静态变量和其他静态方法。常用于工具类\n\n- 方法重载（override）：方法名相同，参数不同，构成重载\n\n- 方法重写（override）：子类通过重写父类的方法，替换父类的行为\n    - 方法名、形参列表相同\n    - 返回值类型和异常类型，子类小于等于父类\n    - 访问权限，子类大于父类\n\n\n\n## 5. 类与对象\n\n类可以看作对象的模板\n\n- 构造方法（constructor）：用于创建这个类的对象\n\n    1. 通过new关键字调用\n    2. 构造器虽然有返回值，但是不能定义返回值类型，不能在构造器内使用return返回某个值\n    3. 如果我们没有定义构造器，无参的构造方法由系统自动生成\n    4. 方法名与类名保持一致\n    5. 构造方法执行的第一行代码总是super();\n    \n- 对象转型\n\n    - 向上转型：父类引用指向子类对象\n\n      ```java\n      Father f = new Child();\n      ```\n\n    - 强制向下转型\n\n      ```java\n      Child c = (Child) f;\n      ```\n\n      \n\n## 6. 内存分析\n\njava虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area\n\n- 栈：\n\n    1. 栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧（用于存储局部变量、操作数、方法出口等）\n    2. JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）\n    3. 栈属于线程私有，不能实现线程间的共享\n    4. 栈的存储特性是先进后出、后进先出\n    5. 栈由系统自动分配，速度快。栈是连续的存储空间\n- 堆：\n    1. 堆用于存储创建好的对象和数组\n    2. JVM只有一个堆，被所有线程共享\n    3. 堆是一个不连续的存储空间，分配灵活，速度慢\n- 方法区（静态区）：\n    1. JVM只有一个方法区，被所有线程共享\n    2. 方法区实际也是堆，只用于存储类、常量等相关信息\n    3. 用于存放唯一或不变的内容（类信息、静态变量、字符串常量等）\n\n{% asset_img image-2.png %}\n\n\n\n## 7. 继承（extends）\n\n- Java只有单继承（接口有多继承）\n- 子类继承父类，可以得到父类的全部属性和方法（除了父类的构造方法和私有的属性和方法）\n- 没有extends时，则继承java.lang.Object\n- super 直接父类对象的引用，用于访问父类中被子类覆盖的方法或属性\n\n\n\n## 8. 封装\n\n程序设计要求高内聚低耦合\n\n- 优点：\n\n    1. 提高代码安全性\n    2. 提高代码的复用性\n    3. 高内聚指类的内部数据操作细节已经完成，不允许外部干涉\n    4. 低耦合是仅暴露少量的方法给外部使用，尽量方便外部调用\n\n- 访问权限：\n\n    1. private 私有权限，只有自己的类能访问\n    2. default 默认权限，只有同一个包的类能访问\n    3. protected 受保护权限，可以被同一个包的类及其他包的子类访问\n    4. public 公开权限，可以被该项目的所有包中的所有类访问\n\n- JavaBean：\n\n  - 若干`private`实例字段\n\n  - 通过`public`  get/set方法来读写实例字段\n\n  - 枚举一个JavaBean的所有属性，可以使用Java核心库提供的Introspector（注意`class`属性是从`Object`继承的`getClass()`方法带来的。）\n  \n    ```java\n    BeanInfo info = Introspector.getBeanInfo(类名.class);\n    PropertyDescriptor pd  = info.getPropertyDescriptors()\n    ```\n  \n    \n\n\n## 9. 多态（Polymorphic）\n\n同一个方法调用，由于对象不同可能会有不同的行为\n\n- 是方法的多态，与属性无关（多态与属性无关）\n- 多态的三个必要条件：继承，方法重写，父类引用指向子类对象\n- 父类引用指向子类对象后，用该父类引用调用子类重写的方法\n\n\n\n## 10. final关键字\n\n- 修饰变量：被final修饰的变量不可改变，必须在创建对象时初始化，不能重新赋值\n- 修饰方法：被final修饰的方法不可被子类重写，但是可以被重载\n- 修饰类：被final修饰的类不能被继承（Math、String）\n\n\n\n## 11. 数组\n\n- 长度是确定的。一旦被创建，大小不可改变\n- 元素是相同数据类型\n- 数组类型可以使任意数据类型。数组本身是引用类型\n\n声明：声明的时候没有实例化任何对象，只有在实例化对象时JVM才分配空间。声明时数据没有真正被创建\n\n```java\n// 声明：栈内存\nType[] arr_name;\nType arr_name[];\n\n// 声明并实例化。分配空间：堆内存\nType[] arr_name = new Type[size];\nType arr_name[] = new Type[size];\n```\n\n\n\n## 12. 抽象方法抽象类（abstract）\n\n- 抽象方法\n\n  使用abstract修饰的方法，没有方法体只有声明，定义子类具体实现的规范\n\n- 抽象类\n\n  包含抽象方法的类（只能定义成抽象类）。不能实例化，只能用来被继承，使子类更加通用\n\n\n\n## 13. 接口（interface）\n\n接口的所有方法都是抽象方法\n\n- 访问修饰符只能是public或默认\n- 可以多继承接口，extends\n- 接口中的属性只能是常量，public static final 修饰（默认）\n- 方法 public abstract修饰（默认）\n- 子类通过implements实现接口规范，并且要实现接口中所有方法（public）\n- 不能实例化\n\n\n\n## 14. 内部类（Inner Class）\n\n- 成员内部类\n\n    可以使用private、default、protected、public修饰，类文件：外部类$内部类.class\n\n    - 非静态内部类\n      1. 非静态内部类寄存在一个外部类里，非静态内部类对象一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象\n      2. 非静态内部类可以直接访问外部类的成员，但外部类不能直接访问非静态内部类成员\n      3. 非静态内部类不能有静态方法。静态属性和静态代码块\n      4. 外部类的静态方法。静态代码块不能访问非静态内部类，不能使用非静态内部类定义变量、创建实例\n    - 静态内部类\n      1. 静态内部类存在时，不一定存在对应的外部类对象。静态内部类的实例方法不能直接访问外部类的实例方法\n      2. 静态内部类看做外部类的一个静态成员。外部类方法中可以通过 静态内部类.成员名 访问静态内部类的静态成员，通过 new 静态内部类（）常见静态内部类的实例\n\n- 匿名内部类\n\n    适用于一次性使用的类\n\n    没有访问修饰符\n\n    没有构造方法和类名\n\n    ```java\n    new 构造器/接口() {\n        // 实现必要的抽象方法...\n    };\n    ```\n\n- 局部内部类\n\n\n\n## 15. 常用类\n\n- 包装类\n\n  Byte、Boolean、Short、Character、Integer、Long、Float、Double\n\n  ```java\n  // 基本类型转换为包装类\n  Integer i1 = new Integer(100); \n  Integer i2 = Integer.valueOf(100);\n  // 包装类转换为基本类型\n  int i3 = i1.intValue();\n  // 字符串转换为Integer\n  Integer i4 = Integer.parseInt(\"100\");\n  Integer i5 = new Integer(\"100\");\n  // Integer转换为字符串\n  String s1 = i4.toString();\n  // int类型最大值\n  Integer.MAX_VALUE;\n  // 自动装箱\n  Integer i =100;\n  // 自动拆箱\n  int j = i;\n  // 编译通过但是空指针异常\n  Integer i = null;\n  int j = i;\n  ```\n\n- String类\n\n  可变字符序列：StringBuilder不安全但效率高，StringBuffer安全但效率低（一般用StringBuilder）\n\n- Date类\n\n  时间戳：\n\n  ```java\n  long now =  System.currentTimeMillis();\n  ```\n\n  DateFormat类：时间对象和指定格式的字符串相互转化。抽象类，一般需要SimpleDateFormat类实现\n\n  ```java\n  Dateformat df = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n  String str = df.format(new Date(4000000));\n  Date date = df.parse(\"2020-05-21 13:14:15\");\n  ```\n\n- File类\n\n  java.io.file\n\n  ```java\n  File f = new File(\"文件路径\");\n  ```\n\n\n\n## 16. 枚举\n\nenum，本质是类，public static final 修饰\n\n\n\n## 17. 异常\n\njava.lang.throwable，两个子类Error和Exception\n\n{% asset_img image-3.png %}\n\n- catch方法。toString()，显示异常的类名和产生异常的原因\n- catch方法。getMessage()，只显示产生异常的原因，不显示类名\n- catch方法。printStackTrace()，跟踪异常事件发生时的堆栈内容\n- finally语句可选，如果有的话，则不管是否发生异常都会执行\n- try catch中存在return，执行完finally语句再通过return语句退出\n- 自定义异常，继承exception类\n  \nException\n│\n├─ RuntimeException\n│  │\n│  ├─ NullPointerException\n│  │\n│  ├─ IndexOutOfBoundsException\n│  │\n│  ├─ SecurityException\n│  │\n│  └─ IllegalArgumentException\n│     │\n│     └─ NumberFormatException\n│\n├─ IOException\n│  │\n│  ├─ UnsupportedCharsetException\n│  │\n│  ├─ FileNotFoundException\n│  │\n│  └─ SocketException\n│\n├─ ParseException\n│\n├─ GeneralSecurityException\n│\n├─ SQLException\n│\n└─ TimeoutException\n","source":"_posts/JAVA基础梳理.md","raw":"---\ntitle: JAVA基础梳理（持续补充）\ndate: 2019-07-12 10:38:26\ntags: JAVA\ncategories: 编程\n---\n\n# JAVA基础梳理（持续补充）\n\n## 1. JVM、JRE、JDK\n\n- JVM：虚拟的用于执行bytecode字节码的虚拟计算机\n- JRE：JAVA运行环境，包含JAVA虚拟机、库函数、运行JAVA应用程序所必须的文件\n- JDK：JAVA工具包，包含JRE，以及增加编译器和调试器等用于程序开发的文件\n\n{% asset_img image-1.png %}\n\n\n\n## 2. 变量\n\n- 局部变量\n\n  方法内部的变量。生命周期从声明到方法执行结束\n\n- 成员变量\n\n  方法外部、类内部的变量。生命周期伴随对象\n\n- 静态变量\n\n  使用static定义。从属于类，生命周期伴随类的加载到卸载。\n  \n  静态字段属于所有对象“共享”的变量，实际上是属于类的变量，无论修改哪个对象的静态变量，效果都是一样的：所有实例的静态变量都被修改了。所以一般访问静态变量用 类名.静态变量\n\n\n\n## 3. 数据类型\n\n- 基本数据类型\n\n  - 整数类型（byte 1字节=8位 范围-2^7~2^7-1，short 2字节，int 4字节，long 8字节）\n\n  - 浮点类型（float 4字节 范围-3.403E38~3.403E38，double 8字节 范围-1.798E308~1.798E308）\n\n  - 字符型（char 2字节）\n\n  - 布尔型（boolean 1位）\n\n- 引用数据类型（4字节，存放引用地址）\n\n  class，inerface，array\n\n\n\n## 4. 方法\n\n- 静态方法：static修饰的方法属于`class`而不属于对象。静态方法内部，无法访问`this`变量，也无法访问对象的成员变量，它只能访问静态变量和其他静态方法。常用于工具类\n\n- 方法重载（override）：方法名相同，参数不同，构成重载\n\n- 方法重写（override）：子类通过重写父类的方法，替换父类的行为\n    - 方法名、形参列表相同\n    - 返回值类型和异常类型，子类小于等于父类\n    - 访问权限，子类大于父类\n\n\n\n## 5. 类与对象\n\n类可以看作对象的模板\n\n- 构造方法（constructor）：用于创建这个类的对象\n\n    1. 通过new关键字调用\n    2. 构造器虽然有返回值，但是不能定义返回值类型，不能在构造器内使用return返回某个值\n    3. 如果我们没有定义构造器，无参的构造方法由系统自动生成\n    4. 方法名与类名保持一致\n    5. 构造方法执行的第一行代码总是super();\n    \n- 对象转型\n\n    - 向上转型：父类引用指向子类对象\n\n      ```java\n      Father f = new Child();\n      ```\n\n    - 强制向下转型\n\n      ```java\n      Child c = (Child) f;\n      ```\n\n      \n\n## 6. 内存分析\n\njava虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area\n\n- 栈：\n\n    1. 栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧（用于存储局部变量、操作数、方法出口等）\n    2. JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）\n    3. 栈属于线程私有，不能实现线程间的共享\n    4. 栈的存储特性是先进后出、后进先出\n    5. 栈由系统自动分配，速度快。栈是连续的存储空间\n- 堆：\n    1. 堆用于存储创建好的对象和数组\n    2. JVM只有一个堆，被所有线程共享\n    3. 堆是一个不连续的存储空间，分配灵活，速度慢\n- 方法区（静态区）：\n    1. JVM只有一个方法区，被所有线程共享\n    2. 方法区实际也是堆，只用于存储类、常量等相关信息\n    3. 用于存放唯一或不变的内容（类信息、静态变量、字符串常量等）\n\n{% asset_img image-2.png %}\n\n\n\n## 7. 继承（extends）\n\n- Java只有单继承（接口有多继承）\n- 子类继承父类，可以得到父类的全部属性和方法（除了父类的构造方法和私有的属性和方法）\n- 没有extends时，则继承java.lang.Object\n- super 直接父类对象的引用，用于访问父类中被子类覆盖的方法或属性\n\n\n\n## 8. 封装\n\n程序设计要求高内聚低耦合\n\n- 优点：\n\n    1. 提高代码安全性\n    2. 提高代码的复用性\n    3. 高内聚指类的内部数据操作细节已经完成，不允许外部干涉\n    4. 低耦合是仅暴露少量的方法给外部使用，尽量方便外部调用\n\n- 访问权限：\n\n    1. private 私有权限，只有自己的类能访问\n    2. default 默认权限，只有同一个包的类能访问\n    3. protected 受保护权限，可以被同一个包的类及其他包的子类访问\n    4. public 公开权限，可以被该项目的所有包中的所有类访问\n\n- JavaBean：\n\n  - 若干`private`实例字段\n\n  - 通过`public`  get/set方法来读写实例字段\n\n  - 枚举一个JavaBean的所有属性，可以使用Java核心库提供的Introspector（注意`class`属性是从`Object`继承的`getClass()`方法带来的。）\n  \n    ```java\n    BeanInfo info = Introspector.getBeanInfo(类名.class);\n    PropertyDescriptor pd  = info.getPropertyDescriptors()\n    ```\n  \n    \n\n\n## 9. 多态（Polymorphic）\n\n同一个方法调用，由于对象不同可能会有不同的行为\n\n- 是方法的多态，与属性无关（多态与属性无关）\n- 多态的三个必要条件：继承，方法重写，父类引用指向子类对象\n- 父类引用指向子类对象后，用该父类引用调用子类重写的方法\n\n\n\n## 10. final关键字\n\n- 修饰变量：被final修饰的变量不可改变，必须在创建对象时初始化，不能重新赋值\n- 修饰方法：被final修饰的方法不可被子类重写，但是可以被重载\n- 修饰类：被final修饰的类不能被继承（Math、String）\n\n\n\n## 11. 数组\n\n- 长度是确定的。一旦被创建，大小不可改变\n- 元素是相同数据类型\n- 数组类型可以使任意数据类型。数组本身是引用类型\n\n声明：声明的时候没有实例化任何对象，只有在实例化对象时JVM才分配空间。声明时数据没有真正被创建\n\n```java\n// 声明：栈内存\nType[] arr_name;\nType arr_name[];\n\n// 声明并实例化。分配空间：堆内存\nType[] arr_name = new Type[size];\nType arr_name[] = new Type[size];\n```\n\n\n\n## 12. 抽象方法抽象类（abstract）\n\n- 抽象方法\n\n  使用abstract修饰的方法，没有方法体只有声明，定义子类具体实现的规范\n\n- 抽象类\n\n  包含抽象方法的类（只能定义成抽象类）。不能实例化，只能用来被继承，使子类更加通用\n\n\n\n## 13. 接口（interface）\n\n接口的所有方法都是抽象方法\n\n- 访问修饰符只能是public或默认\n- 可以多继承接口，extends\n- 接口中的属性只能是常量，public static final 修饰（默认）\n- 方法 public abstract修饰（默认）\n- 子类通过implements实现接口规范，并且要实现接口中所有方法（public）\n- 不能实例化\n\n\n\n## 14. 内部类（Inner Class）\n\n- 成员内部类\n\n    可以使用private、default、protected、public修饰，类文件：外部类$内部类.class\n\n    - 非静态内部类\n      1. 非静态内部类寄存在一个外部类里，非静态内部类对象一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象\n      2. 非静态内部类可以直接访问外部类的成员，但外部类不能直接访问非静态内部类成员\n      3. 非静态内部类不能有静态方法。静态属性和静态代码块\n      4. 外部类的静态方法。静态代码块不能访问非静态内部类，不能使用非静态内部类定义变量、创建实例\n    - 静态内部类\n      1. 静态内部类存在时，不一定存在对应的外部类对象。静态内部类的实例方法不能直接访问外部类的实例方法\n      2. 静态内部类看做外部类的一个静态成员。外部类方法中可以通过 静态内部类.成员名 访问静态内部类的静态成员，通过 new 静态内部类（）常见静态内部类的实例\n\n- 匿名内部类\n\n    适用于一次性使用的类\n\n    没有访问修饰符\n\n    没有构造方法和类名\n\n    ```java\n    new 构造器/接口() {\n        // 实现必要的抽象方法...\n    };\n    ```\n\n- 局部内部类\n\n\n\n## 15. 常用类\n\n- 包装类\n\n  Byte、Boolean、Short、Character、Integer、Long、Float、Double\n\n  ```java\n  // 基本类型转换为包装类\n  Integer i1 = new Integer(100); \n  Integer i2 = Integer.valueOf(100);\n  // 包装类转换为基本类型\n  int i3 = i1.intValue();\n  // 字符串转换为Integer\n  Integer i4 = Integer.parseInt(\"100\");\n  Integer i5 = new Integer(\"100\");\n  // Integer转换为字符串\n  String s1 = i4.toString();\n  // int类型最大值\n  Integer.MAX_VALUE;\n  // 自动装箱\n  Integer i =100;\n  // 自动拆箱\n  int j = i;\n  // 编译通过但是空指针异常\n  Integer i = null;\n  int j = i;\n  ```\n\n- String类\n\n  可变字符序列：StringBuilder不安全但效率高，StringBuffer安全但效率低（一般用StringBuilder）\n\n- Date类\n\n  时间戳：\n\n  ```java\n  long now =  System.currentTimeMillis();\n  ```\n\n  DateFormat类：时间对象和指定格式的字符串相互转化。抽象类，一般需要SimpleDateFormat类实现\n\n  ```java\n  Dateformat df = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n  String str = df.format(new Date(4000000));\n  Date date = df.parse(\"2020-05-21 13:14:15\");\n  ```\n\n- File类\n\n  java.io.file\n\n  ```java\n  File f = new File(\"文件路径\");\n  ```\n\n\n\n## 16. 枚举\n\nenum，本质是类，public static final 修饰\n\n\n\n## 17. 异常\n\njava.lang.throwable，两个子类Error和Exception\n\n{% asset_img image-3.png %}\n\n- catch方法。toString()，显示异常的类名和产生异常的原因\n- catch方法。getMessage()，只显示产生异常的原因，不显示类名\n- catch方法。printStackTrace()，跟踪异常事件发生时的堆栈内容\n- finally语句可选，如果有的话，则不管是否发生异常都会执行\n- try catch中存在return，执行完finally语句再通过return语句退出\n- 自定义异常，继承exception类\n  \nException\n│\n├─ RuntimeException\n│  │\n│  ├─ NullPointerException\n│  │\n│  ├─ IndexOutOfBoundsException\n│  │\n│  ├─ SecurityException\n│  │\n│  └─ IllegalArgumentException\n│     │\n│     └─ NumberFormatException\n│\n├─ IOException\n│  │\n│  ├─ UnsupportedCharsetException\n│  │\n│  ├─ FileNotFoundException\n│  │\n│  └─ SocketException\n│\n├─ ParseException\n│\n├─ GeneralSecurityException\n│\n├─ SQLException\n│\n└─ TimeoutException\n","slug":"JAVA基础梳理","published":1,"updated":"2022-07-27T17:04:43.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9s000b94wa2lpd9rzj","content":"<h1 id=\"JAVA基础梳理（持续补充）\"><a href=\"#JAVA基础梳理（持续补充）\" class=\"headerlink\" title=\"JAVA基础梳理（持续补充）\"></a>JAVA基础梳理（持续补充）</h1><h2 id=\"1-JVM、JRE、JDK\"><a href=\"#1-JVM、JRE、JDK\" class=\"headerlink\" title=\"1. JVM、JRE、JDK\"></a>1. JVM、JRE、JDK</h2><ul>\n<li>JVM：虚拟的用于执行bytecode字节码的虚拟计算机</li>\n<li>JRE：JAVA运行环境，包含JAVA虚拟机、库函数、运行JAVA应用程序所必须的文件</li>\n<li>JDK：JAVA工具包，包含JRE，以及增加编译器和调试器等用于程序开发的文件</li>\n</ul>\n<img src=\"/2019/07/12/java-ji-chu-shu-li/image-1.png\" class=\"\">\n\n\n\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><ul>\n<li><p>局部变量</p>\n<p>方法内部的变量。生命周期从声明到方法执行结束</p>\n</li>\n<li><p>成员变量</p>\n<p>方法外部、类内部的变量。生命周期伴随对象</p>\n</li>\n<li><p>静态变量</p>\n<p>使用static定义。从属于类，生命周期伴随类的加载到卸载。</p>\n<p>静态字段属于所有对象“共享”的变量，实际上是属于类的变量，无论修改哪个对象的静态变量，效果都是一样的：所有实例的静态变量都被修改了。所以一般访问静态变量用 类名.静态变量</p>\n</li>\n</ul>\n<h2 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3. 数据类型\"></a>3. 数据类型</h2><ul>\n<li><p>基本数据类型</p>\n<ul>\n<li><p>整数类型（byte 1字节=8位 范围-2^7~2^7-1，short 2字节，int 4字节，long 8字节）</p>\n</li>\n<li><p>浮点类型（float 4字节 范围-3.403E38<del>3.403E38，double 8字节 范围-1.798E308</del>1.798E308）</p>\n</li>\n<li><p>字符型（char 2字节）</p>\n</li>\n<li><p>布尔型（boolean 1位）</p>\n</li>\n</ul>\n</li>\n<li><p>引用数据类型（4字节，存放引用地址）</p>\n<p>class，inerface，array</p>\n</li>\n</ul>\n<h2 id=\"4-方法\"><a href=\"#4-方法\" class=\"headerlink\" title=\"4. 方法\"></a>4. 方法</h2><ul>\n<li><p>静态方法：static修饰的方法属于<code>class</code>而不属于对象。静态方法内部，无法访问<code>this</code>变量，也无法访问对象的成员变量，它只能访问静态变量和其他静态方法。常用于工具类</p>\n</li>\n<li><p>方法重载（override）：方法名相同，参数不同，构成重载</p>\n</li>\n<li><p>方法重写（override）：子类通过重写父类的方法，替换父类的行为</p>\n<ul>\n<li>方法名、形参列表相同</li>\n<li>返回值类型和异常类型，子类小于等于父类</li>\n<li>访问权限，子类大于父类</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-类与对象\"><a href=\"#5-类与对象\" class=\"headerlink\" title=\"5. 类与对象\"></a>5. 类与对象</h2><p>类可以看作对象的模板</p>\n<ul>\n<li><p>构造方法（constructor）：用于创建这个类的对象</p>\n<ol>\n<li>通过new关键字调用</li>\n<li>构造器虽然有返回值，但是不能定义返回值类型，不能在构造器内使用return返回某个值</li>\n<li>如果我们没有定义构造器，无参的构造方法由系统自动生成</li>\n<li>方法名与类名保持一致</li>\n<li>构造方法执行的第一行代码总是super();</li>\n</ol>\n</li>\n<li><p>对象转型</p>\n<ul>\n<li><p>向上转型：父类引用指向子类对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Father</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>强制向下转型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Child</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-内存分析\"><a href=\"#6-内存分析\" class=\"headerlink\" title=\"6. 内存分析\"></a>6. 内存分析</h2><p>java虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area</p>\n<ul>\n<li><p>栈：</p>\n<ol>\n<li>栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧（用于存储局部变量、操作数、方法出口等）</li>\n<li>JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）</li>\n<li>栈属于线程私有，不能实现线程间的共享</li>\n<li>栈的存储特性是先进后出、后进先出</li>\n<li>栈由系统自动分配，速度快。栈是连续的存储空间</li>\n</ol>\n</li>\n<li><p>堆：</p>\n<ol>\n<li>堆用于存储创建好的对象和数组</li>\n<li>JVM只有一个堆，被所有线程共享</li>\n<li>堆是一个不连续的存储空间，分配灵活，速度慢</li>\n</ol>\n</li>\n<li><p>方法区（静态区）：</p>\n<ol>\n<li>JVM只有一个方法区，被所有线程共享</li>\n<li>方法区实际也是堆，只用于存储类、常量等相关信息</li>\n<li>用于存放唯一或不变的内容（类信息、静态变量、字符串常量等）</li>\n</ol>\n</li>\n</ul>\n<img src=\"/2019/07/12/java-ji-chu-shu-li/image-2.png\" class=\"\">\n\n\n\n<h2 id=\"7-继承（extends）\"><a href=\"#7-继承（extends）\" class=\"headerlink\" title=\"7. 继承（extends）\"></a>7. 继承（extends）</h2><ul>\n<li>Java只有单继承（接口有多继承）</li>\n<li>子类继承父类，可以得到父类的全部属性和方法（除了父类的构造方法和私有的属性和方法）</li>\n<li>没有extends时，则继承java.lang.Object</li>\n<li>super 直接父类对象的引用，用于访问父类中被子类覆盖的方法或属性</li>\n</ul>\n<h2 id=\"8-封装\"><a href=\"#8-封装\" class=\"headerlink\" title=\"8. 封装\"></a>8. 封装</h2><p>程序设计要求高内聚低耦合</p>\n<ul>\n<li><p>优点：</p>\n<ol>\n<li>提高代码安全性</li>\n<li>提高代码的复用性</li>\n<li>高内聚指类的内部数据操作细节已经完成，不允许外部干涉</li>\n<li>低耦合是仅暴露少量的方法给外部使用，尽量方便外部调用</li>\n</ol>\n</li>\n<li><p>访问权限：</p>\n<ol>\n<li>private 私有权限，只有自己的类能访问</li>\n<li>default 默认权限，只有同一个包的类能访问</li>\n<li>protected 受保护权限，可以被同一个包的类及其他包的子类访问</li>\n<li>public 公开权限，可以被该项目的所有包中的所有类访问</li>\n</ol>\n</li>\n<li><p>JavaBean：</p>\n<ul>\n<li><p>若干<code>private</code>实例字段</p>\n</li>\n<li><p>通过<code>public</code>  get/set方法来读写实例字段</p>\n</li>\n<li><p>枚举一个JavaBean的所有属性，可以使用Java核心库提供的Introspector（注意<code>class</code>属性是从<code>Object</code>继承的<code>getClass()</code>方法带来的。）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">BeanInfo</span> info <span class=\"token operator\">=</span> <span class=\"token class-name\">Introspector</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanInfo</span><span class=\"token punctuation\">(</span>类名<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PropertyDescriptor</span> pd  <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-多态（Polymorphic）\"><a href=\"#9-多态（Polymorphic）\" class=\"headerlink\" title=\"9. 多态（Polymorphic）\"></a>9. 多态（Polymorphic）</h2><p>同一个方法调用，由于对象不同可能会有不同的行为</p>\n<ul>\n<li>是方法的多态，与属性无关（多态与属性无关）</li>\n<li>多态的三个必要条件：继承，方法重写，父类引用指向子类对象</li>\n<li>父类引用指向子类对象后，用该父类引用调用子类重写的方法</li>\n</ul>\n<h2 id=\"10-final关键字\"><a href=\"#10-final关键字\" class=\"headerlink\" title=\"10. final关键字\"></a>10. final关键字</h2><ul>\n<li>修饰变量：被final修饰的变量不可改变，必须在创建对象时初始化，不能重新赋值</li>\n<li>修饰方法：被final修饰的方法不可被子类重写，但是可以被重载</li>\n<li>修饰类：被final修饰的类不能被继承（Math、String）</li>\n</ul>\n<h2 id=\"11-数组\"><a href=\"#11-数组\" class=\"headerlink\" title=\"11. 数组\"></a>11. 数组</h2><ul>\n<li>长度是确定的。一旦被创建，大小不可改变</li>\n<li>元素是相同数据类型</li>\n<li>数组类型可以使任意数据类型。数组本身是引用类型</li>\n</ul>\n<p>声明：声明的时候没有实例化任何对象，只有在实例化对象时JVM才分配空间。声明时数据没有真正被创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 声明：栈内存</span>\n<span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr_name<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type</span> arr_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 声明并实例化。分配空间：堆内存</span>\n<span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr_name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type</span> arr_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"12-抽象方法抽象类（abstract）\"><a href=\"#12-抽象方法抽象类（abstract）\" class=\"headerlink\" title=\"12. 抽象方法抽象类（abstract）\"></a>12. 抽象方法抽象类（abstract）</h2><ul>\n<li><p>抽象方法</p>\n<p>使用abstract修饰的方法，没有方法体只有声明，定义子类具体实现的规范</p>\n</li>\n<li><p>抽象类</p>\n<p>包含抽象方法的类（只能定义成抽象类）。不能实例化，只能用来被继承，使子类更加通用</p>\n</li>\n</ul>\n<h2 id=\"13-接口（interface）\"><a href=\"#13-接口（interface）\" class=\"headerlink\" title=\"13. 接口（interface）\"></a>13. 接口（interface）</h2><p>接口的所有方法都是抽象方法</p>\n<ul>\n<li>访问修饰符只能是public或默认</li>\n<li>可以多继承接口，extends</li>\n<li>接口中的属性只能是常量，public static final 修饰（默认）</li>\n<li>方法 public abstract修饰（默认）</li>\n<li>子类通过implements实现接口规范，并且要实现接口中所有方法（public）</li>\n<li>不能实例化</li>\n</ul>\n<h2 id=\"14-内部类（Inner-Class）\"><a href=\"#14-内部类（Inner-Class）\" class=\"headerlink\" title=\"14. 内部类（Inner Class）\"></a>14. 内部类（Inner Class）</h2><ul>\n<li><p>成员内部类</p>\n<p>  可以使用private、default、protected、public修饰，类文件：外部类$内部类.class</p>\n<ul>\n<li>非静态内部类<ol>\n<li>非静态内部类寄存在一个外部类里，非静态内部类对象一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象</li>\n<li>非静态内部类可以直接访问外部类的成员，但外部类不能直接访问非静态内部类成员</li>\n<li>非静态内部类不能有静态方法。静态属性和静态代码块</li>\n<li>外部类的静态方法。静态代码块不能访问非静态内部类，不能使用非静态内部类定义变量、创建实例</li>\n</ol>\n</li>\n<li>静态内部类<ol>\n<li>静态内部类存在时，不一定存在对应的外部类对象。静态内部类的实例方法不能直接访问外部类的实例方法</li>\n<li>静态内部类看做外部类的一个静态成员。外部类方法中可以通过 静态内部类.成员名 访问静态内部类的静态成员，通过 new 静态内部类（）常见静态内部类的实例</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>匿名内部类</p>\n<p>  适用于一次性使用的类</p>\n<p>  没有访问修饰符</p>\n<p>  没有构造方法和类名</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> 构造器<span class=\"token operator\">/</span>接口<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 实现必要的抽象方法...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>局部内部类</p>\n</li>\n</ul>\n<h2 id=\"15-常用类\"><a href=\"#15-常用类\" class=\"headerlink\" title=\"15. 常用类\"></a>15. 常用类</h2><ul>\n<li><p>包装类</p>\n<p>Byte、Boolean、Short、Character、Integer、Long、Float、Double</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 基本类型转换为包装类</span>\n<span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 包装类转换为基本类型</span>\n<span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 字符串转换为Integer</span>\n<span class=\"token class-name\">Integer</span> i4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> i5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Integer转换为字符串</span>\n<span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> i4<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int类型最大值</span>\n<span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 自动装箱</span>\n<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 自动拆箱</span>\n<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 编译通过但是空指针异常</span>\n<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>String类</p>\n<p>可变字符序列：StringBuilder不安全但效率高，StringBuffer安全但效率低（一般用StringBuilder）</p>\n</li>\n<li><p>Date类</p>\n<p>时间戳：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>DateFormat类：时间对象和指定格式的字符串相互转化。抽象类，一般需要SimpleDateFormat类实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Dateformat</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-05-21 13:14:15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>File类</p>\n<p>java.io.file</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"16-枚举\"><a href=\"#16-枚举\" class=\"headerlink\" title=\"16. 枚举\"></a>16. 枚举</h2><p>enum，本质是类，public static final 修饰</p>\n<h2 id=\"17-异常\"><a href=\"#17-异常\" class=\"headerlink\" title=\"17. 异常\"></a>17. 异常</h2><p>java.lang.throwable，两个子类Error和Exception</p>\n<img src=\"/2019/07/12/java-ji-chu-shu-li/image-3.png\" class=\"\">\n\n<ul>\n<li>catch方法。toString()，显示异常的类名和产生异常的原因</li>\n<li>catch方法。getMessage()，只显示产生异常的原因，不显示类名</li>\n<li>catch方法。printStackTrace()，跟踪异常事件发生时的堆栈内容</li>\n<li>finally语句可选，如果有的话，则不管是否发生异常都会执行</li>\n<li>try catch中存在return，执行完finally语句再通过return语句退出</li>\n<li>自定义异常，继承exception类</li>\n</ul>\n<p>Exception<br>│<br>├─ RuntimeException<br>│  │<br>│  ├─ NullPointerException<br>│  │<br>│  ├─ IndexOutOfBoundsException<br>│  │<br>│  ├─ SecurityException<br>│  │<br>│  └─ IllegalArgumentException<br>│     │<br>│     └─ NumberFormatException<br>│<br>├─ IOException<br>│  │<br>│  ├─ UnsupportedCharsetException<br>│  │<br>│  ├─ FileNotFoundException<br>│  │<br>│  └─ SocketException<br>│<br>├─ ParseException<br>│<br>├─ GeneralSecurityException<br>│<br>├─ SQLException<br>│<br>└─ TimeoutException</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA基础梳理（持续补充）\"><a href=\"#JAVA基础梳理（持续补充）\" class=\"headerlink\" title=\"JAVA基础梳理（持续补充）\"></a>JAVA基础梳理（持续补充）</h1><h2 id=\"1-JVM、JRE、JDK\"><a href=\"#1-JVM、JRE、JDK\" class=\"headerlink\" title=\"1. JVM、JRE、JDK\"></a>1. JVM、JRE、JDK</h2><ul>\n<li>JVM：虚拟的用于执行bytecode字节码的虚拟计算机</li>\n<li>JRE：JAVA运行环境，包含JAVA虚拟机、库函数、运行JAVA应用程序所必须的文件</li>\n<li>JDK：JAVA工具包，包含JRE，以及增加编译器和调试器等用于程序开发的文件</li>\n</ul>\n<img src=\"/2019/07/12/java-ji-chu-shu-li/image-1.png\" class=\"\">\n\n\n\n<h2 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h2><ul>\n<li><p>局部变量</p>\n<p>方法内部的变量。生命周期从声明到方法执行结束</p>\n</li>\n<li><p>成员变量</p>\n<p>方法外部、类内部的变量。生命周期伴随对象</p>\n</li>\n<li><p>静态变量</p>\n<p>使用static定义。从属于类，生命周期伴随类的加载到卸载。</p>\n<p>静态字段属于所有对象“共享”的变量，实际上是属于类的变量，无论修改哪个对象的静态变量，效果都是一样的：所有实例的静态变量都被修改了。所以一般访问静态变量用 类名.静态变量</p>\n</li>\n</ul>\n<h2 id=\"3-数据类型\"><a href=\"#3-数据类型\" class=\"headerlink\" title=\"3. 数据类型\"></a>3. 数据类型</h2><ul>\n<li><p>基本数据类型</p>\n<ul>\n<li><p>整数类型（byte 1字节=8位 范围-2^7~2^7-1，short 2字节，int 4字节，long 8字节）</p>\n</li>\n<li><p>浮点类型（float 4字节 范围-3.403E38<del>3.403E38，double 8字节 范围-1.798E308</del>1.798E308）</p>\n</li>\n<li><p>字符型（char 2字节）</p>\n</li>\n<li><p>布尔型（boolean 1位）</p>\n</li>\n</ul>\n</li>\n<li><p>引用数据类型（4字节，存放引用地址）</p>\n<p>class，inerface，array</p>\n</li>\n</ul>\n<h2 id=\"4-方法\"><a href=\"#4-方法\" class=\"headerlink\" title=\"4. 方法\"></a>4. 方法</h2><ul>\n<li><p>静态方法：static修饰的方法属于<code>class</code>而不属于对象。静态方法内部，无法访问<code>this</code>变量，也无法访问对象的成员变量，它只能访问静态变量和其他静态方法。常用于工具类</p>\n</li>\n<li><p>方法重载（override）：方法名相同，参数不同，构成重载</p>\n</li>\n<li><p>方法重写（override）：子类通过重写父类的方法，替换父类的行为</p>\n<ul>\n<li>方法名、形参列表相同</li>\n<li>返回值类型和异常类型，子类小于等于父类</li>\n<li>访问权限，子类大于父类</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-类与对象\"><a href=\"#5-类与对象\" class=\"headerlink\" title=\"5. 类与对象\"></a>5. 类与对象</h2><p>类可以看作对象的模板</p>\n<ul>\n<li><p>构造方法（constructor）：用于创建这个类的对象</p>\n<ol>\n<li>通过new关键字调用</li>\n<li>构造器虽然有返回值，但是不能定义返回值类型，不能在构造器内使用return返回某个值</li>\n<li>如果我们没有定义构造器，无参的构造方法由系统自动生成</li>\n<li>方法名与类名保持一致</li>\n<li>构造方法执行的第一行代码总是super();</li>\n</ol>\n</li>\n<li><p>对象转型</p>\n<ul>\n<li><p>向上转型：父类引用指向子类对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Father</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>强制向下转型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Child</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-内存分析\"><a href=\"#6-内存分析\" class=\"headerlink\" title=\"6. 内存分析\"></a>6. 内存分析</h2><p>java虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area</p>\n<ul>\n<li><p>栈：</p>\n<ol>\n<li>栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧（用于存储局部变量、操作数、方法出口等）</li>\n<li>JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）</li>\n<li>栈属于线程私有，不能实现线程间的共享</li>\n<li>栈的存储特性是先进后出、后进先出</li>\n<li>栈由系统自动分配，速度快。栈是连续的存储空间</li>\n</ol>\n</li>\n<li><p>堆：</p>\n<ol>\n<li>堆用于存储创建好的对象和数组</li>\n<li>JVM只有一个堆，被所有线程共享</li>\n<li>堆是一个不连续的存储空间，分配灵活，速度慢</li>\n</ol>\n</li>\n<li><p>方法区（静态区）：</p>\n<ol>\n<li>JVM只有一个方法区，被所有线程共享</li>\n<li>方法区实际也是堆，只用于存储类、常量等相关信息</li>\n<li>用于存放唯一或不变的内容（类信息、静态变量、字符串常量等）</li>\n</ol>\n</li>\n</ul>\n<img src=\"/2019/07/12/java-ji-chu-shu-li/image-2.png\" class=\"\">\n\n\n\n<h2 id=\"7-继承（extends）\"><a href=\"#7-继承（extends）\" class=\"headerlink\" title=\"7. 继承（extends）\"></a>7. 继承（extends）</h2><ul>\n<li>Java只有单继承（接口有多继承）</li>\n<li>子类继承父类，可以得到父类的全部属性和方法（除了父类的构造方法和私有的属性和方法）</li>\n<li>没有extends时，则继承java.lang.Object</li>\n<li>super 直接父类对象的引用，用于访问父类中被子类覆盖的方法或属性</li>\n</ul>\n<h2 id=\"8-封装\"><a href=\"#8-封装\" class=\"headerlink\" title=\"8. 封装\"></a>8. 封装</h2><p>程序设计要求高内聚低耦合</p>\n<ul>\n<li><p>优点：</p>\n<ol>\n<li>提高代码安全性</li>\n<li>提高代码的复用性</li>\n<li>高内聚指类的内部数据操作细节已经完成，不允许外部干涉</li>\n<li>低耦合是仅暴露少量的方法给外部使用，尽量方便外部调用</li>\n</ol>\n</li>\n<li><p>访问权限：</p>\n<ol>\n<li>private 私有权限，只有自己的类能访问</li>\n<li>default 默认权限，只有同一个包的类能访问</li>\n<li>protected 受保护权限，可以被同一个包的类及其他包的子类访问</li>\n<li>public 公开权限，可以被该项目的所有包中的所有类访问</li>\n</ol>\n</li>\n<li><p>JavaBean：</p>\n<ul>\n<li><p>若干<code>private</code>实例字段</p>\n</li>\n<li><p>通过<code>public</code>  get/set方法来读写实例字段</p>\n</li>\n<li><p>枚举一个JavaBean的所有属性，可以使用Java核心库提供的Introspector（注意<code>class</code>属性是从<code>Object</code>继承的<code>getClass()</code>方法带来的。）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">BeanInfo</span> info <span class=\"token operator\">=</span> <span class=\"token class-name\">Introspector</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanInfo</span><span class=\"token punctuation\">(</span>类名<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PropertyDescriptor</span> pd  <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-多态（Polymorphic）\"><a href=\"#9-多态（Polymorphic）\" class=\"headerlink\" title=\"9. 多态（Polymorphic）\"></a>9. 多态（Polymorphic）</h2><p>同一个方法调用，由于对象不同可能会有不同的行为</p>\n<ul>\n<li>是方法的多态，与属性无关（多态与属性无关）</li>\n<li>多态的三个必要条件：继承，方法重写，父类引用指向子类对象</li>\n<li>父类引用指向子类对象后，用该父类引用调用子类重写的方法</li>\n</ul>\n<h2 id=\"10-final关键字\"><a href=\"#10-final关键字\" class=\"headerlink\" title=\"10. final关键字\"></a>10. final关键字</h2><ul>\n<li>修饰变量：被final修饰的变量不可改变，必须在创建对象时初始化，不能重新赋值</li>\n<li>修饰方法：被final修饰的方法不可被子类重写，但是可以被重载</li>\n<li>修饰类：被final修饰的类不能被继承（Math、String）</li>\n</ul>\n<h2 id=\"11-数组\"><a href=\"#11-数组\" class=\"headerlink\" title=\"11. 数组\"></a>11. 数组</h2><ul>\n<li>长度是确定的。一旦被创建，大小不可改变</li>\n<li>元素是相同数据类型</li>\n<li>数组类型可以使任意数据类型。数组本身是引用类型</li>\n</ul>\n<p>声明：声明的时候没有实例化任何对象，只有在实例化对象时JVM才分配空间。声明时数据没有真正被创建</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 声明：栈内存</span>\n<span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr_name<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type</span> arr_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 声明并实例化。分配空间：堆内存</span>\n<span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr_name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type</span> arr_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"12-抽象方法抽象类（abstract）\"><a href=\"#12-抽象方法抽象类（abstract）\" class=\"headerlink\" title=\"12. 抽象方法抽象类（abstract）\"></a>12. 抽象方法抽象类（abstract）</h2><ul>\n<li><p>抽象方法</p>\n<p>使用abstract修饰的方法，没有方法体只有声明，定义子类具体实现的规范</p>\n</li>\n<li><p>抽象类</p>\n<p>包含抽象方法的类（只能定义成抽象类）。不能实例化，只能用来被继承，使子类更加通用</p>\n</li>\n</ul>\n<h2 id=\"13-接口（interface）\"><a href=\"#13-接口（interface）\" class=\"headerlink\" title=\"13. 接口（interface）\"></a>13. 接口（interface）</h2><p>接口的所有方法都是抽象方法</p>\n<ul>\n<li>访问修饰符只能是public或默认</li>\n<li>可以多继承接口，extends</li>\n<li>接口中的属性只能是常量，public static final 修饰（默认）</li>\n<li>方法 public abstract修饰（默认）</li>\n<li>子类通过implements实现接口规范，并且要实现接口中所有方法（public）</li>\n<li>不能实例化</li>\n</ul>\n<h2 id=\"14-内部类（Inner-Class）\"><a href=\"#14-内部类（Inner-Class）\" class=\"headerlink\" title=\"14. 内部类（Inner Class）\"></a>14. 内部类（Inner Class）</h2><ul>\n<li><p>成员内部类</p>\n<p>  可以使用private、default、protected、public修饰，类文件：外部类$内部类.class</p>\n<ul>\n<li>非静态内部类<ol>\n<li>非静态内部类寄存在一个外部类里，非静态内部类对象一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象</li>\n<li>非静态内部类可以直接访问外部类的成员，但外部类不能直接访问非静态内部类成员</li>\n<li>非静态内部类不能有静态方法。静态属性和静态代码块</li>\n<li>外部类的静态方法。静态代码块不能访问非静态内部类，不能使用非静态内部类定义变量、创建实例</li>\n</ol>\n</li>\n<li>静态内部类<ol>\n<li>静态内部类存在时，不一定存在对应的外部类对象。静态内部类的实例方法不能直接访问外部类的实例方法</li>\n<li>静态内部类看做外部类的一个静态成员。外部类方法中可以通过 静态内部类.成员名 访问静态内部类的静态成员，通过 new 静态内部类（）常见静态内部类的实例</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>匿名内部类</p>\n<p>  适用于一次性使用的类</p>\n<p>  没有访问修饰符</p>\n<p>  没有构造方法和类名</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> 构造器<span class=\"token operator\">/</span>接口<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 实现必要的抽象方法...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>局部内部类</p>\n</li>\n</ul>\n<h2 id=\"15-常用类\"><a href=\"#15-常用类\" class=\"headerlink\" title=\"15. 常用类\"></a>15. 常用类</h2><ul>\n<li><p>包装类</p>\n<p>Byte、Boolean、Short、Character、Integer、Long、Float、Double</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 基本类型转换为包装类</span>\n<span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 包装类转换为基本类型</span>\n<span class=\"token keyword\">int</span> i3 <span class=\"token operator\">=</span> i1<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 字符串转换为Integer</span>\n<span class=\"token class-name\">Integer</span> i4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> i5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Integer转换为字符串</span>\n<span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> i4<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// int类型最大值</span>\n<span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 自动装箱</span>\n<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 自动拆箱</span>\n<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 编译通过但是空指针异常</span>\n<span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>String类</p>\n<p>可变字符序列：StringBuilder不安全但效率高，StringBuffer安全但效率低（一般用StringBuilder）</p>\n</li>\n<li><p>Date类</p>\n<p>时间戳：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>DateFormat类：时间对象和指定格式的字符串相互转化。抽象类，一般需要SimpleDateFormat类实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Dateformat</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-05-21 13:14:15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>File类</p>\n<p>java.io.file</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件路径\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"16-枚举\"><a href=\"#16-枚举\" class=\"headerlink\" title=\"16. 枚举\"></a>16. 枚举</h2><p>enum，本质是类，public static final 修饰</p>\n<h2 id=\"17-异常\"><a href=\"#17-异常\" class=\"headerlink\" title=\"17. 异常\"></a>17. 异常</h2><p>java.lang.throwable，两个子类Error和Exception</p>\n<img src=\"/2019/07/12/java-ji-chu-shu-li/image-3.png\" class=\"\">\n\n<ul>\n<li>catch方法。toString()，显示异常的类名和产生异常的原因</li>\n<li>catch方法。getMessage()，只显示产生异常的原因，不显示类名</li>\n<li>catch方法。printStackTrace()，跟踪异常事件发生时的堆栈内容</li>\n<li>finally语句可选，如果有的话，则不管是否发生异常都会执行</li>\n<li>try catch中存在return，执行完finally语句再通过return语句退出</li>\n<li>自定义异常，继承exception类</li>\n</ul>\n<p>Exception<br>│<br>├─ RuntimeException<br>│  │<br>│  ├─ NullPointerException<br>│  │<br>│  ├─ IndexOutOfBoundsException<br>│  │<br>│  ├─ SecurityException<br>│  │<br>│  └─ IllegalArgumentException<br>│     │<br>│     └─ NumberFormatException<br>│<br>├─ IOException<br>│  │<br>│  ├─ UnsupportedCharsetException<br>│  │<br>│  ├─ FileNotFoundException<br>│  │<br>│  └─ SocketException<br>│<br>├─ ParseException<br>│<br>├─ GeneralSecurityException<br>│<br>├─ SQLException<br>│<br>└─ TimeoutException</p>\n"},{"title":"JAVA注解与反射","date":"2019-02-07T06:43:11.000Z","_content":"\n# JAVA注解与反射\n\n## 注解 - Annotation\n\n### 1. 描述\n\n- 不是程序本身，可以对程序做出解释\n- 可以被其他程序读取\n\n### 2. 格式\n\n​\t@注解名(参数值|value={\"参数值\"})\n\n### 3. 内置注解\n\n- @Override\n\n  修饰方法。表示一个方法声明打算重写父类方法\n\n- @Deprecated\n\n  修饰方法属性和类。表示不鼓励程序员使用这样的元素\n\n- SuppressWarnings\n\n  用来抑制编译时的警告信息\n  \n### 4. 元注解\n​\t负责注解其他注解\n​\t四个标准meta-annocation类型：\n\n- @Target\n\n  描述注解的使用范畴\n\n  修饰范围：\n\n  - PACKAGE 包\n  - TYPE 类、接口、枚举、Annocation\n  - CONSTRUCTOR 类构造器\n  - FIELD 域\n  - METHOD 方法\n  - LOCAL_VARIABLE 局部变量\n  - PARAMETER 参数\n\n- @Retention\n\n  表示需要在什么级别保存该注释信息，用于描述注解的生命周期\n\n  取值：\n\n  - SOURCE 源文件中有效\n  - CLASS class文件中有效\n  - RUNTIME 运行时有效，此时可以被反射机制读取（自定义一般用RUNTIME）\n\n- @Documented\n\n- @Inherited\n\n### 5. 自定义注解\n\n- @interface自动继承了java.lang.annocation.Annocation接口\n- 每一个方法实际上是声明了一个配置参数\n- 方法名称就是参数名称\n- 返回值类型就是参数的类型（只能是基本类型、Class、String、enum）\n- 可以通过default来声明参数的默认值\n- 如果只有一个参数成员，一般参数名为value\n\n\n\n### 6. 反射读取注解\n\n```java\n@TestObjectTable(\"tb_test_object\")\npublic class TestObject {\n    @TestObjectField(columnName = \"id\",type = \"int\",length = 10)\n    private int id;\n    @TestObjectField(columnName = \"name\",type = \"String\",length = 50)\n    private String name;\n}\n\n@Target(value= {ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TestObjectField {\n    String columnName();\n    String type();\n    int length();\n}\n\n@Target(value= {ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TestObjectTable {\n    String value();\n}\n\npublic static void main(String[] args) {\n    try{\n        Class clazz = Class.forName(\"MyAnnotation.TestObject\");\n        // 获得类的所有有效注解\n        Annotation[] annotations =  clazz.getAnnotations();\n        for(Annotation a:annotations){\n            System.out.println(a);\n        }\n        // 获得指定注解\n        System.out.println(clazz.getAnnotation(TestObjectTable.class));\n\n        // 获得类的属性的注解\n        Field f = clazz.getDeclaredField(\"name\");\n        TestObjectField testObjectField =  f.getAnnotation(TestObjectField.class);\n        System.out.println(testObjectField.columnName());\n        System.out.println(testObjectField.type());\n        System.out.println(testObjectField.length());\n    } catch (Exception e){\n        e.printStackTrace();\n    }\n}\n```\n\n\n\n## 反射 - reflection\n\n​\t程序在运行时加载使用编译期间完全未知的类。在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用任意一个方法和属性\n\n```\nClass c = Class.forName(\"类名包路径\"); // java.lang.Class，Reflection的根源\n```\n\n​\t类加载完后，在堆内存中生成一个Class类型的对象，包含完整的类的结构的信息\n\n- 动态语言：程序运行时可以改变程序结构和变量类型。JAVA不是动态语言但是有一定的动态性\n\n- 实现：\n\n  ```java\n  public class TestObject {\n  \n      public TestObject(){\n  \n      }\n  \n      public TestObject(int id,String name){\n          this.id = id;\n          this.name = name;\n      }\n      private int id;\n      private String name;\n  }\n  \n  public class Demo {\n      public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {\n          String path = \"Reflection.TestObject\";\n          // 方法一\n          Class clazz = Class.forName(path);\n          // 方法二\n          Class clazz2 = path.getClass();\n  \n          System.out.println(clazz);\n          // 一个类只有一个class对象\n          System.out.println(clazz == clazz2); // true\n          System.out.println(clazz.hashCode());\n          System.out.println(clazz.getName());// 获得包名\n          System.out.println(clazz.getSimpleName());// 获得类名\n          System.out.println(clazz.hashCode());\n          System.out.println(clazz.getFields().length);// 只能获得public\n          System.out.println(clazz.getDeclaredFields().length);// 获得所有字段\n          System.out.println(clazz.getDeclaredField(\"name\"));// 获得所有字段\n          System.out.println(clazz.getMethods());// 获得public方法\n          System.out.println(clazz.getDeclaredMethod(\"getName\",null));// 获得方法,参数类型区分\n          System.out.println(clazz.getDeclaredMethod(\"setName\",String.class));// 获得方法,参数类型区分\n          System.out.println(clazz.getDeclaredConstructor(int.class,String.class));// 获得有参构造器\n      }\n  }\n  \n  public class DynamicReflectionDemo {\n      public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {\n          String path = \"Reflection.TestObject\";\n          Class<TestObject> clazz = (Class<TestObject>)Class.forName(path);\n          // 通过动态调用构造方法，构造对象\n          TestObject test= clazz.newInstance(); // java bean需要无参构造器\n          System.out.println(test);\n          Constructor<TestObject> c = clazz.getDeclaredConstructor(int.class,String.class);\n          TestObject testWithParam = c.newInstance(1,\"测试\");\n          System.out.println(testWithParam.getName());// 有参构造器创建对象\n          // 通过反射API调用普通方法\n          Method method = clazz.getDeclaredMethod(\"setName\",String.class);\n          method.invoke(testWithParam,\"反射调用普通方法测试\");\n          System.out.println(testWithParam.getName());\n          // 通过反射API操作属性\n          Field f = clazz.getDeclaredField(\"name\");\n          f.setAccessible(true); // 标记不需要做安全检察，可以直接访问\n          f.set(testWithParam,\"反射操作属性测试\");\n          System.out.println(testWithParam.getName());\n      }\n  }\n  ```\n\n- setAccessible\n\n  性能问题：设为true取消安全检查，禁止安全检查可以提高反射的运行速度\n\n- 动态编译\n\n  - 通过runtime调用javac，启用新的进程取操作\n\n    ```java\n        public void runTime() throws IOException {\n            Runtime run = Runtime.getRuntime();\n            Process process = run.exec(\"java -cp d:/myjava HelloWorld\");\n            InputStream in = process.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n            String info = \"\";\n            while ((info = reader.readLine())!=null){\n                System.out.println(info);\n            }\n        }\n    ```\n\n  - javaCompiler动态编译\n\n    ```java\n        public static int compileFile(String sourceFile){\n            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n            int result = compiler.run(null,null,null,sourceFile);\n            System.out.println(result == 0?\"success\":\"failed\");\n            return result;\n        }\n    ```\n\n    ```java\n         public void reflectCompile() throws NoSuchMethodException, MalformedURLException, ClassNotFoundException, InvocationTargetException, IllegalAccessException {\n            URL[] urls = new URL[]{new URL(\"file:/\"+ \"D:/myjava/\")};\n            URLClassLoader loader = new URLClassLoader(urls);\n            Class c = loader.loadClass(\"HelloWorld\");\n            c.getMethod(\"main\",String[].class).invoke(null,(Object) new String[]{\"aa\",\"bb\"});\n        }\n    ```\n\n    \n\n","source":"_posts/JAVA注解.md","raw":"---\ntitle: JAVA注解与反射\ndate: 2019-02-07 14:43:11\ntags: JAVA\ncategories: 编程\n---\n\n# JAVA注解与反射\n\n## 注解 - Annotation\n\n### 1. 描述\n\n- 不是程序本身，可以对程序做出解释\n- 可以被其他程序读取\n\n### 2. 格式\n\n​\t@注解名(参数值|value={\"参数值\"})\n\n### 3. 内置注解\n\n- @Override\n\n  修饰方法。表示一个方法声明打算重写父类方法\n\n- @Deprecated\n\n  修饰方法属性和类。表示不鼓励程序员使用这样的元素\n\n- SuppressWarnings\n\n  用来抑制编译时的警告信息\n  \n### 4. 元注解\n​\t负责注解其他注解\n​\t四个标准meta-annocation类型：\n\n- @Target\n\n  描述注解的使用范畴\n\n  修饰范围：\n\n  - PACKAGE 包\n  - TYPE 类、接口、枚举、Annocation\n  - CONSTRUCTOR 类构造器\n  - FIELD 域\n  - METHOD 方法\n  - LOCAL_VARIABLE 局部变量\n  - PARAMETER 参数\n\n- @Retention\n\n  表示需要在什么级别保存该注释信息，用于描述注解的生命周期\n\n  取值：\n\n  - SOURCE 源文件中有效\n  - CLASS class文件中有效\n  - RUNTIME 运行时有效，此时可以被反射机制读取（自定义一般用RUNTIME）\n\n- @Documented\n\n- @Inherited\n\n### 5. 自定义注解\n\n- @interface自动继承了java.lang.annocation.Annocation接口\n- 每一个方法实际上是声明了一个配置参数\n- 方法名称就是参数名称\n- 返回值类型就是参数的类型（只能是基本类型、Class、String、enum）\n- 可以通过default来声明参数的默认值\n- 如果只有一个参数成员，一般参数名为value\n\n\n\n### 6. 反射读取注解\n\n```java\n@TestObjectTable(\"tb_test_object\")\npublic class TestObject {\n    @TestObjectField(columnName = \"id\",type = \"int\",length = 10)\n    private int id;\n    @TestObjectField(columnName = \"name\",type = \"String\",length = 50)\n    private String name;\n}\n\n@Target(value= {ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TestObjectField {\n    String columnName();\n    String type();\n    int length();\n}\n\n@Target(value= {ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface TestObjectTable {\n    String value();\n}\n\npublic static void main(String[] args) {\n    try{\n        Class clazz = Class.forName(\"MyAnnotation.TestObject\");\n        // 获得类的所有有效注解\n        Annotation[] annotations =  clazz.getAnnotations();\n        for(Annotation a:annotations){\n            System.out.println(a);\n        }\n        // 获得指定注解\n        System.out.println(clazz.getAnnotation(TestObjectTable.class));\n\n        // 获得类的属性的注解\n        Field f = clazz.getDeclaredField(\"name\");\n        TestObjectField testObjectField =  f.getAnnotation(TestObjectField.class);\n        System.out.println(testObjectField.columnName());\n        System.out.println(testObjectField.type());\n        System.out.println(testObjectField.length());\n    } catch (Exception e){\n        e.printStackTrace();\n    }\n}\n```\n\n\n\n## 反射 - reflection\n\n​\t程序在运行时加载使用编译期间完全未知的类。在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用任意一个方法和属性\n\n```\nClass c = Class.forName(\"类名包路径\"); // java.lang.Class，Reflection的根源\n```\n\n​\t类加载完后，在堆内存中生成一个Class类型的对象，包含完整的类的结构的信息\n\n- 动态语言：程序运行时可以改变程序结构和变量类型。JAVA不是动态语言但是有一定的动态性\n\n- 实现：\n\n  ```java\n  public class TestObject {\n  \n      public TestObject(){\n  \n      }\n  \n      public TestObject(int id,String name){\n          this.id = id;\n          this.name = name;\n      }\n      private int id;\n      private String name;\n  }\n  \n  public class Demo {\n      public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException {\n          String path = \"Reflection.TestObject\";\n          // 方法一\n          Class clazz = Class.forName(path);\n          // 方法二\n          Class clazz2 = path.getClass();\n  \n          System.out.println(clazz);\n          // 一个类只有一个class对象\n          System.out.println(clazz == clazz2); // true\n          System.out.println(clazz.hashCode());\n          System.out.println(clazz.getName());// 获得包名\n          System.out.println(clazz.getSimpleName());// 获得类名\n          System.out.println(clazz.hashCode());\n          System.out.println(clazz.getFields().length);// 只能获得public\n          System.out.println(clazz.getDeclaredFields().length);// 获得所有字段\n          System.out.println(clazz.getDeclaredField(\"name\"));// 获得所有字段\n          System.out.println(clazz.getMethods());// 获得public方法\n          System.out.println(clazz.getDeclaredMethod(\"getName\",null));// 获得方法,参数类型区分\n          System.out.println(clazz.getDeclaredMethod(\"setName\",String.class));// 获得方法,参数类型区分\n          System.out.println(clazz.getDeclaredConstructor(int.class,String.class));// 获得有参构造器\n      }\n  }\n  \n  public class DynamicReflectionDemo {\n      public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException {\n          String path = \"Reflection.TestObject\";\n          Class<TestObject> clazz = (Class<TestObject>)Class.forName(path);\n          // 通过动态调用构造方法，构造对象\n          TestObject test= clazz.newInstance(); // java bean需要无参构造器\n          System.out.println(test);\n          Constructor<TestObject> c = clazz.getDeclaredConstructor(int.class,String.class);\n          TestObject testWithParam = c.newInstance(1,\"测试\");\n          System.out.println(testWithParam.getName());// 有参构造器创建对象\n          // 通过反射API调用普通方法\n          Method method = clazz.getDeclaredMethod(\"setName\",String.class);\n          method.invoke(testWithParam,\"反射调用普通方法测试\");\n          System.out.println(testWithParam.getName());\n          // 通过反射API操作属性\n          Field f = clazz.getDeclaredField(\"name\");\n          f.setAccessible(true); // 标记不需要做安全检察，可以直接访问\n          f.set(testWithParam,\"反射操作属性测试\");\n          System.out.println(testWithParam.getName());\n      }\n  }\n  ```\n\n- setAccessible\n\n  性能问题：设为true取消安全检查，禁止安全检查可以提高反射的运行速度\n\n- 动态编译\n\n  - 通过runtime调用javac，启用新的进程取操作\n\n    ```java\n        public void runTime() throws IOException {\n            Runtime run = Runtime.getRuntime();\n            Process process = run.exec(\"java -cp d:/myjava HelloWorld\");\n            InputStream in = process.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n            String info = \"\";\n            while ((info = reader.readLine())!=null){\n                System.out.println(info);\n            }\n        }\n    ```\n\n  - javaCompiler动态编译\n\n    ```java\n        public static int compileFile(String sourceFile){\n            JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n            int result = compiler.run(null,null,null,sourceFile);\n            System.out.println(result == 0?\"success\":\"failed\");\n            return result;\n        }\n    ```\n\n    ```java\n         public void reflectCompile() throws NoSuchMethodException, MalformedURLException, ClassNotFoundException, InvocationTargetException, IllegalAccessException {\n            URL[] urls = new URL[]{new URL(\"file:/\"+ \"D:/myjava/\")};\n            URLClassLoader loader = new URLClassLoader(urls);\n            Class c = loader.loadClass(\"HelloWorld\");\n            c.getMethod(\"main\",String[].class).invoke(null,(Object) new String[]{\"aa\",\"bb\"});\n        }\n    ```\n\n    \n\n","slug":"JAVA注解","published":1,"updated":"2022-08-25T12:10:24.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9u000f94wa0jv94abx","content":"<h1 id=\"JAVA注解与反射\"><a href=\"#JAVA注解与反射\" class=\"headerlink\" title=\"JAVA注解与反射\"></a>JAVA注解与反射</h1><h2 id=\"注解-Annotation\"><a href=\"#注解-Annotation\" class=\"headerlink\" title=\"注解 - Annotation\"></a>注解 - Annotation</h2><h3 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h3><ul>\n<li>不是程序本身，可以对程序做出解释</li>\n<li>可以被其他程序读取</li>\n</ul>\n<h3 id=\"2-格式\"><a href=\"#2-格式\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>​    @注解名(参数值|value={“参数值”})</p>\n<h3 id=\"3-内置注解\"><a href=\"#3-内置注解\" class=\"headerlink\" title=\"3. 内置注解\"></a>3. 内置注解</h3><ul>\n<li><p>@Override</p>\n<p>修饰方法。表示一个方法声明打算重写父类方法</p>\n</li>\n<li><p>@Deprecated</p>\n<p>修饰方法属性和类。表示不鼓励程序员使用这样的元素</p>\n</li>\n<li><p>SuppressWarnings</p>\n<p>用来抑制编译时的警告信息</p>\n</li>\n</ul>\n<h3 id=\"4-元注解\"><a href=\"#4-元注解\" class=\"headerlink\" title=\"4. 元注解\"></a>4. 元注解</h3><p>​    负责注解其他注解<br>​    四个标准meta-annocation类型：</p>\n<ul>\n<li><p>@Target</p>\n<p>描述注解的使用范畴</p>\n<p>修饰范围：</p>\n<ul>\n<li>PACKAGE 包</li>\n<li>TYPE 类、接口、枚举、Annocation</li>\n<li>CONSTRUCTOR 类构造器</li>\n<li>FIELD 域</li>\n<li>METHOD 方法</li>\n<li>LOCAL_VARIABLE 局部变量</li>\n<li>PARAMETER 参数</li>\n</ul>\n</li>\n<li><p>@Retention</p>\n<p>表示需要在什么级别保存该注释信息，用于描述注解的生命周期</p>\n<p>取值：</p>\n<ul>\n<li>SOURCE 源文件中有效</li>\n<li>CLASS class文件中有效</li>\n<li>RUNTIME 运行时有效，此时可以被反射机制读取（自定义一般用RUNTIME）</li>\n</ul>\n</li>\n<li><p>@Documented</p>\n</li>\n<li><p>@Inherited</p>\n</li>\n</ul>\n<h3 id=\"5-自定义注解\"><a href=\"#5-自定义注解\" class=\"headerlink\" title=\"5. 自定义注解\"></a>5. 自定义注解</h3><ul>\n<li>@interface自动继承了java.lang.annocation.Annocation接口</li>\n<li>每一个方法实际上是声明了一个配置参数</li>\n<li>方法名称就是参数名称</li>\n<li>返回值类型就是参数的类型（只能是基本类型、Class、String、enum）</li>\n<li>可以通过default来声明参数的默认值</li>\n<li>如果只有一个参数成员，一般参数名为value</li>\n</ul>\n<h3 id=\"6-反射读取注解\"><a href=\"#6-反射读取注解\" class=\"headerlink\" title=\"6. 反射读取注解\"></a>6. 反射读取注解</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TestObjectTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_test_object\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@TestObjectField</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span>length <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@TestObjectField</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"String\"</span><span class=\"token punctuation\">,</span>length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">TestObjectField</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">columnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">TestObjectTable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyAnnotation.TestObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获得类的所有有效注解</span>\n        <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annotations <span class=\"token operator\">=</span>  clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> a<span class=\"token operator\">:</span>annotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 获得指定注解</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestObjectTable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获得类的属性的注解</span>\n        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObjectField</span> testObjectField <span class=\"token operator\">=</span>  f<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestObjectField</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObjectField<span class=\"token punctuation\">.</span><span class=\"token function\">columnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObjectField<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObjectField<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"反射-reflection\"><a href=\"#反射-reflection\" class=\"headerlink\" title=\"反射 - reflection\"></a>反射 - reflection</h2><p>​    程序在运行时加载使用编译期间完全未知的类。在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用任意一个方法和属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Class c &#x3D; Class.forName(&quot;类名包路径&quot;); &#x2F;&#x2F; java.lang.Class，Reflection的根源<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​    类加载完后，在堆内存中生成一个Class类型的对象，包含完整的类的结构的信息</p>\n<ul>\n<li><p>动态语言：程序运行时可以改变程序结构和变量类型。JAVA不是动态语言但是有一定的动态性</p>\n</li>\n<li><p>实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"Reflection.TestObject\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 方法一</span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 方法二</span>\n        <span class=\"token class-name\">Class</span> clazz2 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 一个类只有一个class对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz <span class=\"token operator\">==</span> clazz2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得包名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得类名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只能获得public</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得所有字段</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得所有字段</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得public方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getName\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得方法,参数类型区分</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setName\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得方法,参数类型区分</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得有参构造器</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicReflectionDemo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"Reflection.TestObject\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过动态调用构造方法，构造对象</span>\n        <span class=\"token class-name\">TestObject</span> test<span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// java bean需要无参构造器</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObject</span> testWithParam <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有参构造器创建对象</span>\n        <span class=\"token comment\">// 通过反射API调用普通方法</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setName\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">,</span><span class=\"token string\">\"反射调用普通方法测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过反射API操作属性</span>\n        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标记不需要做安全检察，可以直接访问</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">,</span><span class=\"token string\">\"反射操作属性测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>setAccessible</p>\n<p>性能问题：设为true取消安全检查，禁止安全检查可以提高反射的运行速度</p>\n</li>\n<li><p>动态编译</p>\n<ul>\n<li><p>通过runtime调用javac，启用新的进程取操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Runtime</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java -cp d:/myjava HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>javaCompiler动态编译</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">JavaCompiler</span> compiler <span class=\"token operator\">=</span> <span class=\"token class-name\">ToolProvider</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemJavaCompiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token string\">\"success\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflectCompile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n    URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:/\"</span><span class=\"token operator\">+</span> <span class=\"token string\">\"D:/myjava/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">URLClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLClassLoader</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA注解与反射\"><a href=\"#JAVA注解与反射\" class=\"headerlink\" title=\"JAVA注解与反射\"></a>JAVA注解与反射</h1><h2 id=\"注解-Annotation\"><a href=\"#注解-Annotation\" class=\"headerlink\" title=\"注解 - Annotation\"></a>注解 - Annotation</h2><h3 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h3><ul>\n<li>不是程序本身，可以对程序做出解释</li>\n<li>可以被其他程序读取</li>\n</ul>\n<h3 id=\"2-格式\"><a href=\"#2-格式\" class=\"headerlink\" title=\"2. 格式\"></a>2. 格式</h3><p>​    @注解名(参数值|value={“参数值”})</p>\n<h3 id=\"3-内置注解\"><a href=\"#3-内置注解\" class=\"headerlink\" title=\"3. 内置注解\"></a>3. 内置注解</h3><ul>\n<li><p>@Override</p>\n<p>修饰方法。表示一个方法声明打算重写父类方法</p>\n</li>\n<li><p>@Deprecated</p>\n<p>修饰方法属性和类。表示不鼓励程序员使用这样的元素</p>\n</li>\n<li><p>SuppressWarnings</p>\n<p>用来抑制编译时的警告信息</p>\n</li>\n</ul>\n<h3 id=\"4-元注解\"><a href=\"#4-元注解\" class=\"headerlink\" title=\"4. 元注解\"></a>4. 元注解</h3><p>​    负责注解其他注解<br>​    四个标准meta-annocation类型：</p>\n<ul>\n<li><p>@Target</p>\n<p>描述注解的使用范畴</p>\n<p>修饰范围：</p>\n<ul>\n<li>PACKAGE 包</li>\n<li>TYPE 类、接口、枚举、Annocation</li>\n<li>CONSTRUCTOR 类构造器</li>\n<li>FIELD 域</li>\n<li>METHOD 方法</li>\n<li>LOCAL_VARIABLE 局部变量</li>\n<li>PARAMETER 参数</li>\n</ul>\n</li>\n<li><p>@Retention</p>\n<p>表示需要在什么级别保存该注释信息，用于描述注解的生命周期</p>\n<p>取值：</p>\n<ul>\n<li>SOURCE 源文件中有效</li>\n<li>CLASS class文件中有效</li>\n<li>RUNTIME 运行时有效，此时可以被反射机制读取（自定义一般用RUNTIME）</li>\n</ul>\n</li>\n<li><p>@Documented</p>\n</li>\n<li><p>@Inherited</p>\n</li>\n</ul>\n<h3 id=\"5-自定义注解\"><a href=\"#5-自定义注解\" class=\"headerlink\" title=\"5. 自定义注解\"></a>5. 自定义注解</h3><ul>\n<li>@interface自动继承了java.lang.annocation.Annocation接口</li>\n<li>每一个方法实际上是声明了一个配置参数</li>\n<li>方法名称就是参数名称</li>\n<li>返回值类型就是参数的类型（只能是基本类型、Class、String、enum）</li>\n<li>可以通过default来声明参数的默认值</li>\n<li>如果只有一个参数成员，一般参数名为value</li>\n</ul>\n<h3 id=\"6-反射读取注解\"><a href=\"#6-反射读取注解\" class=\"headerlink\" title=\"6. 反射读取注解\"></a>6. 反射读取注解</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TestObjectTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_test_object\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@TestObjectField</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">,</span>length <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@TestObjectField</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"String\"</span><span class=\"token punctuation\">,</span>length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">TestObjectField</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">columnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">TestObjectTable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyAnnotation.TestObject\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获得类的所有有效注解</span>\n        <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annotations <span class=\"token operator\">=</span>  clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> a<span class=\"token operator\">:</span>annotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 获得指定注解</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestObjectTable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获得类的属性的注解</span>\n        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObjectField</span> testObjectField <span class=\"token operator\">=</span>  f<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestObjectField</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObjectField<span class=\"token punctuation\">.</span><span class=\"token function\">columnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObjectField<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObjectField<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"反射-reflection\"><a href=\"#反射-reflection\" class=\"headerlink\" title=\"反射 - reflection\"></a>反射 - reflection</h2><p>​    程序在运行时加载使用编译期间完全未知的类。在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能调用任意一个方法和属性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Class c &#x3D; Class.forName(&quot;类名包路径&quot;); &#x2F;&#x2F; java.lang.Class，Reflection的根源<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​    类加载完后，在堆内存中生成一个Class类型的对象，包含完整的类的结构的信息</p>\n<ul>\n<li><p>动态语言：程序运行时可以改变程序结构和变量类型。JAVA不是动态语言但是有一定的动态性</p>\n</li>\n<li><p>实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObject</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"Reflection.TestObject\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 方法一</span>\n        <span class=\"token class-name\">Class</span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 方法二</span>\n        <span class=\"token class-name\">Class</span> clazz2 <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 一个类只有一个class对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz <span class=\"token operator\">==</span> clazz2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得包名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得类名</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只能获得public</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得所有字段</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得所有字段</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得public方法</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getName\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得方法,参数类型区分</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setName\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得方法,参数类型区分</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得有参构造器</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicReflectionDemo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"Reflection.TestObject\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过动态调用构造方法，构造对象</span>\n        <span class=\"token class-name\">TestObject</span> test<span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// java bean需要无参构造器</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObject</span> testWithParam <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有参构造器创建对象</span>\n        <span class=\"token comment\">// 通过反射API调用普通方法</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setName\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">,</span><span class=\"token string\">\"反射调用普通方法测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过反射API操作属性</span>\n        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标记不需要做安全检察，可以直接访问</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">,</span><span class=\"token string\">\"反射操作属性测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testWithParam<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>setAccessible</p>\n<p>性能问题：设为true取消安全检查，禁止安全检查可以提高反射的运行速度</p>\n</li>\n<li><p>动态编译</p>\n<ul>\n<li><p>通过runtime调用javac，启用新的进程取操作</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Runtime</span> run <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> run<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java -cp d:/myjava HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>info <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>javaCompiler动态编译</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">JavaCompiler</span> compiler <span class=\"token operator\">=</span> <span class=\"token class-name\">ToolProvider</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemJavaCompiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>sourceFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token string\">\"success\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflectCompile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span>\n    URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:/\"</span><span class=\"token operator\">+</span> <span class=\"token string\">\"D:/myjava/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">URLClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLClassLoader</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n"},{"title":"设计模式（Group Of Four 23）【待补充】","date":"2021-10-12T08:24:43.000Z","_content":"\n# 设计模式（Group Of Four 23）【待补充】\n\n## 设计模式分类\n\n- 创建者模式\n\n  单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式\n\n- 结构型模式\n\n  适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式\n\n- 行为型模式\n\n  模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式\n\n## 创建者模式\n\n### 单例模式 - Singleton\n\n1. 作用：保证一个类只有一个实例对象，并且提供一个访问该实例的全局访问点（方法）\n\n2. 应用场景：Spring中的每个bean；数据库连接池的设计；windows任务管理器；Windows回收站\n\n3. 优点：\n\n   - 只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，则在应用启动时产生一个单例对象，然后永久存在内存中\n\n   - 在系统设置全局访问点，优化环共享资源访问\n\n4. 常见的实现方式\n\n   - 饿汉式（线程安全、调用效率高。但是，不能延时加载）\n\n     ```java\n     /*\n         饿汉式单例实现：\n         1. 私有化构造器\n         2. 提供一个私有的static变量，存放唯一对象\n         3. 提供开放的方法访问对象\n     * */\n     public class SingletonDemo1 {\n         // 类初始化时。立即加载这个对象。存在问题：如果不调用getInstance()则会造成资源浪费\n         private static /*final*/ SingletonDemo1 instance = new SingletonDemo1();\n         private SingletonDemo1(){\n     \n         }\n     \n         // static变量在类加载时初始化,不会发生并发访问的问题\n         public static /*synchronized*/ SingletonDemo1 getInstance(){\n             return instance;\n         }\n     }\n     ```\n\n   - 懒汉式（线程安全、调用效率不高。但是，能延时加载）\n\n     ```java\n     /*\n         懒汉式单例实现：\n         1. 提供一个私有的不初始化static变量，\n         2. 私有化构造器\n         3. 调用getInstance时new一个对象\n     * */\n     public class SingletonDemo2 {\n         // 延迟加载\n         private static SingletonDemo2 instance;\n     \n         private SingletonDemo2(){\n     \n         }\n         //每次调用getInstance()都要同步，并发效率低\n         public static synchronized SingletonDemo2 getInstance(){\n             if(instance == null){\n                 instance = new SingletonDemo2();\n             }\n             return instance;\n         }\n     }\n     ```\n\n   - 双重检测锁式（JVM底层内部的原因，不建议使用）\n\n   - 静态内部类式（线程安全、调用效率高。能延时加载）\n\n     ```java\n     /*\n         静态内部类单例实现：\n         1. 私有化构造器\n         2. 创建静态内部类，在其中提供一个私有的static变量，存放唯一对象\n         3. 提供开放的方法访问对象\n     * */\n     public class SingletonDemo3 {\n         // 外部类没有static属性，则不会立即加载对象，也不会加载静态内部类\n         private static class SingletonClassInstance{\n             // 调用时加载静态内部类，加载类时天然线程安全。instance是static final修饰，保证内存中只有一个实例存在并且不能被修改\n             private static final SingletonDemo3 instance = new SingletonDemo3();\n         }\n     \n         private SingletonDemo3(){\n     \n         }\n     \n         public static SingletonDemo3 getInstance(){\n             return SingletonClassInstance.instance;\n         }\n     }\n     ```\n\n   - 枚举单例（线程安全、调用效率高。但是，不能延时加载。避免通过反射和序列化产生的漏洞）\n\n     ```java\n     /*\n         枚举式单例实现：\n         1. 定义一个枚举的元素\n     * */\n     public enum SingletonDemo4 {\n         // 枚举类即单例模式。定义一个枚举的元素，代表一个实例\n         INSTANCE;\n     \n         public void singletonOperation(){\n             // 对实例的操作\n         }\n     }\n     ```\n\n5. 选用\n\n   单例对象 占用资源少，不需要延时加载：枚举式好于饿汉式\n\n   单例对象 占用资源大，需要延时加载：静态内部类式好于懒汉式\n\n6. 反射反序列化测试单例漏洞（枚举类型除外）\n\n   - 反射\n\n       ```java\n               Class<SingletonDemo1> clazz = (Class<SingletonDemo1>) \t\tClass.forName(\"SingletonDemo.ehan.SingletonDemo1\");\n               Constructor<SingletonDemo1> c = clazz.getDeclaredConstructor(null);\n               c.setAccessible(true);\n               SingletonDemo1 a =c.newInstance();\n               SingletonDemo1 b =c.newInstance();\n               System.out.println(a == b); // false,两个不同的对象\n       ```\n\n   \t解决：私有化构造器加入异常判断\n\n       ```java\n       private SingletonDemo1(){\n           if(instance != null){\n               throw new RuntimeException();\n           }\n       }\n       ```\n   \n   - 反序列化\n   \n     ```java\n     // SingletonDemo1需要实现Serializable\n     SingletonDemo1 a = SingletonDemo1.getInstance();\n     // 序列化\n     FileOutputStream fos = new FileOutputStream(\"d:/a.txt\");\n     ObjectOutputStream oos = new ObjectOutputStream(fos);\n     oos.writeObject(a);\n     oos.close();\n     fos.close();\n     // 反序列化\n     ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"d:/a.txt\"));\n     SingletonDemo1 b = (SingletonDemo1)ois.readObject();\n     System.out.println(a == b); // false\n     ```\n   \n     解决：添加readResolve方法\n   \n     ```java\n     // 反序列化时，返回单例对象\n     private Object readResolve() throws ObjectStreamException{\n     \treturn instance;\n     }\n     ```\n\n\n\n### 工厂模式 - Factory\n\n1. 作用：实现了创建者和调用者的分离\n\n2. 面向对象设计的基本原则：\n   - OCP开闭原则（open-closed principle）：一个软件的实体应该对扩展开放，对修改关闭\n   - DIP依赖倒转原则（dependence inversionprinciple）：针对接口编程，不要针对实现编程\n   - LOD迪米特原则（Law of Demeter）：只与你直接的朋友通信，而避免与陌生人通信\n\n2. 应用场景：Calender的getInstance方法；JDBC中connection对象的获取\n   \n3. 实现方式\n\n   - 简单工厂模式（静态工厂模式）\n\n     描述：工厂类一般使用静态方法，通过接收的参数不同来返回不同的对象实例\n\n     问题：对于增加新产品，不修改代码的话无法扩展（不满足OCP）\n\n     ```java\n     public class TestObjectSimpleFactory {\n         public static TestObject createTestObject(String type){\n             if(type.equals(\"one\")){\n                 return new ChildObjectOne();\n             } else if(type.equals(\"two\")) {\n                 return new ChildObjectTwo();\n             }\n             return null;\n         }\n     }\n     public class client {\n         public static void main(String[] args) {\n             TestObject a = TestObjectSimpleFactory.createTestObject(\"one\");\n             TestObject b = TestObjectSimpleFactory.createTestObject(\"two\");\n             a.run();\n             b.run();\n         }\n     }\n     ```\n\n   - 工厂方法模式\n\n     描述：简单工厂模式只有一个工厂类，工厂方法模式有一组实现了相同接口的工厂类\n\n     ```java\n     public interface TestObjectMethodFactory {\n         TestObject createTestObject();\n     }\n     \n     public class ChildObjectOneFactory implements TestObjectMethodFactory {\n         @Override\n         public TestObject createTestObject  () {\n             return new ChildObjectOne();\n         }\n     }\n     \n     public class ChildObjectTwoFactory implements TestObjectMethodFactory {\n         @Override\n         public TestObject createTestObject  () {\n             return new ChildObjectTwo();\n         }\n     }\n     \n     public static void main(String[] args) {\n         TestObject a = new ChildObjectOneFactory().createTestObject();\n         TestObject b = new ChildObjectTwoFactory().createTestObject();\n         a.run();\n         b.run();\n     }\n     ```\n   \n   - 抽象工厂模式\n   \n     描述：用来生产不同产品族的全部产品。是工厂方法模式的升级版本。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n   \n     问题：对于增加新的产品，无能为力。支持增加产品族\n   \n     ```java\n     public interface TestObjectOne {\n         public void runOne();\n     \n         public void runTwo();\n     }\n     \n     public class TestObjectOneHigher implements TestObjectOne {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectOneHigher runOne\");\n         }\n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectOneHigher runTwo\");\n         }\n     }\n     \n     public class TestObjectOneLower implements TestObjectOne {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectOneLower runOne\");\n         }\n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectOneLower runTwo\");\n         }\n     }\n     \n     public interface TestObjectTwo {\n         public void runOne();\n     \n         public void runTwo();\n     }\n     \n     public class TestObjectTwoHigher implements TestObjectTwo {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectTwoHigher runOne\");\n         }\n     \n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectTwoHigher runTwo\");\n         }\n     }\n     \n     public class TestObjectTwoLower implements TestObjectTwo {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectTwo runOne\");\n         }\n     \n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectTwo runTwo\");\n         }\n     }\n     \n     public interface TestAbstractFactory {\n         TestObjectOne createTestObjectOne();\n     \n         TestObjectTwo createTestObjectTwo();\n     }\n     \n     public class TestHigherFactory implements TestAbstractFactory {\n         @Override\n         public TestObjectOne createTestObjectOne() {\n             return new TestObjectOneHigher();\n         }\n     \n         @Override\n         public TestObjectTwo createTestObjectTwo() {\n             return new TestObjectTwoHigher();\n         }\n     }\n     \n     public class TestLowerFactory implements TestAbstractFactory{\n     \n         @Override\n         public TestObjectOne createTestObjectOne() {\n             return new TestObjectOneLower();\n         }\n     \n         @Override\n         public TestObjectTwo createTestObjectTwo() {\n             return new TestObjectTwoLower();\n         }\n     }\n     \n     public class client {\n         public static void main(String[] args) {\n             TestAbstractFactory lowerFactory = new TestLowerFactory();\n             TestAbstractFactory higherFactory = new TestHigherFactory();\n             TestObjectOne a = lowerFactory.createTestObjectOne();\n             TestObjectOne b = higherFactory.createTestObjectOne();\n     \n             a.runOne();\n             a.runTwo();\n             b.runOne();\n             b.runTwo();\n         }\n     }\n     ```\n   \n     \n\n4. 比较：\n\n   简单工厂模式：结构复杂度更低\n\n   工厂方法模式：代码复杂度更低\n\n   设计理论工厂方法模式更优，但一般选择简单工厂模式\n\n\n\n### 建造者模式 - Builder\n\n1. 作用：实现了构建（Builder）和装配（Director）的解耦，从而构造出复杂的对象。实现了构建算法、装配算法的解耦，实现更好的复用。\n\n2. 应用场景：StringBuilder的append方法；SQL的preparedStatement；\n\n3. 实现：\n\n   ```\n   public class TestObject {\n   \n       private ComponentA componentA;\n   \n       private ComponentB componentB;\n   }\n   \n   public class ComponentA {\n   \n       public ComponentA(String a){\n           this.a = a;\n       }\n       private String a;\n   }\n   \n   public class ComponentB {\n   \n       public ComponentB(String b){\n           this.b = b;\n       }\n       private String b;\n   }\n   \n   public interface TestObjectBuilder {\n   \n       ComponentA builderComponentA();\n   \n       ComponentB builderComponentB();\n   }\n   \n   public class TestObjectBuilderImpl implements TestObjectBuilder{\n       @Override\n       public ComponentA builderComponentA() {\n           System.out.println(\"构建组件A\");\n           return new ComponentA(\"组件A\");\n       }\n   \n       @Override\n       public ComponentB builderComponentB() {\n           System.out.println(\"构建组件B\");\n           return new ComponentB(\"组件B\");\n       }\n   }\n   \n   public interface TestObjectDirector {\n   \n       TestObject directorTestObject();\n   }\n   \n   public class TestObjectDirectorImpl implements TestObjectDirector{\n   \n       private TestObjectBuilder builder;\n   \n       public TestObjectDirectorImpl(TestObjectBuilder builder){\n           this.builder = builder;\n       }\n   \n       @Override\n       public TestObject directorTestObject() {\n           ComponentA a = builder.builderComponentA();\n           ComponentB b = builder.builderComponentB();\n           TestObject t = new TestObject();\n           t.setComponentA(a);\n           t.setComponentB(b);\n           return t;\n       }\n   }\n   ```\n\n   \n\n### 原型模式 - Prototype\n\n1. 作用：以某个对象为原型，复制出新的对象。新的对象具备原型对象的特点。解决产生一个对象需要繁琐的数据准备和访问权限的问题。一般和工厂方法模式一起使用\n\n2. 应用场景：Cloneable接口和clone方法\n\n3. 优点：效率高，避免了重新执行构造过程的步骤\n\n4. 实现方式：\n\n   ```java\n   public class ShallowCloneObject implements Cloneable,Serializable{\n       private String name;\n   \n       private Date createTime;\n   \n       public ShallowCloneObject(String name, Date createTime){\n           this.name = name;\n           this.createTime = createTime;\n       }\n   \n       @Override\n       protected Object clone() throws CloneNotSupportedException {\n           return super.clone();\n       }\n   }\n   \n   public class DeepCloneObject implements Cloneable{\n   \n       private String name;\n   \n       private Date createTime;\n   \n       public DeepCloneObject(String name, Date createTime){\n           this.name = name;\n           this.createTime = createTime;\n       }\n   \n       @Override\n       protected Object clone() throws CloneNotSupportedException {\n           Object object = super.clone();\n           DeepCloneObject deepCloneObject = (DeepCloneObject) object;\n           deepCloneObject.createTime = ((Date) this.createTime.clone());\n           return object;\n       }\n   }\n   \n   public static void main(String[] args) throws CloneNotSupportedException {\n       // 浅克隆，克隆对象的时间字段与原型对象指向同一个date，修改后互相影响\n       System.out.println(\"浅克隆--------------------------\");\n       Date date1 = new Date();\n       ShallowCloneObject s = new ShallowCloneObject(\"原型对象\",date1);\n       System.out.println(s.getName() + s.getCreateTime());\n       ShallowCloneObject shallowCloneObject = (ShallowCloneObject)s.clone();\n       System.out.println(shallowCloneObject.getName() + shallowCloneObject.getCreateTime());\n       shallowCloneObject.setName(\"克隆对象\");\n       date1.setTime(1000000000000L);\n       System.out.println(s.getName() + s.getCreateTime());\n       System.out.println(shallowCloneObject.getName() + shallowCloneObject.getCreateTime());\n   \n       // 深复制\n       System.out.println(\"深复制--------------------------\");\n       Date date2 = new Date();\n       DeepCloneObject d = new DeepCloneObject(\"原型对象\",date2);\n       System.out.println(d.getName() + d.getCreateTime());\n       DeepCloneObject deepCloneObject = (DeepCloneObject)d.clone();\n       System.out.println(deepCloneObject.getName() + deepCloneObject.getCreateTime());\n       deepCloneObject.setName(\"克隆对象\");\n       date2.setTime(1000000000000L);\n       System.out.println(d.getName() + d.getCreateTime());\n       System.out.println(deepCloneObject.getName() + deepCloneObject.getCreateTime());\n   }\n   \n   public static void main(String[] args) throws IOException, ClassNotFoundException {\n       // 使用序列化和反序列化\n       Date date = new Date();\n       ShallowCloneObject s = new ShallowCloneObject(\"原型对象\",date);\n       ByteArrayOutputStream bos = new ByteArrayOutputStream();\n       ObjectOutputStream oos = new ObjectOutputStream(bos);\n       oos.writeObject(s);\n       byte[] bytes = bos.toByteArray();\n       ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n       ObjectInputStream ois = new ObjectInputStream(bis);\n       ShallowCloneObject deepCloneBySerialization = (ShallowCloneObject)ois.readObject();\n       System.out.println(s.getName() + s.getCreateTime());\n       System.out.println(deepCloneBySerialization.getName() + deepCloneBySerialization.getCreateTime());\n       date.setTime(12121212121212L);\n       System.out.println(s.getName() + s.getCreateTime());\n       System.out.println(deepCloneBySerialization.getName() + deepCloneBySerialization.getCreateTime());\n   }\n   ```\n\n\n\n## 结构型模式\n\n### 适配器模式-Adapter\n\n1. 描述：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的类可以一起工作\n\n2. 应用场景：旧系统升级改造；java.io.InputStreamReader(InputStream)；java.io.OutputStreamWriter(OutputStream);\n\n3. 角色：\n\n   - 被适配的类 - Adaptee：持有既定方法，需要适配\n   - 适配器 - Adapter：使用Adaptee的方法满足Target需求\n   - 目标类 - Target：定义所需的方法\n\n4. 实现方式：\n\n   ```java\n   /*\n   * 被适配的类\n   * */\n   public class Adaptee {\n   \n       public void request(){\n           System.out.println(\"被适配的类提供客户端需要的功能\");\n       }\n   }\n   \n   /*\n   * 适配器(类适配器方式)\n   * */\n   public class Adapter extends Adaptee implements Target{\n       @Override\n       public void handleRequest() {\n           super.request();\n       }\n   }\n   \n   /*\n    * 适配器(对象适配器方式)\n    * */\n   public class Adapter2 implements Target{\n   \n       private Adaptee adaptee;\n   \n       public Adapter2(Adaptee a){\n           super();\n           this.adaptee = a;\n       }\n       @Override\n       public void handleRequest() {\n           adaptee.request();\n       }\n   }\n   \n   public interface Target {\n       void handleRequest();\n   }\n   \n   public class Client {\n       public void test(Target t){\n           t.handleRequest();\n       }\n   \n       public static void main(String[] args) {\n           // 1. 类适配器\n           Client c1 = new Client();\n           Target t1 = new Adapter();\n           c1.test(t1);\n           // 2. 对象组合适配器\n           Client c2 = new Client();\n           Adaptee a = new Adaptee();\n           Target t2 = new Adapter2(a);\n           c2.test(t2);\n       }\n   }\n   ```\n\n\n\n### 代理模式 - Proxy\n\n1. 描述：通过代理控制对对象的访问，在调用某个对象方法前做前置处理，调用过后做后置处理。将统一的流程控制放在代理类中处理\n\n2. 应用场景：数据库连接池关闭处理；mybatis实现拦截器插件\n\n   - 安全代理：屏蔽对真实角色的直接访问\n   - 远程代理：通过代理类处理远程方法调用（RMI）\n   - 延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象\n\n3. 角色：\n\n   - 抽象的角色 - Subject：定义了使Proxy和RealSubject具有一致性的接口\n   - 代理人 - Proxy：实现了Subject接口，尽量代替真实角色处理请求，处理不了再转给RealSubject\n   - 真实角色 - RealSubject：实现了Subject接口，必要时处理请求\n\n4. 实现方式：\n\n   - 静态代理\n\n     ```java\n     public interface AbstractRole {\n     \n         void step1();\n     \n         void step2();\n     \n         void step3();\n     }\n     \n     public class RealRole implements AbstractRole{\n         @Override\n         public void step1() {\n             System.out.println(\"真实角色-步骤1\");\n         }\n     \n         @Override\n         public void step2() {\n             System.out.println(\"真实角色-步骤2\");\n         }\n     \n         @Override\n         public void step3() {\n             System.out.println(\"真实角色-步骤3,代理角色没有的方法\");\n         }\n     }\n     \n     public class ProxyRole implements AbstractRole{\n     \n         AbstractRole abstractRole;\n     \n         public ProxyRole(AbstractRole abstractRole){\n             super();\n             this.abstractRole = abstractRole;\n         }\n     \n         @Override\n         public void step1() {\n             System.out.println(\"代理角色-步骤1,代替真实角色执行\");\n         }\n     \n         @Override\n         public void step2() {\n             System.out.println(\"代理角色-步骤2,代替真实角色执行\");\n         }\n     \n         @Override\n         public void step3() {\n             abstractRole.step3();\n         }\n     }\n     \n     public class Client {\n         public static void main(String[] args) {\n             AbstractRole realRole = new RealRole();\n             AbstractRole proxyRole = new ProxyRole(realRole);\n             proxyRole.step1();\n             proxyRole.step2();\n             proxyRole.step3();\n         }\n     }\n     ```\n\n   - 动态代理（JDK实现）\n\n     java.lang.reflect.Proxy：动态生成代理类和对象\n\n     java.lang.reflect.InvocationHandler：处理器接口\n\n     ```java\n     public interface AbstractRole {\n     \n         void step1();\n     \n         void step2();\n     \n         void step3();\n     }\n     \n     public class RealRole implements AbstractRole {\n         @Override\n         public void step1() {\n             System.out.println(\"真实角色-步骤1\");\n         }\n     \n         @Override\n         public void step2() {\n             System.out.println(\"真实角色-步骤2\");\n         }\n     \n         @Override\n         public void step3() {\n             System.out.println(\"真实角色-步骤3,代理角色没有的方法\");\n         }\n     }\n     \n     public class AbstractRoleHandler implements InvocationHandler {\n         AbstractRole abstractRole;\n     \n         public AbstractRoleHandler(AbstractRole abstractRole){\n             this.abstractRole = abstractRole;\n         }\n     \n         @Override\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n             System.out.println(\"invoke流程控制\");\n             Object object = null;\n             System.out.println(\"真实角色方法执行前\");\n             if(method.getName().equals(\"step3\")){\n                 object = method.invoke(abstractRole,args);\n             }\n             System.out.println(\"真实角色方法执行后\");\n             return object;\n         }\n     }\n     \n     public class Client {\n         public static void main(String[] args) {\n             AbstractRole realRole = new RealRole();\n             AbstractRoleHandler handler = new AbstractRoleHandler(realRole);\n             AbstractRole proxyRole= (AbstractRole)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{AbstractRole.class},handler);\n             proxyRole.step3();\n     \n         }\n     }\n     ```\n\n5. 比较：\n\n   动态代理的优点：抽象角色中声明的所有方法都被转移到调用处理器一个集中的方法中处理，可以更加灵活和统一地处理众多的方法\n\n\n\n### 桥接模式 - Bridge\n\n1. 描述：处理多层继承结构，处理多个维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立地扩展\n\n2. 应用场景：JDBC驱动程序\n\n3. 角色：\n\n4. 实现方式：\n\n   ```java\n   public interface Veidoo1 {\n       void veidoo1Method();\n   }\n   \n   public class Veidoo2 {\n       protected Veidoo1 veidoo1;\n   \n       public Veidoo2(Veidoo1 veidoo1){\n           this.veidoo1 = veidoo1;\n       }\n   \n       public void veidoo2Method(){\n           veidoo1.veidoo1Method();\n       }\n   }\n   \n   public class Veidoo1Classify1 implements Veidoo1{\n       @Override\n       public void veidoo1Method() {\n           System.out.println(\"#####################\");\n           System.out.println(\"Veidoo1Classify1\");\n       }\n   }\n   \n   public class Veidoo1Classify2 implements Veidoo1{\n       @Override\n       public void veidoo1Method() {\n           System.out.println(\"#####################\");\n           System.out.println(\"Veidoo1Classify2\");\n       }\n   }\n   \n   public class Veidoo2Classify1 extends Veidoo2{\n   \n       public Veidoo2Classify1(Veidoo1 veidoo1){\n           super(veidoo1);\n       }\n   \n       @Override\n       public void veidoo2Method(){\n           super.veidoo2Method();\n           System.out.println(\"Veidoo2Classify1\");\n       }\n   }\n   \n   public class Veidoo2Classify2 extends Veidoo2{\n   \n       public Veidoo2Classify2(Veidoo1 veidoo1){\n           super(veidoo1);\n       }\n   \n       @Override\n       public void veidoo2Method(){\n           super.veidoo2Method();\n           System.out.println(\"Veidoo2Classify2\");\n       }\n   }\n   \n   public class Client {\n       public static void main(String[] args) {\n           Veidoo2 o1 = new Veidoo2Classify1(new Veidoo1Classify1());\n           Veidoo2 o2 = new Veidoo2Classify2(new Veidoo1Classify1());\n           Veidoo2 o3 = new Veidoo2Classify1(new Veidoo1Classify2());\n           Veidoo2 o4 = new Veidoo2Classify2(new Veidoo1Classify2());\n           o1.veidoo2Method();\n           o2.veidoo2Method();\n           o3.veidoo2Method();\n           o4.veidoo2Method();\n       }\n   }\n   ```\n\n   \n\n### 组合模式 - Composite\n\n1. 描述：把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象\n\n2. 角色：\n   - 抽象构件角色 - Component：定义了叶子和容器构件的共同点\n   - 叶子构件角色 - Leaf：无子节点\n   - 容器构件角色 - Composite：有容器特征，可以包含子节点\n\n3. 应用场景：操作系统的资源管理器；xml文件解析；oa组织树\n\n4. 实现方式：\n\n   ```java\n   public interface Component {\n       void operation();\n   }\n   \n   public class CompositeImpl implements Component{\n       private String name;\n       private List<Component> list = new ArrayList<>();\n   \n       public CompositeImpl(String name) {\n           this.name = name;\n       }\n   \n       public void add(Component component){\n           list.add(component);\n       }\n   \n       public void remove(Component component){\n           list.remove(component);\n       }\n   \n       public Component getChild(int index){\n           return list.get(index);\n       }\n   \n       @Override\n       public void operation() {\n           System.out.println(\"CompositeImpl\"+name);\n           for(Component c:list){\n               c.operation();\n           }\n       }\n   }\n   public class LeafOneImpl implements Component{\n       private String name;\n   \n       public LeafOneImpl(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public void operation() {\n           System.out.println(\"ComponentImpl \" + name);\n       }\n   \n       public String getName() {\n           return name;\n       }\n   \n       public void setName(String name) {\n           this.name = name;\n       }\n   }\n   \n   public class LeafTwoImpl implements Component{\n       private String name;\n   \n       public LeafTwoImpl(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public void operation() {\n           System.out.println(\"ComponentTwoImpl \" + name);\n       }\n   \n       public String getName() {\n           return name;\n       }\n   \n       public void setName(String name) {\n           this.name = name;\n       }\n   }\n   \n   public class Client {\n       public static void main(String[] args) {\n           Component c1 = new LeafOneImpl(\"叶子节点1\");\n           Component c2 = new LeafTwoImpl(\"叶子节点2\");\n           CompositeImpl c3 = new CompositeImpl(\"容器节点\");\n           CompositeImpl c4 = new CompositeImpl(\"子容器节点\");\n   \n           c3.add(c1);\n           c4.add(c2);\n           c2.operation();\n           c3.operation();\n       }\n   }\n   ```\n\n   \n\n### 装饰模式 - Decorator\n\n1. 描述：动态地为一个对象增加新的功能，使用对象的关联关系代替继承关系，无需通过继承增加子类就能扩展对象的新功能。同时避免类型体系的快速膨胀。\n\n2. 角色：\n\n   - 抽象构件角色 - Component：真实对象和装饰对象具有相同的接口\n   - 具体构件角色 - ConcreteComponent：真实对象\n   - 装饰角色 - Decorator：接受所有客户端的请求，并把请求转发给真实的对象。在调用真实对象前后增加新的功能\n   - 具体装饰角色 - ConcreteDecorator：负责给构件对象增加新功能\n\n3. 应用场景：io流；\n\n4. 实现方式：\n\n   ```java\n   public interface Component {\n       void run();\n   }\n   \n   public class ConcreteComponent implements Component{\n       @Override\n       public void run() {\n           System.out.println(\"ConcreteComponent run\");\n       }\n   }\n   \n   public class Decorator implements Component{\n       private Component component;\n   \n       public Decorator(Component component){\n           this.component = component;\n       }\n   \n       @Override\n       public void run() {\n           System.out.println(\"Decorator run\");\n           component.run();\n       }\n   }\n   \n   public class ConcreteDecorator extends Decorator{\n       public ConcreteDecorator(Component component) {\n           super(component);\n           addMethod();\n       }\n   \n       public void addMethod(){\n           System.out.println(\"ConcreteDecorator addMethod\");\n       }\n   }\n   \n   public class Client {\n       public static void main(String[] args) {\n           ConcreteComponent concreteComponent = new ConcreteComponent();\n           concreteComponent.run();\n           //增加新功能\n           ConcreteDecorator concreteDecorator = new ConcreteDecorator(concreteComponent);\n           concreteDecorator.addMethod();\n       }\n   }\n   ```\n\n   \n\n### 外观模式 - \n\n1. 描述：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用\n2. ","source":"_posts/JAVA设计模式.md","raw":"---\ntitle: 设计模式（Group Of Four 23）【待补充】\ndate: 2021-10-12 16:24:43\ntags: JAVA\ncategories: 编程\n---\n\n# 设计模式（Group Of Four 23）【待补充】\n\n## 设计模式分类\n\n- 创建者模式\n\n  单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式\n\n- 结构型模式\n\n  适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式\n\n- 行为型模式\n\n  模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式\n\n## 创建者模式\n\n### 单例模式 - Singleton\n\n1. 作用：保证一个类只有一个实例对象，并且提供一个访问该实例的全局访问点（方法）\n\n2. 应用场景：Spring中的每个bean；数据库连接池的设计；windows任务管理器；Windows回收站\n\n3. 优点：\n\n   - 只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，则在应用启动时产生一个单例对象，然后永久存在内存中\n\n   - 在系统设置全局访问点，优化环共享资源访问\n\n4. 常见的实现方式\n\n   - 饿汉式（线程安全、调用效率高。但是，不能延时加载）\n\n     ```java\n     /*\n         饿汉式单例实现：\n         1. 私有化构造器\n         2. 提供一个私有的static变量，存放唯一对象\n         3. 提供开放的方法访问对象\n     * */\n     public class SingletonDemo1 {\n         // 类初始化时。立即加载这个对象。存在问题：如果不调用getInstance()则会造成资源浪费\n         private static /*final*/ SingletonDemo1 instance = new SingletonDemo1();\n         private SingletonDemo1(){\n     \n         }\n     \n         // static变量在类加载时初始化,不会发生并发访问的问题\n         public static /*synchronized*/ SingletonDemo1 getInstance(){\n             return instance;\n         }\n     }\n     ```\n\n   - 懒汉式（线程安全、调用效率不高。但是，能延时加载）\n\n     ```java\n     /*\n         懒汉式单例实现：\n         1. 提供一个私有的不初始化static变量，\n         2. 私有化构造器\n         3. 调用getInstance时new一个对象\n     * */\n     public class SingletonDemo2 {\n         // 延迟加载\n         private static SingletonDemo2 instance;\n     \n         private SingletonDemo2(){\n     \n         }\n         //每次调用getInstance()都要同步，并发效率低\n         public static synchronized SingletonDemo2 getInstance(){\n             if(instance == null){\n                 instance = new SingletonDemo2();\n             }\n             return instance;\n         }\n     }\n     ```\n\n   - 双重检测锁式（JVM底层内部的原因，不建议使用）\n\n   - 静态内部类式（线程安全、调用效率高。能延时加载）\n\n     ```java\n     /*\n         静态内部类单例实现：\n         1. 私有化构造器\n         2. 创建静态内部类，在其中提供一个私有的static变量，存放唯一对象\n         3. 提供开放的方法访问对象\n     * */\n     public class SingletonDemo3 {\n         // 外部类没有static属性，则不会立即加载对象，也不会加载静态内部类\n         private static class SingletonClassInstance{\n             // 调用时加载静态内部类，加载类时天然线程安全。instance是static final修饰，保证内存中只有一个实例存在并且不能被修改\n             private static final SingletonDemo3 instance = new SingletonDemo3();\n         }\n     \n         private SingletonDemo3(){\n     \n         }\n     \n         public static SingletonDemo3 getInstance(){\n             return SingletonClassInstance.instance;\n         }\n     }\n     ```\n\n   - 枚举单例（线程安全、调用效率高。但是，不能延时加载。避免通过反射和序列化产生的漏洞）\n\n     ```java\n     /*\n         枚举式单例实现：\n         1. 定义一个枚举的元素\n     * */\n     public enum SingletonDemo4 {\n         // 枚举类即单例模式。定义一个枚举的元素，代表一个实例\n         INSTANCE;\n     \n         public void singletonOperation(){\n             // 对实例的操作\n         }\n     }\n     ```\n\n5. 选用\n\n   单例对象 占用资源少，不需要延时加载：枚举式好于饿汉式\n\n   单例对象 占用资源大，需要延时加载：静态内部类式好于懒汉式\n\n6. 反射反序列化测试单例漏洞（枚举类型除外）\n\n   - 反射\n\n       ```java\n               Class<SingletonDemo1> clazz = (Class<SingletonDemo1>) \t\tClass.forName(\"SingletonDemo.ehan.SingletonDemo1\");\n               Constructor<SingletonDemo1> c = clazz.getDeclaredConstructor(null);\n               c.setAccessible(true);\n               SingletonDemo1 a =c.newInstance();\n               SingletonDemo1 b =c.newInstance();\n               System.out.println(a == b); // false,两个不同的对象\n       ```\n\n   \t解决：私有化构造器加入异常判断\n\n       ```java\n       private SingletonDemo1(){\n           if(instance != null){\n               throw new RuntimeException();\n           }\n       }\n       ```\n   \n   - 反序列化\n   \n     ```java\n     // SingletonDemo1需要实现Serializable\n     SingletonDemo1 a = SingletonDemo1.getInstance();\n     // 序列化\n     FileOutputStream fos = new FileOutputStream(\"d:/a.txt\");\n     ObjectOutputStream oos = new ObjectOutputStream(fos);\n     oos.writeObject(a);\n     oos.close();\n     fos.close();\n     // 反序列化\n     ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"d:/a.txt\"));\n     SingletonDemo1 b = (SingletonDemo1)ois.readObject();\n     System.out.println(a == b); // false\n     ```\n   \n     解决：添加readResolve方法\n   \n     ```java\n     // 反序列化时，返回单例对象\n     private Object readResolve() throws ObjectStreamException{\n     \treturn instance;\n     }\n     ```\n\n\n\n### 工厂模式 - Factory\n\n1. 作用：实现了创建者和调用者的分离\n\n2. 面向对象设计的基本原则：\n   - OCP开闭原则（open-closed principle）：一个软件的实体应该对扩展开放，对修改关闭\n   - DIP依赖倒转原则（dependence inversionprinciple）：针对接口编程，不要针对实现编程\n   - LOD迪米特原则（Law of Demeter）：只与你直接的朋友通信，而避免与陌生人通信\n\n2. 应用场景：Calender的getInstance方法；JDBC中connection对象的获取\n   \n3. 实现方式\n\n   - 简单工厂模式（静态工厂模式）\n\n     描述：工厂类一般使用静态方法，通过接收的参数不同来返回不同的对象实例\n\n     问题：对于增加新产品，不修改代码的话无法扩展（不满足OCP）\n\n     ```java\n     public class TestObjectSimpleFactory {\n         public static TestObject createTestObject(String type){\n             if(type.equals(\"one\")){\n                 return new ChildObjectOne();\n             } else if(type.equals(\"two\")) {\n                 return new ChildObjectTwo();\n             }\n             return null;\n         }\n     }\n     public class client {\n         public static void main(String[] args) {\n             TestObject a = TestObjectSimpleFactory.createTestObject(\"one\");\n             TestObject b = TestObjectSimpleFactory.createTestObject(\"two\");\n             a.run();\n             b.run();\n         }\n     }\n     ```\n\n   - 工厂方法模式\n\n     描述：简单工厂模式只有一个工厂类，工厂方法模式有一组实现了相同接口的工厂类\n\n     ```java\n     public interface TestObjectMethodFactory {\n         TestObject createTestObject();\n     }\n     \n     public class ChildObjectOneFactory implements TestObjectMethodFactory {\n         @Override\n         public TestObject createTestObject  () {\n             return new ChildObjectOne();\n         }\n     }\n     \n     public class ChildObjectTwoFactory implements TestObjectMethodFactory {\n         @Override\n         public TestObject createTestObject  () {\n             return new ChildObjectTwo();\n         }\n     }\n     \n     public static void main(String[] args) {\n         TestObject a = new ChildObjectOneFactory().createTestObject();\n         TestObject b = new ChildObjectTwoFactory().createTestObject();\n         a.run();\n         b.run();\n     }\n     ```\n   \n   - 抽象工厂模式\n   \n     描述：用来生产不同产品族的全部产品。是工厂方法模式的升级版本。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n   \n     问题：对于增加新的产品，无能为力。支持增加产品族\n   \n     ```java\n     public interface TestObjectOne {\n         public void runOne();\n     \n         public void runTwo();\n     }\n     \n     public class TestObjectOneHigher implements TestObjectOne {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectOneHigher runOne\");\n         }\n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectOneHigher runTwo\");\n         }\n     }\n     \n     public class TestObjectOneLower implements TestObjectOne {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectOneLower runOne\");\n         }\n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectOneLower runTwo\");\n         }\n     }\n     \n     public interface TestObjectTwo {\n         public void runOne();\n     \n         public void runTwo();\n     }\n     \n     public class TestObjectTwoHigher implements TestObjectTwo {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectTwoHigher runOne\");\n         }\n     \n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectTwoHigher runTwo\");\n         }\n     }\n     \n     public class TestObjectTwoLower implements TestObjectTwo {\n         @Override\n         public void runOne() {\n             System.out.println(\"TestObjectTwo runOne\");\n         }\n     \n         @Override\n         public void runTwo() {\n             System.out.println(\"TestObjectTwo runTwo\");\n         }\n     }\n     \n     public interface TestAbstractFactory {\n         TestObjectOne createTestObjectOne();\n     \n         TestObjectTwo createTestObjectTwo();\n     }\n     \n     public class TestHigherFactory implements TestAbstractFactory {\n         @Override\n         public TestObjectOne createTestObjectOne() {\n             return new TestObjectOneHigher();\n         }\n     \n         @Override\n         public TestObjectTwo createTestObjectTwo() {\n             return new TestObjectTwoHigher();\n         }\n     }\n     \n     public class TestLowerFactory implements TestAbstractFactory{\n     \n         @Override\n         public TestObjectOne createTestObjectOne() {\n             return new TestObjectOneLower();\n         }\n     \n         @Override\n         public TestObjectTwo createTestObjectTwo() {\n             return new TestObjectTwoLower();\n         }\n     }\n     \n     public class client {\n         public static void main(String[] args) {\n             TestAbstractFactory lowerFactory = new TestLowerFactory();\n             TestAbstractFactory higherFactory = new TestHigherFactory();\n             TestObjectOne a = lowerFactory.createTestObjectOne();\n             TestObjectOne b = higherFactory.createTestObjectOne();\n     \n             a.runOne();\n             a.runTwo();\n             b.runOne();\n             b.runTwo();\n         }\n     }\n     ```\n   \n     \n\n4. 比较：\n\n   简单工厂模式：结构复杂度更低\n\n   工厂方法模式：代码复杂度更低\n\n   设计理论工厂方法模式更优，但一般选择简单工厂模式\n\n\n\n### 建造者模式 - Builder\n\n1. 作用：实现了构建（Builder）和装配（Director）的解耦，从而构造出复杂的对象。实现了构建算法、装配算法的解耦，实现更好的复用。\n\n2. 应用场景：StringBuilder的append方法；SQL的preparedStatement；\n\n3. 实现：\n\n   ```\n   public class TestObject {\n   \n       private ComponentA componentA;\n   \n       private ComponentB componentB;\n   }\n   \n   public class ComponentA {\n   \n       public ComponentA(String a){\n           this.a = a;\n       }\n       private String a;\n   }\n   \n   public class ComponentB {\n   \n       public ComponentB(String b){\n           this.b = b;\n       }\n       private String b;\n   }\n   \n   public interface TestObjectBuilder {\n   \n       ComponentA builderComponentA();\n   \n       ComponentB builderComponentB();\n   }\n   \n   public class TestObjectBuilderImpl implements TestObjectBuilder{\n       @Override\n       public ComponentA builderComponentA() {\n           System.out.println(\"构建组件A\");\n           return new ComponentA(\"组件A\");\n       }\n   \n       @Override\n       public ComponentB builderComponentB() {\n           System.out.println(\"构建组件B\");\n           return new ComponentB(\"组件B\");\n       }\n   }\n   \n   public interface TestObjectDirector {\n   \n       TestObject directorTestObject();\n   }\n   \n   public class TestObjectDirectorImpl implements TestObjectDirector{\n   \n       private TestObjectBuilder builder;\n   \n       public TestObjectDirectorImpl(TestObjectBuilder builder){\n           this.builder = builder;\n       }\n   \n       @Override\n       public TestObject directorTestObject() {\n           ComponentA a = builder.builderComponentA();\n           ComponentB b = builder.builderComponentB();\n           TestObject t = new TestObject();\n           t.setComponentA(a);\n           t.setComponentB(b);\n           return t;\n       }\n   }\n   ```\n\n   \n\n### 原型模式 - Prototype\n\n1. 作用：以某个对象为原型，复制出新的对象。新的对象具备原型对象的特点。解决产生一个对象需要繁琐的数据准备和访问权限的问题。一般和工厂方法模式一起使用\n\n2. 应用场景：Cloneable接口和clone方法\n\n3. 优点：效率高，避免了重新执行构造过程的步骤\n\n4. 实现方式：\n\n   ```java\n   public class ShallowCloneObject implements Cloneable,Serializable{\n       private String name;\n   \n       private Date createTime;\n   \n       public ShallowCloneObject(String name, Date createTime){\n           this.name = name;\n           this.createTime = createTime;\n       }\n   \n       @Override\n       protected Object clone() throws CloneNotSupportedException {\n           return super.clone();\n       }\n   }\n   \n   public class DeepCloneObject implements Cloneable{\n   \n       private String name;\n   \n       private Date createTime;\n   \n       public DeepCloneObject(String name, Date createTime){\n           this.name = name;\n           this.createTime = createTime;\n       }\n   \n       @Override\n       protected Object clone() throws CloneNotSupportedException {\n           Object object = super.clone();\n           DeepCloneObject deepCloneObject = (DeepCloneObject) object;\n           deepCloneObject.createTime = ((Date) this.createTime.clone());\n           return object;\n       }\n   }\n   \n   public static void main(String[] args) throws CloneNotSupportedException {\n       // 浅克隆，克隆对象的时间字段与原型对象指向同一个date，修改后互相影响\n       System.out.println(\"浅克隆--------------------------\");\n       Date date1 = new Date();\n       ShallowCloneObject s = new ShallowCloneObject(\"原型对象\",date1);\n       System.out.println(s.getName() + s.getCreateTime());\n       ShallowCloneObject shallowCloneObject = (ShallowCloneObject)s.clone();\n       System.out.println(shallowCloneObject.getName() + shallowCloneObject.getCreateTime());\n       shallowCloneObject.setName(\"克隆对象\");\n       date1.setTime(1000000000000L);\n       System.out.println(s.getName() + s.getCreateTime());\n       System.out.println(shallowCloneObject.getName() + shallowCloneObject.getCreateTime());\n   \n       // 深复制\n       System.out.println(\"深复制--------------------------\");\n       Date date2 = new Date();\n       DeepCloneObject d = new DeepCloneObject(\"原型对象\",date2);\n       System.out.println(d.getName() + d.getCreateTime());\n       DeepCloneObject deepCloneObject = (DeepCloneObject)d.clone();\n       System.out.println(deepCloneObject.getName() + deepCloneObject.getCreateTime());\n       deepCloneObject.setName(\"克隆对象\");\n       date2.setTime(1000000000000L);\n       System.out.println(d.getName() + d.getCreateTime());\n       System.out.println(deepCloneObject.getName() + deepCloneObject.getCreateTime());\n   }\n   \n   public static void main(String[] args) throws IOException, ClassNotFoundException {\n       // 使用序列化和反序列化\n       Date date = new Date();\n       ShallowCloneObject s = new ShallowCloneObject(\"原型对象\",date);\n       ByteArrayOutputStream bos = new ByteArrayOutputStream();\n       ObjectOutputStream oos = new ObjectOutputStream(bos);\n       oos.writeObject(s);\n       byte[] bytes = bos.toByteArray();\n       ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n       ObjectInputStream ois = new ObjectInputStream(bis);\n       ShallowCloneObject deepCloneBySerialization = (ShallowCloneObject)ois.readObject();\n       System.out.println(s.getName() + s.getCreateTime());\n       System.out.println(deepCloneBySerialization.getName() + deepCloneBySerialization.getCreateTime());\n       date.setTime(12121212121212L);\n       System.out.println(s.getName() + s.getCreateTime());\n       System.out.println(deepCloneBySerialization.getName() + deepCloneBySerialization.getCreateTime());\n   }\n   ```\n\n\n\n## 结构型模式\n\n### 适配器模式-Adapter\n\n1. 描述：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的类可以一起工作\n\n2. 应用场景：旧系统升级改造；java.io.InputStreamReader(InputStream)；java.io.OutputStreamWriter(OutputStream);\n\n3. 角色：\n\n   - 被适配的类 - Adaptee：持有既定方法，需要适配\n   - 适配器 - Adapter：使用Adaptee的方法满足Target需求\n   - 目标类 - Target：定义所需的方法\n\n4. 实现方式：\n\n   ```java\n   /*\n   * 被适配的类\n   * */\n   public class Adaptee {\n   \n       public void request(){\n           System.out.println(\"被适配的类提供客户端需要的功能\");\n       }\n   }\n   \n   /*\n   * 适配器(类适配器方式)\n   * */\n   public class Adapter extends Adaptee implements Target{\n       @Override\n       public void handleRequest() {\n           super.request();\n       }\n   }\n   \n   /*\n    * 适配器(对象适配器方式)\n    * */\n   public class Adapter2 implements Target{\n   \n       private Adaptee adaptee;\n   \n       public Adapter2(Adaptee a){\n           super();\n           this.adaptee = a;\n       }\n       @Override\n       public void handleRequest() {\n           adaptee.request();\n       }\n   }\n   \n   public interface Target {\n       void handleRequest();\n   }\n   \n   public class Client {\n       public void test(Target t){\n           t.handleRequest();\n       }\n   \n       public static void main(String[] args) {\n           // 1. 类适配器\n           Client c1 = new Client();\n           Target t1 = new Adapter();\n           c1.test(t1);\n           // 2. 对象组合适配器\n           Client c2 = new Client();\n           Adaptee a = new Adaptee();\n           Target t2 = new Adapter2(a);\n           c2.test(t2);\n       }\n   }\n   ```\n\n\n\n### 代理模式 - Proxy\n\n1. 描述：通过代理控制对对象的访问，在调用某个对象方法前做前置处理，调用过后做后置处理。将统一的流程控制放在代理类中处理\n\n2. 应用场景：数据库连接池关闭处理；mybatis实现拦截器插件\n\n   - 安全代理：屏蔽对真实角色的直接访问\n   - 远程代理：通过代理类处理远程方法调用（RMI）\n   - 延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象\n\n3. 角色：\n\n   - 抽象的角色 - Subject：定义了使Proxy和RealSubject具有一致性的接口\n   - 代理人 - Proxy：实现了Subject接口，尽量代替真实角色处理请求，处理不了再转给RealSubject\n   - 真实角色 - RealSubject：实现了Subject接口，必要时处理请求\n\n4. 实现方式：\n\n   - 静态代理\n\n     ```java\n     public interface AbstractRole {\n     \n         void step1();\n     \n         void step2();\n     \n         void step3();\n     }\n     \n     public class RealRole implements AbstractRole{\n         @Override\n         public void step1() {\n             System.out.println(\"真实角色-步骤1\");\n         }\n     \n         @Override\n         public void step2() {\n             System.out.println(\"真实角色-步骤2\");\n         }\n     \n         @Override\n         public void step3() {\n             System.out.println(\"真实角色-步骤3,代理角色没有的方法\");\n         }\n     }\n     \n     public class ProxyRole implements AbstractRole{\n     \n         AbstractRole abstractRole;\n     \n         public ProxyRole(AbstractRole abstractRole){\n             super();\n             this.abstractRole = abstractRole;\n         }\n     \n         @Override\n         public void step1() {\n             System.out.println(\"代理角色-步骤1,代替真实角色执行\");\n         }\n     \n         @Override\n         public void step2() {\n             System.out.println(\"代理角色-步骤2,代替真实角色执行\");\n         }\n     \n         @Override\n         public void step3() {\n             abstractRole.step3();\n         }\n     }\n     \n     public class Client {\n         public static void main(String[] args) {\n             AbstractRole realRole = new RealRole();\n             AbstractRole proxyRole = new ProxyRole(realRole);\n             proxyRole.step1();\n             proxyRole.step2();\n             proxyRole.step3();\n         }\n     }\n     ```\n\n   - 动态代理（JDK实现）\n\n     java.lang.reflect.Proxy：动态生成代理类和对象\n\n     java.lang.reflect.InvocationHandler：处理器接口\n\n     ```java\n     public interface AbstractRole {\n     \n         void step1();\n     \n         void step2();\n     \n         void step3();\n     }\n     \n     public class RealRole implements AbstractRole {\n         @Override\n         public void step1() {\n             System.out.println(\"真实角色-步骤1\");\n         }\n     \n         @Override\n         public void step2() {\n             System.out.println(\"真实角色-步骤2\");\n         }\n     \n         @Override\n         public void step3() {\n             System.out.println(\"真实角色-步骤3,代理角色没有的方法\");\n         }\n     }\n     \n     public class AbstractRoleHandler implements InvocationHandler {\n         AbstractRole abstractRole;\n     \n         public AbstractRoleHandler(AbstractRole abstractRole){\n             this.abstractRole = abstractRole;\n         }\n     \n         @Override\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n             System.out.println(\"invoke流程控制\");\n             Object object = null;\n             System.out.println(\"真实角色方法执行前\");\n             if(method.getName().equals(\"step3\")){\n                 object = method.invoke(abstractRole,args);\n             }\n             System.out.println(\"真实角色方法执行后\");\n             return object;\n         }\n     }\n     \n     public class Client {\n         public static void main(String[] args) {\n             AbstractRole realRole = new RealRole();\n             AbstractRoleHandler handler = new AbstractRoleHandler(realRole);\n             AbstractRole proxyRole= (AbstractRole)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{AbstractRole.class},handler);\n             proxyRole.step3();\n     \n         }\n     }\n     ```\n\n5. 比较：\n\n   动态代理的优点：抽象角色中声明的所有方法都被转移到调用处理器一个集中的方法中处理，可以更加灵活和统一地处理众多的方法\n\n\n\n### 桥接模式 - Bridge\n\n1. 描述：处理多层继承结构，处理多个维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立地扩展\n\n2. 应用场景：JDBC驱动程序\n\n3. 角色：\n\n4. 实现方式：\n\n   ```java\n   public interface Veidoo1 {\n       void veidoo1Method();\n   }\n   \n   public class Veidoo2 {\n       protected Veidoo1 veidoo1;\n   \n       public Veidoo2(Veidoo1 veidoo1){\n           this.veidoo1 = veidoo1;\n       }\n   \n       public void veidoo2Method(){\n           veidoo1.veidoo1Method();\n       }\n   }\n   \n   public class Veidoo1Classify1 implements Veidoo1{\n       @Override\n       public void veidoo1Method() {\n           System.out.println(\"#####################\");\n           System.out.println(\"Veidoo1Classify1\");\n       }\n   }\n   \n   public class Veidoo1Classify2 implements Veidoo1{\n       @Override\n       public void veidoo1Method() {\n           System.out.println(\"#####################\");\n           System.out.println(\"Veidoo1Classify2\");\n       }\n   }\n   \n   public class Veidoo2Classify1 extends Veidoo2{\n   \n       public Veidoo2Classify1(Veidoo1 veidoo1){\n           super(veidoo1);\n       }\n   \n       @Override\n       public void veidoo2Method(){\n           super.veidoo2Method();\n           System.out.println(\"Veidoo2Classify1\");\n       }\n   }\n   \n   public class Veidoo2Classify2 extends Veidoo2{\n   \n       public Veidoo2Classify2(Veidoo1 veidoo1){\n           super(veidoo1);\n       }\n   \n       @Override\n       public void veidoo2Method(){\n           super.veidoo2Method();\n           System.out.println(\"Veidoo2Classify2\");\n       }\n   }\n   \n   public class Client {\n       public static void main(String[] args) {\n           Veidoo2 o1 = new Veidoo2Classify1(new Veidoo1Classify1());\n           Veidoo2 o2 = new Veidoo2Classify2(new Veidoo1Classify1());\n           Veidoo2 o3 = new Veidoo2Classify1(new Veidoo1Classify2());\n           Veidoo2 o4 = new Veidoo2Classify2(new Veidoo1Classify2());\n           o1.veidoo2Method();\n           o2.veidoo2Method();\n           o3.veidoo2Method();\n           o4.veidoo2Method();\n       }\n   }\n   ```\n\n   \n\n### 组合模式 - Composite\n\n1. 描述：把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象\n\n2. 角色：\n   - 抽象构件角色 - Component：定义了叶子和容器构件的共同点\n   - 叶子构件角色 - Leaf：无子节点\n   - 容器构件角色 - Composite：有容器特征，可以包含子节点\n\n3. 应用场景：操作系统的资源管理器；xml文件解析；oa组织树\n\n4. 实现方式：\n\n   ```java\n   public interface Component {\n       void operation();\n   }\n   \n   public class CompositeImpl implements Component{\n       private String name;\n       private List<Component> list = new ArrayList<>();\n   \n       public CompositeImpl(String name) {\n           this.name = name;\n       }\n   \n       public void add(Component component){\n           list.add(component);\n       }\n   \n       public void remove(Component component){\n           list.remove(component);\n       }\n   \n       public Component getChild(int index){\n           return list.get(index);\n       }\n   \n       @Override\n       public void operation() {\n           System.out.println(\"CompositeImpl\"+name);\n           for(Component c:list){\n               c.operation();\n           }\n       }\n   }\n   public class LeafOneImpl implements Component{\n       private String name;\n   \n       public LeafOneImpl(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public void operation() {\n           System.out.println(\"ComponentImpl \" + name);\n       }\n   \n       public String getName() {\n           return name;\n       }\n   \n       public void setName(String name) {\n           this.name = name;\n       }\n   }\n   \n   public class LeafTwoImpl implements Component{\n       private String name;\n   \n       public LeafTwoImpl(String name) {\n           this.name = name;\n       }\n   \n       @Override\n       public void operation() {\n           System.out.println(\"ComponentTwoImpl \" + name);\n       }\n   \n       public String getName() {\n           return name;\n       }\n   \n       public void setName(String name) {\n           this.name = name;\n       }\n   }\n   \n   public class Client {\n       public static void main(String[] args) {\n           Component c1 = new LeafOneImpl(\"叶子节点1\");\n           Component c2 = new LeafTwoImpl(\"叶子节点2\");\n           CompositeImpl c3 = new CompositeImpl(\"容器节点\");\n           CompositeImpl c4 = new CompositeImpl(\"子容器节点\");\n   \n           c3.add(c1);\n           c4.add(c2);\n           c2.operation();\n           c3.operation();\n       }\n   }\n   ```\n\n   \n\n### 装饰模式 - Decorator\n\n1. 描述：动态地为一个对象增加新的功能，使用对象的关联关系代替继承关系，无需通过继承增加子类就能扩展对象的新功能。同时避免类型体系的快速膨胀。\n\n2. 角色：\n\n   - 抽象构件角色 - Component：真实对象和装饰对象具有相同的接口\n   - 具体构件角色 - ConcreteComponent：真实对象\n   - 装饰角色 - Decorator：接受所有客户端的请求，并把请求转发给真实的对象。在调用真实对象前后增加新的功能\n   - 具体装饰角色 - ConcreteDecorator：负责给构件对象增加新功能\n\n3. 应用场景：io流；\n\n4. 实现方式：\n\n   ```java\n   public interface Component {\n       void run();\n   }\n   \n   public class ConcreteComponent implements Component{\n       @Override\n       public void run() {\n           System.out.println(\"ConcreteComponent run\");\n       }\n   }\n   \n   public class Decorator implements Component{\n       private Component component;\n   \n       public Decorator(Component component){\n           this.component = component;\n       }\n   \n       @Override\n       public void run() {\n           System.out.println(\"Decorator run\");\n           component.run();\n       }\n   }\n   \n   public class ConcreteDecorator extends Decorator{\n       public ConcreteDecorator(Component component) {\n           super(component);\n           addMethod();\n       }\n   \n       public void addMethod(){\n           System.out.println(\"ConcreteDecorator addMethod\");\n       }\n   }\n   \n   public class Client {\n       public static void main(String[] args) {\n           ConcreteComponent concreteComponent = new ConcreteComponent();\n           concreteComponent.run();\n           //增加新功能\n           ConcreteDecorator concreteDecorator = new ConcreteDecorator(concreteComponent);\n           concreteDecorator.addMethod();\n       }\n   }\n   ```\n\n   \n\n### 外观模式 - \n\n1. 描述：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用\n2. ","slug":"JAVA设计模式","published":1,"updated":"2022-07-30T08:25:05.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9u000h94wa05dm6ttk","content":"<h1 id=\"设计模式（Group-Of-Four-23）【待补充】\"><a href=\"#设计模式（Group-Of-Four-23）【待补充】\" class=\"headerlink\" title=\"设计模式（Group Of Four 23）【待补充】\"></a>设计模式（Group Of Four 23）【待补充】</h1><h2 id=\"设计模式分类\"><a href=\"#设计模式分类\" class=\"headerlink\" title=\"设计模式分类\"></a>设计模式分类</h2><ul>\n<li><p>创建者模式</p>\n<p>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p>\n</li>\n<li><p>结构型模式</p>\n<p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p>\n</li>\n<li><p>行为型模式</p>\n<p>模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p>\n</li>\n</ul>\n<h2 id=\"创建者模式\"><a href=\"#创建者模式\" class=\"headerlink\" title=\"创建者模式\"></a>创建者模式</h2><h3 id=\"单例模式-Singleton\"><a href=\"#单例模式-Singleton\" class=\"headerlink\" title=\"单例模式 - Singleton\"></a>单例模式 - Singleton</h3><ol>\n<li><p>作用：保证一个类只有一个实例对象，并且提供一个访问该实例的全局访问点（方法）</p>\n</li>\n<li><p>应用场景：Spring中的每个bean；数据库连接池的设计；windows任务管理器；Windows回收站</p>\n</li>\n<li><p>优点：</p>\n<ul>\n<li><p>只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，则在应用启动时产生一个单例对象，然后永久存在内存中</p>\n</li>\n<li><p>在系统设置全局访问点，优化环共享资源访问</p>\n</li>\n</ul>\n</li>\n<li><p>常见的实现方式</p>\n<ul>\n<li><p>饿汉式（线程安全、调用效率高。但是，不能延时加载）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    饿汉式单例实现：\n    1. 私有化构造器\n    2. 提供一个私有的static变量，存放唯一对象\n    3. 提供开放的方法访问对象\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 类初始化时。立即加载这个对象。存在问题：如果不调用getInstance()则会造成资源浪费</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token comment\">/*final*/</span> <span class=\"token class-name\">SingletonDemo1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// static变量在类加载时初始化,不会发生并发访问的问题</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token comment\">/*synchronized*/</span> <span class=\"token class-name\">SingletonDemo1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>懒汉式（线程安全、调用效率不高。但是，能延时加载）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    懒汉式单例实现：\n    1. 提供一个私有的不初始化static变量，\n    2. 私有化构造器\n    3. 调用getInstance时new一个对象\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 延迟加载</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonDemo2</span> instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//每次调用getInstance()都要同步，并发效率低</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingletonDemo2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>双重检测锁式（JVM底层内部的原因，不建议使用）</p>\n</li>\n<li><p>静态内部类式（线程安全、调用效率高。能延时加载）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    静态内部类单例实现：\n    1. 私有化构造器\n    2. 创建静态内部类，在其中提供一个私有的static变量，存放唯一对象\n    3. 提供开放的方法访问对象\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 外部类没有static属性，则不会立即加载对象，也不会加载静态内部类</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonClassInstance</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 调用时加载静态内部类，加载类时天然线程安全。instance是static final修饰，保证内存中只有一个实例存在并且不能被修改</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SingletonDemo3</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonDemo3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonClassInstance</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>枚举单例（线程安全、调用效率高。但是，不能延时加载。避免通过反射和序列化产生的漏洞）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    枚举式单例实现：\n    1. 定义一个枚举的元素\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SingletonDemo4</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 枚举类即单例模式。定义一个枚举的元素，代表一个实例</span>\n    INSTANCE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singletonOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 对实例的操作</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>选用</p>\n<p>单例对象 占用资源少，不需要延时加载：枚举式好于饿汉式</p>\n<p>单例对象 占用资源大，需要延时加载：静态内部类式好于懒汉式</p>\n</li>\n<li><p>反射反序列化测试单例漏洞（枚举类型除外）</p>\n<ul>\n<li><p>反射</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> \t\t<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SingletonDemo.ehan.SingletonDemo1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SingletonDemo1</span> a <span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SingletonDemo1</span> b <span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false,两个不同的对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  解决：私有化构造器加入异常判断</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>反序列化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SingletonDemo1需要实现Serializable</span>\n<span class=\"token class-name\">SingletonDemo1</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 序列化</span>\n<span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 反序列化</span>\n<span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SingletonDemo1</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决：添加readResolve方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 反序列化时，返回单例对象</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ObjectStreamException</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"工厂模式-Factory\"><a href=\"#工厂模式-Factory\" class=\"headerlink\" title=\"工厂模式 - Factory\"></a>工厂模式 - Factory</h3><ol>\n<li><p>作用：实现了创建者和调用者的分离</p>\n</li>\n<li><p>面向对象设计的基本原则：</p>\n<ul>\n<li>OCP开闭原则（open-closed principle）：一个软件的实体应该对扩展开放，对修改关闭</li>\n<li>DIP依赖倒转原则（dependence inversionprinciple）：针对接口编程，不要针对实现编程</li>\n<li>LOD迪米特原则（Law of Demeter）：只与你直接的朋友通信，而避免与陌生人通信</li>\n</ul>\n</li>\n<li><p>应用场景：Calender的getInstance方法；JDBC中connection对象的获取</p>\n</li>\n<li><p>实现方式</p>\n<ul>\n<li><p>简单工厂模式（静态工厂模式）</p>\n<p>描述：工厂类一般使用静态方法，通过接收的参数不同来返回不同的对象实例</p>\n<p>问题：对于增加新产品，不修改代码的话无法扩展（不满足OCP）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectSimpleFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TestObject</span> <span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> client <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TestObject</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">TestObjectSimpleFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObject</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">TestObjectSimpleFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>工厂方法模式</p>\n<p>描述：简单工厂模式只有一个工厂类，工厂方法模式有一组实现了相同接口的工厂类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestObjectMethodFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TestObject</span> <span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildObjectOneFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectMethodFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span> createTestObject  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildObjectTwoFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectMethodFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span> createTestObject  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TestObject</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectOneFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TestObject</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectTwoFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>抽象工厂模式</p>\n<p>描述：用来生产不同产品族的全部产品。是工厂方法模式的升级版本。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p>问题：对于增加新的产品，无能为力。支持增加产品族</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectOneHigher</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneHigher runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneHigher runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectOneLower</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneLower runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneLower runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectTwoHigher</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwoHigher runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwoHigher runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectTwoLower</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwo runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwo runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestAbstractFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TestObjectOne</span> <span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token function\">createTestObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestHigherFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestAbstractFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectOneHigher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token function\">createTestObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectTwoHigher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestLowerFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestAbstractFactory</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectOneLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token function\">createTestObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectTwoLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> client <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TestAbstractFactory</span> lowerFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestLowerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestAbstractFactory</span> higherFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestHigherFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObjectOne</span> a <span class=\"token operator\">=</span> lowerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObjectOne</span> b <span class=\"token operator\">=</span> higherFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>比较：</p>\n<p>简单工厂模式：结构复杂度更低</p>\n<p>工厂方法模式：代码复杂度更低</p>\n<p>设计理论工厂方法模式更优，但一般选择简单工厂模式</p>\n</li>\n</ol>\n<h3 id=\"建造者模式-Builder\"><a href=\"#建造者模式-Builder\" class=\"headerlink\" title=\"建造者模式 - Builder\"></a>建造者模式 - Builder</h3><ol>\n<li><p>作用：实现了构建（Builder）和装配（Director）的解耦，从而构造出复杂的对象。实现了构建算法、装配算法的解耦，实现更好的复用。</p>\n</li>\n<li><p>应用场景：StringBuilder的append方法；SQL的preparedStatement；</p>\n</li>\n<li><p>实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class TestObject &#123;\n\n    private ComponentA componentA;\n\n    private ComponentB componentB;\n&#125;\n\npublic class ComponentA &#123;\n\n    public ComponentA(String a)&#123;\n        this.a &#x3D; a;\n    &#125;\n    private String a;\n&#125;\n\npublic class ComponentB &#123;\n\n    public ComponentB(String b)&#123;\n        this.b &#x3D; b;\n    &#125;\n    private String b;\n&#125;\n\npublic interface TestObjectBuilder &#123;\n\n    ComponentA builderComponentA();\n\n    ComponentB builderComponentB();\n&#125;\n\npublic class TestObjectBuilderImpl implements TestObjectBuilder&#123;\n    @Override\n    public ComponentA builderComponentA() &#123;\n        System.out.println(&quot;构建组件A&quot;);\n        return new ComponentA(&quot;组件A&quot;);\n    &#125;\n\n    @Override\n    public ComponentB builderComponentB() &#123;\n        System.out.println(&quot;构建组件B&quot;);\n        return new ComponentB(&quot;组件B&quot;);\n    &#125;\n&#125;\n\npublic interface TestObjectDirector &#123;\n\n    TestObject directorTestObject();\n&#125;\n\npublic class TestObjectDirectorImpl implements TestObjectDirector&#123;\n\n    private TestObjectBuilder builder;\n\n    public TestObjectDirectorImpl(TestObjectBuilder builder)&#123;\n        this.builder &#x3D; builder;\n    &#125;\n\n    @Override\n    public TestObject directorTestObject() &#123;\n        ComponentA a &#x3D; builder.builderComponentA();\n        ComponentB b &#x3D; builder.builderComponentB();\n        TestObject t &#x3D; new TestObject();\n        t.setComponentA(a);\n        t.setComponentB(b);\n        return t;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"原型模式-Prototype\"><a href=\"#原型模式-Prototype\" class=\"headerlink\" title=\"原型模式 - Prototype\"></a>原型模式 - Prototype</h3><ol>\n<li><p>作用：以某个对象为原型，复制出新的对象。新的对象具备原型对象的特点。解决产生一个对象需要繁琐的数据准备和访问权限的问题。一般和工厂方法模式一起使用</p>\n</li>\n<li><p>应用场景：Cloneable接口和clone方法</p>\n</li>\n<li><p>优点：效率高，避免了重新执行构造过程的步骤</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShallowCloneObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> createTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeepCloneObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> createTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DeepCloneObject</span> deepCloneObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">;</span>\n        deepCloneObject<span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 浅克隆，克隆对象的时间字段与原型对象指向同一个date，修改后互相影响</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浅克隆--------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象\"</span><span class=\"token punctuation\">,</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> shallowCloneObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"克隆对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    date1<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 深复制</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"深复制--------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DeepCloneObject</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象\"</span><span class=\"token punctuation\">,</span>date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DeepCloneObject</span> deepCloneObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"克隆对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    date2<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 使用序列化和反序列化</span>\n    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ByteArrayOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> bos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ByteArrayInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>bis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> deepCloneBySerialization <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">12121212121212L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"适配器模式-Adapter\"><a href=\"#适配器模式-Adapter\" class=\"headerlink\" title=\"适配器模式-Adapter\"></a>适配器模式-Adapter</h3><ol>\n<li><p>描述：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的类可以一起工作</p>\n</li>\n<li><p>应用场景：旧系统升级改造；java.io.InputStreamReader(InputStream)；java.io.OutputStreamWriter(OutputStream);</p>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>被适配的类 - Adaptee：持有既定方法，需要适配</li>\n<li>适配器 - Adapter：使用Adaptee的方法满足Target需求</li>\n<li>目标类 - Target：定义所需的方法</li>\n</ul>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 被适配的类\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adaptee</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"被适配的类提供客户端需要的功能\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n* 适配器(类适配器方式)\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adaptee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n * 适配器(对象适配器方式)\n * */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Adaptee</span> adaptee<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Adapter2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Adaptee</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>adaptee <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        adaptee<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 1. 类适配器</span>\n        <span class=\"token class-name\">Client</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Target</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. 对象组合适配器</span>\n        <span class=\"token class-name\">Client</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Adaptee</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adaptee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Target</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"代理模式-Proxy\"><a href=\"#代理模式-Proxy\" class=\"headerlink\" title=\"代理模式 - Proxy\"></a>代理模式 - Proxy</h3><ol>\n<li><p>描述：通过代理控制对对象的访问，在调用某个对象方法前做前置处理，调用过后做后置处理。将统一的流程控制放在代理类中处理</p>\n</li>\n<li><p>应用场景：数据库连接池关闭处理；mybatis实现拦截器插件</p>\n<ul>\n<li>安全代理：屏蔽对真实角色的直接访问</li>\n<li>远程代理：通过代理类处理远程方法调用（RMI）</li>\n<li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li>\n</ul>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>抽象的角色 - Subject：定义了使Proxy和RealSubject具有一致性的接口</li>\n<li>代理人 - Proxy：实现了Subject接口，尽量代替真实角色处理请求，处理不了再转给RealSubject</li>\n<li>真实角色 - RealSubject：实现了Subject接口，必要时处理请求</li>\n</ul>\n</li>\n<li><p>实现方式：</p>\n<ul>\n<li><p>静态代理</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AbstractRole</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealRole</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤3,代理角色没有的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyRole</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProxyRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abstractRole <span class=\"token operator\">=</span> abstractRole<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代理角色-步骤1,代替真实角色执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代理角色-步骤2,代替真实角色执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        abstractRole<span class=\"token punctuation\">.</span><span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AbstractRole</span> realRole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractRole</span> proxyRole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyRole</span><span class=\"token punctuation\">(</span>realRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>动态代理（JDK实现）</p>\n<p>java.lang.reflect.Proxy：动态生成代理类和对象</p>\n<p>java.lang.reflect.InvocationHandler：处理器接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AbstractRole</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealRole</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstractRole</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤3,代理角色没有的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractRoleHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AbstractRoleHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abstractRole <span class=\"token operator\">=</span> abstractRole<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke流程控制\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色方法执行前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"step3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            object <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>abstractRole<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色方法执行后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AbstractRole</span> realRole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractRoleHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractRoleHandler</span><span class=\"token punctuation\">(</span>realRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractRole</span> proxyRole<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>比较：</p>\n<p>动态代理的优点：抽象角色中声明的所有方法都被转移到调用处理器一个集中的方法中处理，可以更加灵活和统一地处理众多的方法</p>\n</li>\n</ol>\n<h3 id=\"桥接模式-Bridge\"><a href=\"#桥接模式-Bridge\" class=\"headerlink\" title=\"桥接模式 - Bridge\"></a>桥接模式 - Bridge</h3><ol>\n<li><p>描述：处理多层继承结构，处理多个维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立地扩展</p>\n</li>\n<li><p>应用场景：JDBC驱动程序</p>\n</li>\n<li><p>角色：</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Veidoo1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Veidoo2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>veidoo1 <span class=\"token operator\">=</span> veidoo1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        veidoo1<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo1Classify1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Veidoo1</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#####################\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo1Classify1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo1Classify2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Veidoo1</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#####################\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo1Classify2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo2Classify1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Veidoo2</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Veidoo2Classify1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo2Classify1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo2Classify2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Veidoo2</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Veidoo2Classify2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo2Classify2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Veidoo2</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Veidoo2</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Veidoo2</span> o3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Veidoo2</span> o4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o1<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o2<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o3<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o4<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"组合模式-Composite\"><a href=\"#组合模式-Composite\" class=\"headerlink\" title=\"组合模式 - Composite\"></a>组合模式 - Composite</h3><ol>\n<li><p>描述：把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象</p>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>抽象构件角色 - Component：定义了叶子和容器构件的共同点</li>\n<li>叶子构件角色 - Leaf：无子节点</li>\n<li>容器构件角色 - Composite：有容器特征，可以包含子节点</li>\n</ul>\n</li>\n<li><p>应用场景：操作系统的资源管理器；xml文件解析；oa组织树</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CompositeImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Component</span> <span class=\"token function\">getChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CompositeImpl\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> c<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeafOneImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LeafOneImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ComponentImpl \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeafTwoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LeafTwoImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ComponentTwoImpl \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Component</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LeafOneImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"叶子节点1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Component</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LeafTwoImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"叶子节点2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CompositeImpl</span> c3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"容器节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CompositeImpl</span> c4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子容器节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        c3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c4<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c2<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c3<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"装饰模式-Decorator\"><a href=\"#装饰模式-Decorator\" class=\"headerlink\" title=\"装饰模式 - Decorator\"></a>装饰模式 - Decorator</h3><ol>\n<li><p>描述：动态地为一个对象增加新的功能，使用对象的关联关系代替继承关系，无需通过继承增加子类就能扩展对象的新功能。同时避免类型体系的快速膨胀。</p>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>抽象构件角色 - Component：真实对象和装饰对象具有相同的接口</li>\n<li>具体构件角色 - ConcreteComponent：真实对象</li>\n<li>装饰角色 - Decorator：接受所有客户端的请求，并把请求转发给真实的对象。在调用真实对象前后增加新的功能</li>\n<li>具体装饰角色 - ConcreteDecorator：负责给构件对象增加新功能</li>\n</ul>\n</li>\n<li><p>应用场景：io流；</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcreteComponent run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Decorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Decorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decorator run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        component<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Decorator</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcreteDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcreteDecorator addMethod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ConcreteComponent</span> concreteComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        concreteComponent<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//增加新功能</span>\n        <span class=\"token class-name\">ConcreteDecorator</span> concreteDecorator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteDecorator</span><span class=\"token punctuation\">(</span>concreteComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        concreteDecorator<span class=\"token punctuation\">.</span><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式 -\"></a>外观模式 -</h3><ol>\n<li>描述：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设计模式（Group-Of-Four-23）【待补充】\"><a href=\"#设计模式（Group-Of-Four-23）【待补充】\" class=\"headerlink\" title=\"设计模式（Group Of Four 23）【待补充】\"></a>设计模式（Group Of Four 23）【待补充】</h1><h2 id=\"设计模式分类\"><a href=\"#设计模式分类\" class=\"headerlink\" title=\"设计模式分类\"></a>设计模式分类</h2><ul>\n<li><p>创建者模式</p>\n<p>单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</p>\n</li>\n<li><p>结构型模式</p>\n<p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p>\n</li>\n<li><p>行为型模式</p>\n<p>模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</p>\n</li>\n</ul>\n<h2 id=\"创建者模式\"><a href=\"#创建者模式\" class=\"headerlink\" title=\"创建者模式\"></a>创建者模式</h2><h3 id=\"单例模式-Singleton\"><a href=\"#单例模式-Singleton\" class=\"headerlink\" title=\"单例模式 - Singleton\"></a>单例模式 - Singleton</h3><ol>\n<li><p>作用：保证一个类只有一个实例对象，并且提供一个访问该实例的全局访问点（方法）</p>\n</li>\n<li><p>应用场景：Spring中的每个bean；数据库连接池的设计；windows任务管理器；Windows回收站</p>\n</li>\n<li><p>优点：</p>\n<ul>\n<li><p>只生成一个实例，减少了系统性能开销。当一个对象的产生需要比较多的资源时，则在应用启动时产生一个单例对象，然后永久存在内存中</p>\n</li>\n<li><p>在系统设置全局访问点，优化环共享资源访问</p>\n</li>\n</ul>\n</li>\n<li><p>常见的实现方式</p>\n<ul>\n<li><p>饿汉式（线程安全、调用效率高。但是，不能延时加载）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    饿汉式单例实现：\n    1. 私有化构造器\n    2. 提供一个私有的static变量，存放唯一对象\n    3. 提供开放的方法访问对象\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 类初始化时。立即加载这个对象。存在问题：如果不调用getInstance()则会造成资源浪费</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token comment\">/*final*/</span> <span class=\"token class-name\">SingletonDemo1</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// static变量在类加载时初始化,不会发生并发访问的问题</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token comment\">/*synchronized*/</span> <span class=\"token class-name\">SingletonDemo1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>懒汉式（线程安全、调用效率不高。但是，能延时加载）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    懒汉式单例实现：\n    1. 提供一个私有的不初始化static变量，\n    2. 私有化构造器\n    3. 调用getInstance时new一个对象\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 延迟加载</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonDemo2</span> instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//每次调用getInstance()都要同步，并发效率低</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">SingletonDemo2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>双重检测锁式（JVM底层内部的原因，不建议使用）</p>\n</li>\n<li><p>静态内部类式（线程安全、调用效率高。能延时加载）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    静态内部类单例实现：\n    1. 私有化构造器\n    2. 创建静态内部类，在其中提供一个私有的static变量，存放唯一对象\n    3. 提供开放的方法访问对象\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonDemo3</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 外部类没有static属性，则不会立即加载对象，也不会加载静态内部类</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonClassInstance</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 调用时加载静态内部类，加载类时天然线程安全。instance是static final修饰，保证内存中只有一个实例存在并且不能被修改</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SingletonDemo3</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingletonDemo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SingletonDemo3</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonClassInstance</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>枚举单例（线程安全、调用效率高。但是，不能延时加载。避免通过反射和序列化产生的漏洞）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n    枚举式单例实现：\n    1. 定义一个枚举的元素\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SingletonDemo4</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 枚举类即单例模式。定义一个枚举的元素，代表一个实例</span>\n    INSTANCE<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singletonOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 对实例的操作</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>选用</p>\n<p>单例对象 占用资源少，不需要延时加载：枚举式好于饿汉式</p>\n<p>单例对象 占用资源大，需要延时加载：静态内部类式好于懒汉式</p>\n</li>\n<li><p>反射反序列化测试单例漏洞（枚举类型除外）</p>\n<ul>\n<li><p>反射</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> \t\t<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SingletonDemo.ehan.SingletonDemo1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SingletonDemo1</span> a <span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SingletonDemo1</span> b <span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false,两个不同的对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  解决：私有化构造器加入异常判断</p>\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>反序列化</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// SingletonDemo1需要实现Serializable</span>\n<span class=\"token class-name\">SingletonDemo1</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 序列化</span>\n<span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 反序列化</span>\n<span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SingletonDemo1</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SingletonDemo1</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决：添加readResolve方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 反序列化时，返回单例对象</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ObjectStreamException</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"工厂模式-Factory\"><a href=\"#工厂模式-Factory\" class=\"headerlink\" title=\"工厂模式 - Factory\"></a>工厂模式 - Factory</h3><ol>\n<li><p>作用：实现了创建者和调用者的分离</p>\n</li>\n<li><p>面向对象设计的基本原则：</p>\n<ul>\n<li>OCP开闭原则（open-closed principle）：一个软件的实体应该对扩展开放，对修改关闭</li>\n<li>DIP依赖倒转原则（dependence inversionprinciple）：针对接口编程，不要针对实现编程</li>\n<li>LOD迪米特原则（Law of Demeter）：只与你直接的朋友通信，而避免与陌生人通信</li>\n</ul>\n</li>\n<li><p>应用场景：Calender的getInstance方法；JDBC中connection对象的获取</p>\n</li>\n<li><p>实现方式</p>\n<ul>\n<li><p>简单工厂模式（静态工厂模式）</p>\n<p>描述：工厂类一般使用静态方法，通过接收的参数不同来返回不同的对象实例</p>\n<p>问题：对于增加新产品，不修改代码的话无法扩展（不满足OCP）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectSimpleFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TestObject</span> <span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> client <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TestObject</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">TestObjectSimpleFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObject</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">TestObjectSimpleFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>工厂方法模式</p>\n<p>描述：简单工厂模式只有一个工厂类，工厂方法模式有一组实现了相同接口的工厂类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestObjectMethodFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TestObject</span> <span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildObjectOneFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectMethodFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span> createTestObject  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChildObjectTwoFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectMethodFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObject</span> createTestObject  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TestObject</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectOneFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TestObject</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChildObjectTwoFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>抽象工厂模式</p>\n<p>描述：用来生产不同产品族的全部产品。是工厂方法模式的升级版本。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p>问题：对于增加新的产品，无能为力。支持增加产品族</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectOneHigher</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneHigher runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneHigher runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectOneLower</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneLower runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectOneLower runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectTwoHigher</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwoHigher runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwoHigher runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestObjectTwoLower</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwo runOne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestObjectTwo runTwo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestAbstractFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">TestObjectOne</span> <span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token function\">createTestObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestHigherFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestAbstractFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectOneHigher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token function\">createTestObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectTwoHigher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestLowerFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TestAbstractFactory</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectOne</span> <span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectOneLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestObjectTwo</span> <span class=\"token function\">createTestObjectTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObjectTwoLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> client <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">TestAbstractFactory</span> lowerFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestLowerFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestAbstractFactory</span> higherFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestHigherFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObjectOne</span> a <span class=\"token operator\">=</span> lowerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">TestObjectOne</span> b <span class=\"token operator\">=</span> higherFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createTestObjectOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">runOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">runTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>比较：</p>\n<p>简单工厂模式：结构复杂度更低</p>\n<p>工厂方法模式：代码复杂度更低</p>\n<p>设计理论工厂方法模式更优，但一般选择简单工厂模式</p>\n</li>\n</ol>\n<h3 id=\"建造者模式-Builder\"><a href=\"#建造者模式-Builder\" class=\"headerlink\" title=\"建造者模式 - Builder\"></a>建造者模式 - Builder</h3><ol>\n<li><p>作用：实现了构建（Builder）和装配（Director）的解耦，从而构造出复杂的对象。实现了构建算法、装配算法的解耦，实现更好的复用。</p>\n</li>\n<li><p>应用场景：StringBuilder的append方法；SQL的preparedStatement；</p>\n</li>\n<li><p>实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class TestObject &#123;\n\n    private ComponentA componentA;\n\n    private ComponentB componentB;\n&#125;\n\npublic class ComponentA &#123;\n\n    public ComponentA(String a)&#123;\n        this.a &#x3D; a;\n    &#125;\n    private String a;\n&#125;\n\npublic class ComponentB &#123;\n\n    public ComponentB(String b)&#123;\n        this.b &#x3D; b;\n    &#125;\n    private String b;\n&#125;\n\npublic interface TestObjectBuilder &#123;\n\n    ComponentA builderComponentA();\n\n    ComponentB builderComponentB();\n&#125;\n\npublic class TestObjectBuilderImpl implements TestObjectBuilder&#123;\n    @Override\n    public ComponentA builderComponentA() &#123;\n        System.out.println(&quot;构建组件A&quot;);\n        return new ComponentA(&quot;组件A&quot;);\n    &#125;\n\n    @Override\n    public ComponentB builderComponentB() &#123;\n        System.out.println(&quot;构建组件B&quot;);\n        return new ComponentB(&quot;组件B&quot;);\n    &#125;\n&#125;\n\npublic interface TestObjectDirector &#123;\n\n    TestObject directorTestObject();\n&#125;\n\npublic class TestObjectDirectorImpl implements TestObjectDirector&#123;\n\n    private TestObjectBuilder builder;\n\n    public TestObjectDirectorImpl(TestObjectBuilder builder)&#123;\n        this.builder &#x3D; builder;\n    &#125;\n\n    @Override\n    public TestObject directorTestObject() &#123;\n        ComponentA a &#x3D; builder.builderComponentA();\n        ComponentB b &#x3D; builder.builderComponentB();\n        TestObject t &#x3D; new TestObject();\n        t.setComponentA(a);\n        t.setComponentB(b);\n        return t;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"原型模式-Prototype\"><a href=\"#原型模式-Prototype\" class=\"headerlink\" title=\"原型模式 - Prototype\"></a>原型模式 - Prototype</h3><ol>\n<li><p>作用：以某个对象为原型，复制出新的对象。新的对象具备原型对象的特点。解决产生一个对象需要繁琐的数据准备和访问权限的问题。一般和工厂方法模式一起使用</p>\n</li>\n<li><p>应用场景：Cloneable接口和clone方法</p>\n</li>\n<li><p>优点：效率高，避免了重新执行构造过程的步骤</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShallowCloneObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> createTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeepCloneObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> createTime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">DeepCloneObject</span> deepCloneObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">;</span>\n        deepCloneObject<span class=\"token punctuation\">.</span>createTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>createTime<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 浅克隆，克隆对象的时间字段与原型对象指向同一个date，修改后互相影响</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浅克隆--------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象\"</span><span class=\"token punctuation\">,</span>date1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> shallowCloneObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"克隆对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    date1<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> shallowCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 深复制</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"深复制--------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Date</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DeepCloneObject</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象\"</span><span class=\"token punctuation\">,</span>date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DeepCloneObject</span> deepCloneObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DeepCloneObject</span><span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"克隆对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    date2<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneObject<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 使用序列化和反序列化</span>\n    <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原型对象\"</span><span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ByteArrayOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>bos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> bos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ByteArrayInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>bis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ShallowCloneObject</span> deepCloneBySerialization <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ShallowCloneObject</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">12121212121212L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> deepCloneBySerialization<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"结构型模式\"><a href=\"#结构型模式\" class=\"headerlink\" title=\"结构型模式\"></a>结构型模式</h2><h3 id=\"适配器模式-Adapter\"><a href=\"#适配器模式-Adapter\" class=\"headerlink\" title=\"适配器模式-Adapter\"></a>适配器模式-Adapter</h3><ol>\n<li><p>描述：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的类可以一起工作</p>\n</li>\n<li><p>应用场景：旧系统升级改造；java.io.InputStreamReader(InputStream)；java.io.OutputStreamWriter(OutputStream);</p>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>被适配的类 - Adaptee：持有既定方法，需要适配</li>\n<li>适配器 - Adapter：使用Adaptee的方法满足Target需求</li>\n<li>目标类 - Target：定义所需的方法</li>\n</ul>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n* 被适配的类\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adaptee</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"被适配的类提供客户端需要的功能\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n* 适配器(类适配器方式)\n* */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adaptee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n * 适配器(对象适配器方式)\n * */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Adaptee</span> adaptee<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Adapter2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Adaptee</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>adaptee <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        adaptee<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Target</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 1. 类适配器</span>\n        <span class=\"token class-name\">Client</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Target</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 2. 对象组合适配器</span>\n        <span class=\"token class-name\">Client</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Adaptee</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adaptee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Target</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"代理模式-Proxy\"><a href=\"#代理模式-Proxy\" class=\"headerlink\" title=\"代理模式 - Proxy\"></a>代理模式 - Proxy</h3><ol>\n<li><p>描述：通过代理控制对对象的访问，在调用某个对象方法前做前置处理，调用过后做后置处理。将统一的流程控制放在代理类中处理</p>\n</li>\n<li><p>应用场景：数据库连接池关闭处理；mybatis实现拦截器插件</p>\n<ul>\n<li>安全代理：屏蔽对真实角色的直接访问</li>\n<li>远程代理：通过代理类处理远程方法调用（RMI）</li>\n<li>延迟加载：先加载轻量级的代理对象，真正需要再加载真实对象</li>\n</ul>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>抽象的角色 - Subject：定义了使Proxy和RealSubject具有一致性的接口</li>\n<li>代理人 - Proxy：实现了Subject接口，尽量代替真实角色处理请求，处理不了再转给RealSubject</li>\n<li>真实角色 - RealSubject：实现了Subject接口，必要时处理请求</li>\n</ul>\n</li>\n<li><p>实现方式：</p>\n<ul>\n<li><p>静态代理</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AbstractRole</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealRole</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤3,代理角色没有的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyRole</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProxyRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abstractRole <span class=\"token operator\">=</span> abstractRole<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代理角色-步骤1,代替真实角色执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"代理角色-步骤2,代替真实角色执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        abstractRole<span class=\"token punctuation\">.</span><span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AbstractRole</span> realRole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractRole</span> proxyRole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyRole</span><span class=\"token punctuation\">(</span>realRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>动态代理（JDK实现）</p>\n<p>java.lang.reflect.Proxy：动态生成代理类和对象</p>\n<p>java.lang.reflect.InvocationHandler：处理器接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AbstractRole</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealRole</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AbstractRole</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色-步骤3,代理角色没有的方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractRoleHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AbstractRoleHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractRole</span> abstractRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abstractRole <span class=\"token operator\">=</span> abstractRole<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke流程控制\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色方法执行前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"step3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            object <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>abstractRole<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"真实角色方法执行后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">AbstractRole</span> realRole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractRoleHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbstractRoleHandler</span><span class=\"token punctuation\">(</span>realRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractRole</span> proxyRole<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AbstractRole</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyRole<span class=\"token punctuation\">.</span><span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>比较：</p>\n<p>动态代理的优点：抽象角色中声明的所有方法都被转移到调用处理器一个集中的方法中处理，可以更加灵活和统一地处理众多的方法</p>\n</li>\n</ol>\n<h3 id=\"桥接模式-Bridge\"><a href=\"#桥接模式-Bridge\" class=\"headerlink\" title=\"桥接模式 - Bridge\"></a>桥接模式 - Bridge</h3><ol>\n<li><p>描述：处理多层继承结构，处理多个维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立地扩展</p>\n</li>\n<li><p>应用场景：JDBC驱动程序</p>\n</li>\n<li><p>角色：</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Veidoo1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Veidoo2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>veidoo1 <span class=\"token operator\">=</span> veidoo1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        veidoo1<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo1Classify1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Veidoo1</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#####################\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo1Classify1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo1Classify2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Veidoo1</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo1Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#####################\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo1Classify2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo2Classify1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Veidoo2</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Veidoo2Classify1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo2Classify1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Veidoo2Classify2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Veidoo2</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Veidoo2Classify2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Veidoo1</span> veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>veidoo1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veidoo2Classify2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Veidoo2</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Veidoo2</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Veidoo2</span> o3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Veidoo2</span> o4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo2Classify2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Veidoo1Classify2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o1<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o2<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o3<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o4<span class=\"token punctuation\">.</span><span class=\"token function\">veidoo2Method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"组合模式-Composite\"><a href=\"#组合模式-Composite\" class=\"headerlink\" title=\"组合模式 - Composite\"></a>组合模式 - Composite</h3><ol>\n<li><p>描述：把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象</p>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>抽象构件角色 - Component：定义了叶子和容器构件的共同点</li>\n<li>叶子构件角色 - Leaf：无子节点</li>\n<li>容器构件角色 - Composite：有容器特征，可以包含子节点</li>\n</ul>\n</li>\n<li><p>应用场景：操作系统的资源管理器；xml文件解析；oa组织树</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CompositeImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Component</span> <span class=\"token function\">getChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CompositeImpl\"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> c<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeafOneImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LeafOneImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ComponentImpl \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeafTwoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LeafTwoImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ComponentTwoImpl \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Component</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LeafOneImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"叶子节点1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Component</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LeafTwoImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"叶子节点2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CompositeImpl</span> c3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"容器节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CompositeImpl</span> c4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeImpl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子容器节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        c3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c4<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c2<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c3<span class=\"token punctuation\">.</span><span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"装饰模式-Decorator\"><a href=\"#装饰模式-Decorator\" class=\"headerlink\" title=\"装饰模式 - Decorator\"></a>装饰模式 - Decorator</h3><ol>\n<li><p>描述：动态地为一个对象增加新的功能，使用对象的关联关系代替继承关系，无需通过继承增加子类就能扩展对象的新功能。同时避免类型体系的快速膨胀。</p>\n</li>\n<li><p>角色：</p>\n<ul>\n<li>抽象构件角色 - Component：真实对象和装饰对象具有相同的接口</li>\n<li>具体构件角色 - ConcreteComponent：真实对象</li>\n<li>装饰角色 - Decorator：接受所有客户端的请求，并把请求转发给真实的对象。在调用真实对象前后增加新的功能</li>\n<li>具体装饰角色 - ConcreteDecorator：负责给构件对象增加新功能</li>\n</ul>\n</li>\n<li><p>应用场景：io流；</p>\n</li>\n<li><p>实现方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcreteComponent run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Decorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Decorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>component <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decorator run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        component<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Decorator</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcreteDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Component</span> component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConcreteDecorator addMethod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">ConcreteComponent</span> concreteComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        concreteComponent<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//增加新功能</span>\n        <span class=\"token class-name\">ConcreteDecorator</span> concreteDecorator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteDecorator</span><span class=\"token punctuation\">(</span>concreteComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        concreteDecorator<span class=\"token punctuation\">.</span><span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式 -\"></a>外观模式 -</h3><ol>\n<li>描述：为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用</li>\n<li></li>\n</ol>\n"},{"title":"JAVA集合","date":"2020-06-29T14:11:06.000Z","_content":"\n# JAVA集合\n\n{% asset_img image-1.png %}\n\n## 数组\n\n- 优点：是一种简单的线性序列，可以快速地访问数组元素，效率高。如果从效率和类型检查的角度讲，数组是最好的。\n\n- 缺点：不灵活。容量需要事先定义好，不能随着需求变化扩容。\n\n\n\n## 泛型\n\n数据类型的参数化，数据类型的一个占位符（形式参数）。\n\n\n\n## List\n\n有序，可重复。\n\n有三个实现类。ArrayList、LinkedList和Vector。\n\n- 在末尾添加一个元素：`boolean add(E e)`\n- 在指定索引添加一个元素：`boolean add(int index, E e)`\n- 是否为空：`boolean isEmpty()`\n- 删除某个元素：`boolean remove(Object e)`\n- 清空：`void clear()`\n- 获取指定索引的元素：`E get(int index)`\n- 获取链表大小（包含元素的个数）：`int size()`\n- 添加一个list：`boolean addAll(Collection c)`\n- 删除与另一个list相同元素：`boolean removeAll(Collection c)`\n- 取交集：`boolean retainAll(Collection c)`\n- 是否包含另一个list：`boolean containsAll(Collection c)`\n\n\n\n### Arraylist\n\n用数组实现的存储。查询效率高，增删效率低，线程不安全。\n\n通过数组扩容的方式实现不限制大小。\n\n- 指定索引添加或替换：`boolean set(int index, E e)`\n\n- 删除指定索引的元素：`E remove(int index)`\n\n- 是否存在某个元素，返回第一次出现的索引：`int indexOf(E e)`\n- 是否存在某个元素，返回最后一次出现的索引：`int indexOf(E e)`\n\n\n\n### LinkedList\n\n用双向链表实现的存储。查询效率低，增删效率高，线程不安全。\n\n\n\n### Vector\n\n用数组实现的存储，效率低，线程安全。相关方法做了同步检查synchronized。\n\n\n\n## Map\n\n存储键值对。键不可重复。\n\n实现类HashMap、TreeMap、HashTable、Properties\n\n\n\n### HashMap\n\n线程不安全，效率高，允许key或者value为null，\n\n- 添加一个键值对：`Object put(Object key,Object value)`\n- 通过键查找值：`Object get(Object key)`\n- 是否为空：`boolean isEmpty()`\n- 删除指定键的键值对：`Object remove(Object key)`\n- 是否包含键对象：`boolean containsKey(Object key)`\n- 是否包含值对象：`boolean containsValue(Object value)`\n- 清空：`void clear()`\n- 获取Map大小（包含键值对的个数）：`int size()`\n- 添加一个Map中的所有对象：`void putAll(Map m)`\n\n\n\n### TreeMap\n\n红黑二叉树的典型实现，排序key。\n\n\n\n### HashTable\n\n线程安全，效率低，不允许key或者value为null。\n\n\n\n## Set\n\n无序，不可重复。\n\n- 将元素添加进`Set<E>`：`boolean add(E e)`\n- 将元素从`Set<E>`删除：`boolean remove(Object e)`\n- 判断是否包含元素：`boolean contains(Object e)`\n\n\n\n### HashSet\n\n无序的，实现了`Set`接口，并没有实现`SortedSet`接口。\n\n\n\n### TreeSet\n\n有序的，实现了`SortedSet`接口。\n\n\n\n## 迭代器Iterator\n\n- 迭代器遍历List\n\n```java\nList<String> list = new ArrayList<>();\nfor (Iterator<String> it = list.iterator(); it.hasNext(); ) {\n     String s = it.next();\n     System.out.println(s);\n}\n```\n\n\n\n- 迭代器遍历Set\n\n```java\nSet<String> set = new HashSet<>();\nfor (Iterator<String> it = set.iterator(); it.hasNext(); ) {\n     String s = it.next();\n     System.out.println(s);\n}\n```\n\n\n\n- 迭代器遍历Map\n\n```java\nMap<Integer,String> map = new HashMap<>();\nSet <Entry<String,String>> s = map.entrySet();\nfor (Iterator<String> it = s.iterator(); it.hasNext(); ) {\n     Entry e = it.next();\n     System.out.println(e.getKey() + e.getValue());\n}\n```\n\n```java\nMap<Integer,String> map = new HashMap<>();\nSet<String> s = map.keySet();\nfor(Iterator<String> it = s.iterator(); it.hasNext(); ){\n    String key = it.next();\n    System.out.println(key + map.get(key));\n}\n```\n\n\n\n## Collections工具类\n\n- `void sort(List)`：对List元素升序排列\n\n- `void shuffle(List)`：对List容器内元素随机排列\n\n- `void reverse(List)`：对List元素逆转排列\n\n- `void fill(List,Object)`：用一个特定的对象重写List容器\n\n- `int binarySearch(List,Object)`：顺序折半查找\n","source":"_posts/JAVA集合.md","raw":"---\ntitle: JAVA集合\ndate: 2020-06-29 22:11:06\ntags: JAVA\ncategories: 编程\n---\n\n# JAVA集合\n\n{% asset_img image-1.png %}\n\n## 数组\n\n- 优点：是一种简单的线性序列，可以快速地访问数组元素，效率高。如果从效率和类型检查的角度讲，数组是最好的。\n\n- 缺点：不灵活。容量需要事先定义好，不能随着需求变化扩容。\n\n\n\n## 泛型\n\n数据类型的参数化，数据类型的一个占位符（形式参数）。\n\n\n\n## List\n\n有序，可重复。\n\n有三个实现类。ArrayList、LinkedList和Vector。\n\n- 在末尾添加一个元素：`boolean add(E e)`\n- 在指定索引添加一个元素：`boolean add(int index, E e)`\n- 是否为空：`boolean isEmpty()`\n- 删除某个元素：`boolean remove(Object e)`\n- 清空：`void clear()`\n- 获取指定索引的元素：`E get(int index)`\n- 获取链表大小（包含元素的个数）：`int size()`\n- 添加一个list：`boolean addAll(Collection c)`\n- 删除与另一个list相同元素：`boolean removeAll(Collection c)`\n- 取交集：`boolean retainAll(Collection c)`\n- 是否包含另一个list：`boolean containsAll(Collection c)`\n\n\n\n### Arraylist\n\n用数组实现的存储。查询效率高，增删效率低，线程不安全。\n\n通过数组扩容的方式实现不限制大小。\n\n- 指定索引添加或替换：`boolean set(int index, E e)`\n\n- 删除指定索引的元素：`E remove(int index)`\n\n- 是否存在某个元素，返回第一次出现的索引：`int indexOf(E e)`\n- 是否存在某个元素，返回最后一次出现的索引：`int indexOf(E e)`\n\n\n\n### LinkedList\n\n用双向链表实现的存储。查询效率低，增删效率高，线程不安全。\n\n\n\n### Vector\n\n用数组实现的存储，效率低，线程安全。相关方法做了同步检查synchronized。\n\n\n\n## Map\n\n存储键值对。键不可重复。\n\n实现类HashMap、TreeMap、HashTable、Properties\n\n\n\n### HashMap\n\n线程不安全，效率高，允许key或者value为null，\n\n- 添加一个键值对：`Object put(Object key,Object value)`\n- 通过键查找值：`Object get(Object key)`\n- 是否为空：`boolean isEmpty()`\n- 删除指定键的键值对：`Object remove(Object key)`\n- 是否包含键对象：`boolean containsKey(Object key)`\n- 是否包含值对象：`boolean containsValue(Object value)`\n- 清空：`void clear()`\n- 获取Map大小（包含键值对的个数）：`int size()`\n- 添加一个Map中的所有对象：`void putAll(Map m)`\n\n\n\n### TreeMap\n\n红黑二叉树的典型实现，排序key。\n\n\n\n### HashTable\n\n线程安全，效率低，不允许key或者value为null。\n\n\n\n## Set\n\n无序，不可重复。\n\n- 将元素添加进`Set<E>`：`boolean add(E e)`\n- 将元素从`Set<E>`删除：`boolean remove(Object e)`\n- 判断是否包含元素：`boolean contains(Object e)`\n\n\n\n### HashSet\n\n无序的，实现了`Set`接口，并没有实现`SortedSet`接口。\n\n\n\n### TreeSet\n\n有序的，实现了`SortedSet`接口。\n\n\n\n## 迭代器Iterator\n\n- 迭代器遍历List\n\n```java\nList<String> list = new ArrayList<>();\nfor (Iterator<String> it = list.iterator(); it.hasNext(); ) {\n     String s = it.next();\n     System.out.println(s);\n}\n```\n\n\n\n- 迭代器遍历Set\n\n```java\nSet<String> set = new HashSet<>();\nfor (Iterator<String> it = set.iterator(); it.hasNext(); ) {\n     String s = it.next();\n     System.out.println(s);\n}\n```\n\n\n\n- 迭代器遍历Map\n\n```java\nMap<Integer,String> map = new HashMap<>();\nSet <Entry<String,String>> s = map.entrySet();\nfor (Iterator<String> it = s.iterator(); it.hasNext(); ) {\n     Entry e = it.next();\n     System.out.println(e.getKey() + e.getValue());\n}\n```\n\n```java\nMap<Integer,String> map = new HashMap<>();\nSet<String> s = map.keySet();\nfor(Iterator<String> it = s.iterator(); it.hasNext(); ){\n    String key = it.next();\n    System.out.println(key + map.get(key));\n}\n```\n\n\n\n## Collections工具类\n\n- `void sort(List)`：对List元素升序排列\n\n- `void shuffle(List)`：对List容器内元素随机排列\n\n- `void reverse(List)`：对List元素逆转排列\n\n- `void fill(List,Object)`：用一个特定的对象重写List容器\n\n- `int binarySearch(List,Object)`：顺序折半查找\n","slug":"JAVA集合","published":1,"updated":"2022-07-27T17:04:41.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9w000m94wa4o3g92jw","content":"<h1 id=\"JAVA集合\"><a href=\"#JAVA集合\" class=\"headerlink\" title=\"JAVA集合\"></a>JAVA集合</h1><img src=\"/2020/06/29/java-ji-he/image-1.png\" class=\"\">\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li><p>优点：是一种简单的线性序列，可以快速地访问数组元素，效率高。如果从效率和类型检查的角度讲，数组是最好的。</p>\n</li>\n<li><p>缺点：不灵活。容量需要事先定义好，不能随着需求变化扩容。</p>\n</li>\n</ul>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>数据类型的参数化，数据类型的一个占位符（形式参数）。</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>有序，可重复。</p>\n<p>有三个实现类。ArrayList、LinkedList和Vector。</p>\n<ul>\n<li>在末尾添加一个元素：<code>boolean add(E e)</code></li>\n<li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li>\n<li>是否为空：<code>boolean isEmpty()</code></li>\n<li>删除某个元素：<code>boolean remove(Object e)</code></li>\n<li>清空：<code>void clear()</code></li>\n<li>获取指定索引的元素：<code>E get(int index)</code></li>\n<li>获取链表大小（包含元素的个数）：<code>int size()</code></li>\n<li>添加一个list：<code>boolean addAll(Collection c)</code></li>\n<li>删除与另一个list相同元素：<code>boolean removeAll(Collection c)</code></li>\n<li>取交集：<code>boolean retainAll(Collection c)</code></li>\n<li>是否包含另一个list：<code>boolean containsAll(Collection c)</code></li>\n</ul>\n<h3 id=\"Arraylist\"><a href=\"#Arraylist\" class=\"headerlink\" title=\"Arraylist\"></a>Arraylist</h3><p>用数组实现的存储。查询效率高，增删效率低，线程不安全。</p>\n<p>通过数组扩容的方式实现不限制大小。</p>\n<ul>\n<li><p>指定索引添加或替换：<code>boolean set(int index, E e)</code></p>\n</li>\n<li><p>删除指定索引的元素：<code>E remove(int index)</code></p>\n</li>\n<li><p>是否存在某个元素，返回第一次出现的索引：<code>int indexOf(E e)</code></p>\n</li>\n<li><p>是否存在某个元素，返回最后一次出现的索引：<code>int indexOf(E e)</code></p>\n</li>\n</ul>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>用双向链表实现的存储。查询效率低，增删效率高，线程不安全。</p>\n<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>用数组实现的存储，效率低，线程安全。相关方法做了同步检查synchronized。</p>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>存储键值对。键不可重复。</p>\n<p>实现类HashMap、TreeMap、HashTable、Properties</p>\n<h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><p>线程不安全，效率高，允许key或者value为null，</p>\n<ul>\n<li>添加一个键值对：<code>Object put(Object key,Object value)</code></li>\n<li>通过键查找值：<code>Object get(Object key)</code></li>\n<li>是否为空：<code>boolean isEmpty()</code></li>\n<li>删除指定键的键值对：<code>Object remove(Object key)</code></li>\n<li>是否包含键对象：<code>boolean containsKey(Object key)</code></li>\n<li>是否包含值对象：<code>boolean containsValue(Object value)</code></li>\n<li>清空：<code>void clear()</code></li>\n<li>获取Map大小（包含键值对的个数）：<code>int size()</code></li>\n<li>添加一个Map中的所有对象：<code>void putAll(Map m)</code></li>\n</ul>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><p>红黑二叉树的典型实现，排序key。</p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>线程安全，效率低，不允许key或者value为null。</p>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>无序，不可重复。</p>\n<ul>\n<li>将元素添加进<code>Set&lt;E&gt;</code>：<code>boolean add(E e)</code></li>\n<li>将元素从<code>Set&lt;E&gt;</code>删除：<code>boolean remove(Object e)</code></li>\n<li>判断是否包含元素：<code>boolean contains(Object e)</code></li>\n</ul>\n<h3 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h3><p>无序的，实现了<code>Set</code>接口，并没有实现<code>SortedSet</code>接口。</p>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><p>有序的，实现了<code>SortedSet</code>接口。</p>\n<h2 id=\"迭代器Iterator\"><a href=\"#迭代器Iterator\" class=\"headerlink\" title=\"迭代器Iterator\"></a>迭代器Iterator</h2><ul>\n<li>迭代器遍历List</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>迭代器遍历Set</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>迭代器遍历Map</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h2><ul>\n<li><p><code>void sort(List)</code>：对List元素升序排列</p>\n</li>\n<li><p><code>void shuffle(List)</code>：对List容器内元素随机排列</p>\n</li>\n<li><p><code>void reverse(List)</code>：对List元素逆转排列</p>\n</li>\n<li><p><code>void fill(List,Object)</code>：用一个特定的对象重写List容器</p>\n</li>\n<li><p><code>int binarySearch(List,Object)</code>：顺序折半查找</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA集合\"><a href=\"#JAVA集合\" class=\"headerlink\" title=\"JAVA集合\"></a>JAVA集合</h1><img src=\"/2020/06/29/java-ji-he/image-1.png\" class=\"\">\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li><p>优点：是一种简单的线性序列，可以快速地访问数组元素，效率高。如果从效率和类型检查的角度讲，数组是最好的。</p>\n</li>\n<li><p>缺点：不灵活。容量需要事先定义好，不能随着需求变化扩容。</p>\n</li>\n</ul>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>数据类型的参数化，数据类型的一个占位符（形式参数）。</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>有序，可重复。</p>\n<p>有三个实现类。ArrayList、LinkedList和Vector。</p>\n<ul>\n<li>在末尾添加一个元素：<code>boolean add(E e)</code></li>\n<li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li>\n<li>是否为空：<code>boolean isEmpty()</code></li>\n<li>删除某个元素：<code>boolean remove(Object e)</code></li>\n<li>清空：<code>void clear()</code></li>\n<li>获取指定索引的元素：<code>E get(int index)</code></li>\n<li>获取链表大小（包含元素的个数）：<code>int size()</code></li>\n<li>添加一个list：<code>boolean addAll(Collection c)</code></li>\n<li>删除与另一个list相同元素：<code>boolean removeAll(Collection c)</code></li>\n<li>取交集：<code>boolean retainAll(Collection c)</code></li>\n<li>是否包含另一个list：<code>boolean containsAll(Collection c)</code></li>\n</ul>\n<h3 id=\"Arraylist\"><a href=\"#Arraylist\" class=\"headerlink\" title=\"Arraylist\"></a>Arraylist</h3><p>用数组实现的存储。查询效率高，增删效率低，线程不安全。</p>\n<p>通过数组扩容的方式实现不限制大小。</p>\n<ul>\n<li><p>指定索引添加或替换：<code>boolean set(int index, E e)</code></p>\n</li>\n<li><p>删除指定索引的元素：<code>E remove(int index)</code></p>\n</li>\n<li><p>是否存在某个元素，返回第一次出现的索引：<code>int indexOf(E e)</code></p>\n</li>\n<li><p>是否存在某个元素，返回最后一次出现的索引：<code>int indexOf(E e)</code></p>\n</li>\n</ul>\n<h3 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h3><p>用双向链表实现的存储。查询效率低，增删效率高，线程不安全。</p>\n<h3 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h3><p>用数组实现的存储，效率低，线程安全。相关方法做了同步检查synchronized。</p>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><p>存储键值对。键不可重复。</p>\n<p>实现类HashMap、TreeMap、HashTable、Properties</p>\n<h3 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h3><p>线程不安全，效率高，允许key或者value为null，</p>\n<ul>\n<li>添加一个键值对：<code>Object put(Object key,Object value)</code></li>\n<li>通过键查找值：<code>Object get(Object key)</code></li>\n<li>是否为空：<code>boolean isEmpty()</code></li>\n<li>删除指定键的键值对：<code>Object remove(Object key)</code></li>\n<li>是否包含键对象：<code>boolean containsKey(Object key)</code></li>\n<li>是否包含值对象：<code>boolean containsValue(Object value)</code></li>\n<li>清空：<code>void clear()</code></li>\n<li>获取Map大小（包含键值对的个数）：<code>int size()</code></li>\n<li>添加一个Map中的所有对象：<code>void putAll(Map m)</code></li>\n</ul>\n<h3 id=\"TreeMap\"><a href=\"#TreeMap\" class=\"headerlink\" title=\"TreeMap\"></a>TreeMap</h3><p>红黑二叉树的典型实现，排序key。</p>\n<h3 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h3><p>线程安全，效率低，不允许key或者value为null。</p>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>无序，不可重复。</p>\n<ul>\n<li>将元素添加进<code>Set&lt;E&gt;</code>：<code>boolean add(E e)</code></li>\n<li>将元素从<code>Set&lt;E&gt;</code>删除：<code>boolean remove(Object e)</code></li>\n<li>判断是否包含元素：<code>boolean contains(Object e)</code></li>\n</ul>\n<h3 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h3><p>无序的，实现了<code>Set</code>接口，并没有实现<code>SortedSet</code>接口。</p>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><p>有序的，实现了<code>SortedSet</code>接口。</p>\n<h2 id=\"迭代器Iterator\"><a href=\"#迭代器Iterator\" class=\"headerlink\" title=\"迭代器Iterator\"></a>迭代器Iterator</h2><ul>\n<li>迭代器遍历List</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>迭代器遍历Set</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>迭代器遍历Map</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h2><ul>\n<li><p><code>void sort(List)</code>：对List元素升序排列</p>\n</li>\n<li><p><code>void shuffle(List)</code>：对List容器内元素随机排列</p>\n</li>\n<li><p><code>void reverse(List)</code>：对List元素逆转排列</p>\n</li>\n<li><p><code>void fill(List,Object)</code>：用一个特定的对象重写List容器</p>\n</li>\n<li><p><code>int binarySearch(List,Object)</code>：顺序折半查找</p>\n</li>\n</ul>\n"},{"title":"JAVA项目分层","date":"2021-07-13T11:19:35.000Z","_content":"\n# 参考阿里规范，优秀的 Java 项目代码该如何分层？\n\n来源：https://www.cnblogs.com/bainannan/p/14418277.html\n### 1.背景\n说起应用分层，大部分人都会认为这个不是很简单嘛 就controller，service, mapper三层。看起来简单，很多人其实并没有把他们职责划分开，在很多代码中, controller做的逻辑比service还多, service往往当成透传了。\n这其实是很多人开发代码都没有注意到的地方，反正功能也能用，至于放哪无所谓呗。这样往往造成后面代码无法复用，层级关系混乱，对后续代码的维护非常麻烦。\n的确在这些人眼中分层只是一个形式，前辈们的代码这么写的，其他项目代码这么写的，那么我也这么跟着写。\n但是在真正的团队开发中每个人的习惯都不同，写出来的代码必然带着自己的标签，有的人习惯controller写大量的业务逻辑，有的人习惯在service中之间调用远程服务，这样就导致了每个人的开发代码风格完全不同。\n后续其他人修改的时候，一看，我靠这个人写的代码和我平常的习惯完全不同，修改的时候到底是按着自己以前的习惯改，还是跟着前辈们走，这又是个艰难的选择，选择一旦有偏差，你的后辈又维护你的代码的时候，恐怕就要骂人了。\n所以一个好的应用分层需要具备以下几点:\n\n- 方便后续代码进行维护扩展。\n- 分层的效果需要让整个团队都接受\n- 各个层职责边界清晰\n### 2.如何进行分层\n##### 2.1阿里规范\n在阿里的编码规范中约束的分层如下:\n{% asset_img 1626175175_1.png %}\n开放接口层: 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量控制等。\n终端显示层: 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。\nWeb 层: 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。\nService 层: 相对具体的业务逻辑服务层。\nManager 层: 通用业务处理层，它有如下特征:1. 对第三方平台封装的层，预处理返回结果及转化异常信息;2. 对Service层通用能力的下沉，如缓存方案、中间件通用处理;3. 与DAO层交互，对多个DAO的组合复用。\nDAO 层: 数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。\n阿里巴巴规约中的分层比较清晰简单明了，但是描述得还是过于简单了，以及service层和manager层有很多同学还是有点分不清楚之间的关系，就导致了很多项目中根本没有Manager层的存在。下面介绍一下具体业务中应该如何实现分层\n##### 2.2优化分层\n从我们的业务开发中总结了一个较为的理想模型,这里要先说明一下由于我们的rpc框架选用的是thrift可能会比其他的一些rpc框架例如dubbo会多出一层,作用和controller层类似\n{% asset_img 1626175175_2.png %}\n1.最上层controller和TService是我们阿里分层规范里面的第一层: 轻业务逻辑，参数校验，异常兜底。通常这种接口可以轻易更换接口类型,所以业务逻辑必须要轻，甚至不做具体逻辑。\n2.Service：业务层，复用性较低，这里推荐每一个controller方法都得对应一个service,不要把业务编排放在controller中去做，为什么呢？\n如果我们把业务编排放在controller层去做的话，如果以后我们要接入thrift,我们这里又需要把业务编排在做一次，这样会导致我们每接入一个入口层这个代码都得重新复制一份如下图所示:\n{% asset_img 1626175175_3.png %}\n这样大量的重复工作必定会导致我们开发效率下降，所以我们需要把业务编排逻辑都得放进service中去做:\n{% asset_img 1626175175_4.png %}\n3.Mannager：可复用逻辑层。这里的Mannager可以是单个服务的，比如我们的cache,mq等等，当然也可以是复合的，当你需要调用多个Mannager的时候，这个可以合为一个Mannager，比如逻辑上的连表查询等。如果是httpMannager或rpcMannager需要在这一层做一些数据转换\n4.DAO：数据库访问层。主要负责“操作数据库的某张表，映射到某个java对象”，dao应该只允许自己的Service访问，其他Service要访问我的数据必须通过对应的Service。\n### 3.分层领域模型的转换\n在阿里巴巴编码规约中列举了下面几个领域模型规约:\n\n- DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。\n- DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。\n- BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。\n- AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。\n- VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。\n- Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。\n\n每一个层基本都自己对应的领域模型，这样就导致了有些人过于追求每一层都是用自己的领域模型，这样就导致了一个对象可能会出现3次甚至4次转换在一次请求中，当返回的时候同样也会出现3-4次转换，这样有可能一次完整的请求-返回会出现很多次对象转换。如果在开发中真的按照这么来，恐怕就别写其他的了，一天就光写这个重复无用的逻辑算了吧。\n所以我们得采取一个折中的方案:\n\n1. 允许Service/Manager可以操作数据领域模型，对于这个层级来说，本来自己做的工作也是做的是业务逻辑处理和数据组装。\n1. Controller/TService层的领域模型不允许传入DAO层，这样就不符合职责划分了。\n1. 同理，不允许DAO层的数据传入到Controller/TService.\n\n{% asset_img 1626175175_5.png %}\n### 4.总结\n总的来说业务分层对于代码规范是比较重要，决定着以后的代码是否可复用，是否职责清晰，边界清晰。\n当然这种分层其实见仁见智, 团队中的所有人的分层习惯也不同，所以很难权衡出一个标准的准则，总的来说只要满足职责逻辑清晰，后续维护容易，就是好的分层。\n","source":"_posts/JAVA项目分层.md","raw":"---\ntitle: JAVA项目分层\ndate: 2021-07-13 19:19:35\ntags: JAVA\ncategories: 编程\n---\n\n# 参考阿里规范，优秀的 Java 项目代码该如何分层？\n\n来源：https://www.cnblogs.com/bainannan/p/14418277.html\n### 1.背景\n说起应用分层，大部分人都会认为这个不是很简单嘛 就controller，service, mapper三层。看起来简单，很多人其实并没有把他们职责划分开，在很多代码中, controller做的逻辑比service还多, service往往当成透传了。\n这其实是很多人开发代码都没有注意到的地方，反正功能也能用，至于放哪无所谓呗。这样往往造成后面代码无法复用，层级关系混乱，对后续代码的维护非常麻烦。\n的确在这些人眼中分层只是一个形式，前辈们的代码这么写的，其他项目代码这么写的，那么我也这么跟着写。\n但是在真正的团队开发中每个人的习惯都不同，写出来的代码必然带着自己的标签，有的人习惯controller写大量的业务逻辑，有的人习惯在service中之间调用远程服务，这样就导致了每个人的开发代码风格完全不同。\n后续其他人修改的时候，一看，我靠这个人写的代码和我平常的习惯完全不同，修改的时候到底是按着自己以前的习惯改，还是跟着前辈们走，这又是个艰难的选择，选择一旦有偏差，你的后辈又维护你的代码的时候，恐怕就要骂人了。\n所以一个好的应用分层需要具备以下几点:\n\n- 方便后续代码进行维护扩展。\n- 分层的效果需要让整个团队都接受\n- 各个层职责边界清晰\n### 2.如何进行分层\n##### 2.1阿里规范\n在阿里的编码规范中约束的分层如下:\n{% asset_img 1626175175_1.png %}\n开放接口层: 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量控制等。\n终端显示层: 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。\nWeb 层: 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。\nService 层: 相对具体的业务逻辑服务层。\nManager 层: 通用业务处理层，它有如下特征:1. 对第三方平台封装的层，预处理返回结果及转化异常信息;2. 对Service层通用能力的下沉，如缓存方案、中间件通用处理;3. 与DAO层交互，对多个DAO的组合复用。\nDAO 层: 数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。\n阿里巴巴规约中的分层比较清晰简单明了，但是描述得还是过于简单了，以及service层和manager层有很多同学还是有点分不清楚之间的关系，就导致了很多项目中根本没有Manager层的存在。下面介绍一下具体业务中应该如何实现分层\n##### 2.2优化分层\n从我们的业务开发中总结了一个较为的理想模型,这里要先说明一下由于我们的rpc框架选用的是thrift可能会比其他的一些rpc框架例如dubbo会多出一层,作用和controller层类似\n{% asset_img 1626175175_2.png %}\n1.最上层controller和TService是我们阿里分层规范里面的第一层: 轻业务逻辑，参数校验，异常兜底。通常这种接口可以轻易更换接口类型,所以业务逻辑必须要轻，甚至不做具体逻辑。\n2.Service：业务层，复用性较低，这里推荐每一个controller方法都得对应一个service,不要把业务编排放在controller中去做，为什么呢？\n如果我们把业务编排放在controller层去做的话，如果以后我们要接入thrift,我们这里又需要把业务编排在做一次，这样会导致我们每接入一个入口层这个代码都得重新复制一份如下图所示:\n{% asset_img 1626175175_3.png %}\n这样大量的重复工作必定会导致我们开发效率下降，所以我们需要把业务编排逻辑都得放进service中去做:\n{% asset_img 1626175175_4.png %}\n3.Mannager：可复用逻辑层。这里的Mannager可以是单个服务的，比如我们的cache,mq等等，当然也可以是复合的，当你需要调用多个Mannager的时候，这个可以合为一个Mannager，比如逻辑上的连表查询等。如果是httpMannager或rpcMannager需要在这一层做一些数据转换\n4.DAO：数据库访问层。主要负责“操作数据库的某张表，映射到某个java对象”，dao应该只允许自己的Service访问，其他Service要访问我的数据必须通过对应的Service。\n### 3.分层领域模型的转换\n在阿里巴巴编码规约中列举了下面几个领域模型规约:\n\n- DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。\n- DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。\n- BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。\n- AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。\n- VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。\n- Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。\n\n每一个层基本都自己对应的领域模型，这样就导致了有些人过于追求每一层都是用自己的领域模型，这样就导致了一个对象可能会出现3次甚至4次转换在一次请求中，当返回的时候同样也会出现3-4次转换，这样有可能一次完整的请求-返回会出现很多次对象转换。如果在开发中真的按照这么来，恐怕就别写其他的了，一天就光写这个重复无用的逻辑算了吧。\n所以我们得采取一个折中的方案:\n\n1. 允许Service/Manager可以操作数据领域模型，对于这个层级来说，本来自己做的工作也是做的是业务逻辑处理和数据组装。\n1. Controller/TService层的领域模型不允许传入DAO层，这样就不符合职责划分了。\n1. 同理，不允许DAO层的数据传入到Controller/TService.\n\n{% asset_img 1626175175_5.png %}\n### 4.总结\n总的来说业务分层对于代码规范是比较重要，决定着以后的代码是否可复用，是否职责清晰，边界清晰。\n当然这种分层其实见仁见智, 团队中的所有人的分层习惯也不同，所以很难权衡出一个标准的准则，总的来说只要满足职责逻辑清晰，后续维护容易，就是好的分层。\n","slug":"JAVA项目分层","published":1,"updated":"2022-07-27T17:05:59.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9w000p94wa58a7by6t","content":"<h1 id=\"参考阿里规范，优秀的-Java-项目代码该如何分层？\"><a href=\"#参考阿里规范，优秀的-Java-项目代码该如何分层？\" class=\"headerlink\" title=\"参考阿里规范，优秀的 Java 项目代码该如何分层？\"></a>参考阿里规范，优秀的 Java 项目代码该如何分层？</h1><p>来源：<a href=\"https://www.cnblogs.com/bainannan/p/14418277.html\">https://www.cnblogs.com/bainannan/p/14418277.html</a></p>\n<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h3><p>说起应用分层，大部分人都会认为这个不是很简单嘛 就controller，service, mapper三层。看起来简单，很多人其实并没有把他们职责划分开，在很多代码中, controller做的逻辑比service还多, service往往当成透传了。<br>这其实是很多人开发代码都没有注意到的地方，反正功能也能用，至于放哪无所谓呗。这样往往造成后面代码无法复用，层级关系混乱，对后续代码的维护非常麻烦。<br>的确在这些人眼中分层只是一个形式，前辈们的代码这么写的，其他项目代码这么写的，那么我也这么跟着写。<br>但是在真正的团队开发中每个人的习惯都不同，写出来的代码必然带着自己的标签，有的人习惯controller写大量的业务逻辑，有的人习惯在service中之间调用远程服务，这样就导致了每个人的开发代码风格完全不同。<br>后续其他人修改的时候，一看，我靠这个人写的代码和我平常的习惯完全不同，修改的时候到底是按着自己以前的习惯改，还是跟着前辈们走，这又是个艰难的选择，选择一旦有偏差，你的后辈又维护你的代码的时候，恐怕就要骂人了。<br>所以一个好的应用分层需要具备以下几点:</p>\n<ul>\n<li>方便后续代码进行维护扩展。</li>\n<li>分层的效果需要让整个团队都接受</li>\n<li>各个层职责边界清晰<h3 id=\"2-如何进行分层\"><a href=\"#2-如何进行分层\" class=\"headerlink\" title=\"2.如何进行分层\"></a>2.如何进行分层</h3><h5 id=\"2-1阿里规范\"><a href=\"#2-1阿里规范\" class=\"headerlink\" title=\"2.1阿里规范\"></a>2.1阿里规范</h5>在阿里的编码规范中约束的分层如下:<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_1.png\" class=\"\">\n开放接口层: 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量控制等。<br>终端显示层: 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。<br>Web 层: 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。<br>Service 层: 相对具体的业务逻辑服务层。<br>Manager 层: 通用业务处理层，它有如下特征:1. 对第三方平台封装的层，预处理返回结果及转化异常信息;2. 对Service层通用能力的下沉，如缓存方案、中间件通用处理;3. 与DAO层交互，对多个DAO的组合复用。<br>DAO 层: 数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。<br>阿里巴巴规约中的分层比较清晰简单明了，但是描述得还是过于简单了，以及service层和manager层有很多同学还是有点分不清楚之间的关系，就导致了很多项目中根本没有Manager层的存在。下面介绍一下具体业务中应该如何实现分层<h5 id=\"2-2优化分层\"><a href=\"#2-2优化分层\" class=\"headerlink\" title=\"2.2优化分层\"></a>2.2优化分层</h5>从我们的业务开发中总结了一个较为的理想模型,这里要先说明一下由于我们的rpc框架选用的是thrift可能会比其他的一些rpc框架例如dubbo会多出一层,作用和controller层类似<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_2.png\" class=\"\"></li>\n</ul>\n<p>1.最上层controller和TService是我们阿里分层规范里面的第一层: 轻业务逻辑，参数校验，异常兜底。通常这种接口可以轻易更换接口类型,所以业务逻辑必须要轻，甚至不做具体逻辑。<br>2.Service：业务层，复用性较低，这里推荐每一个controller方法都得对应一个service,不要把业务编排放在controller中去做，为什么呢？<br>如果我们把业务编排放在controller层去做的话，如果以后我们要接入thrift,我们这里又需要把业务编排在做一次，这样会导致我们每接入一个入口层这个代码都得重新复制一份如下图所示:</p>\n<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_3.png\" class=\"\">\n<p>这样大量的重复工作必定会导致我们开发效率下降，所以我们需要把业务编排逻辑都得放进service中去做:</p>\n<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_4.png\" class=\"\">\n<p>3.Mannager：可复用逻辑层。这里的Mannager可以是单个服务的，比如我们的cache,mq等等，当然也可以是复合的，当你需要调用多个Mannager的时候，这个可以合为一个Mannager，比如逻辑上的连表查询等。如果是httpMannager或rpcMannager需要在这一层做一些数据转换<br>4.DAO：数据库访问层。主要负责“操作数据库的某张表，映射到某个java对象”，dao应该只允许自己的Service访问，其他Service要访问我的数据必须通过对应的Service。</p>\n<h3 id=\"3-分层领域模型的转换\"><a href=\"#3-分层领域模型的转换\" class=\"headerlink\" title=\"3.分层领域模型的转换\"></a>3.分层领域模型的转换</h3><p>在阿里巴巴编码规约中列举了下面几个领域模型规约:</p>\n<ul>\n<li>DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li>\n<li>DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。</li>\n<li>BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。</li>\n<li>AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>\n<li>VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li>\n<li>Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。</li>\n</ul>\n<p>每一个层基本都自己对应的领域模型，这样就导致了有些人过于追求每一层都是用自己的领域模型，这样就导致了一个对象可能会出现3次甚至4次转换在一次请求中，当返回的时候同样也会出现3-4次转换，这样有可能一次完整的请求-返回会出现很多次对象转换。如果在开发中真的按照这么来，恐怕就别写其他的了，一天就光写这个重复无用的逻辑算了吧。<br>所以我们得采取一个折中的方案:</p>\n<ol>\n<li>允许Service/Manager可以操作数据领域模型，对于这个层级来说，本来自己做的工作也是做的是业务逻辑处理和数据组装。</li>\n<li>Controller/TService层的领域模型不允许传入DAO层，这样就不符合职责划分了。</li>\n<li>同理，不允许DAO层的数据传入到Controller/TService.</li>\n</ol>\n<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_5.png\" class=\"\">\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h3><p>总的来说业务分层对于代码规范是比较重要，决定着以后的代码是否可复用，是否职责清晰，边界清晰。<br>当然这种分层其实见仁见智, 团队中的所有人的分层习惯也不同，所以很难权衡出一个标准的准则，总的来说只要满足职责逻辑清晰，后续维护容易，就是好的分层。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考阿里规范，优秀的-Java-项目代码该如何分层？\"><a href=\"#参考阿里规范，优秀的-Java-项目代码该如何分层？\" class=\"headerlink\" title=\"参考阿里规范，优秀的 Java 项目代码该如何分层？\"></a>参考阿里规范，优秀的 Java 项目代码该如何分层？</h1><p>来源：<a href=\"https://www.cnblogs.com/bainannan/p/14418277.html\">https://www.cnblogs.com/bainannan/p/14418277.html</a></p>\n<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1.背景\"></a>1.背景</h3><p>说起应用分层，大部分人都会认为这个不是很简单嘛 就controller，service, mapper三层。看起来简单，很多人其实并没有把他们职责划分开，在很多代码中, controller做的逻辑比service还多, service往往当成透传了。<br>这其实是很多人开发代码都没有注意到的地方，反正功能也能用，至于放哪无所谓呗。这样往往造成后面代码无法复用，层级关系混乱，对后续代码的维护非常麻烦。<br>的确在这些人眼中分层只是一个形式，前辈们的代码这么写的，其他项目代码这么写的，那么我也这么跟着写。<br>但是在真正的团队开发中每个人的习惯都不同，写出来的代码必然带着自己的标签，有的人习惯controller写大量的业务逻辑，有的人习惯在service中之间调用远程服务，这样就导致了每个人的开发代码风格完全不同。<br>后续其他人修改的时候，一看，我靠这个人写的代码和我平常的习惯完全不同，修改的时候到底是按着自己以前的习惯改，还是跟着前辈们走，这又是个艰难的选择，选择一旦有偏差，你的后辈又维护你的代码的时候，恐怕就要骂人了。<br>所以一个好的应用分层需要具备以下几点:</p>\n<ul>\n<li>方便后续代码进行维护扩展。</li>\n<li>分层的效果需要让整个团队都接受</li>\n<li>各个层职责边界清晰<h3 id=\"2-如何进行分层\"><a href=\"#2-如何进行分层\" class=\"headerlink\" title=\"2.如何进行分层\"></a>2.如何进行分层</h3><h5 id=\"2-1阿里规范\"><a href=\"#2-1阿里规范\" class=\"headerlink\" title=\"2.1阿里规范\"></a>2.1阿里规范</h5>在阿里的编码规范中约束的分层如下:<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_1.png\" class=\"\">\n开放接口层: 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行 网关安全控制、流量控制等。<br>终端显示层: 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。<br>Web 层: 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。<br>Service 层: 相对具体的业务逻辑服务层。<br>Manager 层: 通用业务处理层，它有如下特征:1. 对第三方平台封装的层，预处理返回结果及转化异常信息;2. 对Service层通用能力的下沉，如缓存方案、中间件通用处理;3. 与DAO层交互，对多个DAO的组合复用。<br>DAO 层: 数据访问层，与底层 MySQL、Oracle、Hbase 进行数据交互。<br>阿里巴巴规约中的分层比较清晰简单明了，但是描述得还是过于简单了，以及service层和manager层有很多同学还是有点分不清楚之间的关系，就导致了很多项目中根本没有Manager层的存在。下面介绍一下具体业务中应该如何实现分层<h5 id=\"2-2优化分层\"><a href=\"#2-2优化分层\" class=\"headerlink\" title=\"2.2优化分层\"></a>2.2优化分层</h5>从我们的业务开发中总结了一个较为的理想模型,这里要先说明一下由于我们的rpc框架选用的是thrift可能会比其他的一些rpc框架例如dubbo会多出一层,作用和controller层类似<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_2.png\" class=\"\"></li>\n</ul>\n<p>1.最上层controller和TService是我们阿里分层规范里面的第一层: 轻业务逻辑，参数校验，异常兜底。通常这种接口可以轻易更换接口类型,所以业务逻辑必须要轻，甚至不做具体逻辑。<br>2.Service：业务层，复用性较低，这里推荐每一个controller方法都得对应一个service,不要把业务编排放在controller中去做，为什么呢？<br>如果我们把业务编排放在controller层去做的话，如果以后我们要接入thrift,我们这里又需要把业务编排在做一次，这样会导致我们每接入一个入口层这个代码都得重新复制一份如下图所示:</p>\n<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_3.png\" class=\"\">\n<p>这样大量的重复工作必定会导致我们开发效率下降，所以我们需要把业务编排逻辑都得放进service中去做:</p>\n<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_4.png\" class=\"\">\n<p>3.Mannager：可复用逻辑层。这里的Mannager可以是单个服务的，比如我们的cache,mq等等，当然也可以是复合的，当你需要调用多个Mannager的时候，这个可以合为一个Mannager，比如逻辑上的连表查询等。如果是httpMannager或rpcMannager需要在这一层做一些数据转换<br>4.DAO：数据库访问层。主要负责“操作数据库的某张表，映射到某个java对象”，dao应该只允许自己的Service访问，其他Service要访问我的数据必须通过对应的Service。</p>\n<h3 id=\"3-分层领域模型的转换\"><a href=\"#3-分层领域模型的转换\" class=\"headerlink\" title=\"3.分层领域模型的转换\"></a>3.分层领域模型的转换</h3><p>在阿里巴巴编码规约中列举了下面几个领域模型规约:</p>\n<ul>\n<li>DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。</li>\n<li>DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。</li>\n<li>BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。</li>\n<li>AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>\n<li>VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。</li>\n<li>Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。</li>\n</ul>\n<p>每一个层基本都自己对应的领域模型，这样就导致了有些人过于追求每一层都是用自己的领域模型，这样就导致了一个对象可能会出现3次甚至4次转换在一次请求中，当返回的时候同样也会出现3-4次转换，这样有可能一次完整的请求-返回会出现很多次对象转换。如果在开发中真的按照这么来，恐怕就别写其他的了，一天就光写这个重复无用的逻辑算了吧。<br>所以我们得采取一个折中的方案:</p>\n<ol>\n<li>允许Service/Manager可以操作数据领域模型，对于这个层级来说，本来自己做的工作也是做的是业务逻辑处理和数据组装。</li>\n<li>Controller/TService层的领域模型不允许传入DAO层，这样就不符合职责划分了。</li>\n<li>同理，不允许DAO层的数据传入到Controller/TService.</li>\n</ol>\n<img src=\"/2021/07/13/java-xiang-mu-fen-ceng/1626175175_5.png\" class=\"\">\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h3><p>总的来说业务分层对于代码规范是比较重要，决定着以后的代码是否可复用，是否职责清晰，边界清晰。<br>当然这种分层其实见仁见智, 团队中的所有人的分层习惯也不同，所以很难权衡出一个标准的准则，总的来说只要满足职责逻辑清晰，后续维护容易，就是好的分层。</p>\n"},{"title":"JVM","date":"2022-06-13T11:06:11.000Z","_content":"\n# JVM入门【持续补充】\n\n## jvm的位置\n\n{% asset_img image-1.png %}\n\n\n\n## jvm的体系结构\n\n- 源文件由编译器编译成字节码（ByteCode） \n- 字节码由java虚拟机解释运行。因为java程序既要编译同时也要经过JVM的解释运行\n\n{% asset_img image-2.png %}\n\n1. 类加载器（Class Loader）子系统\n\n2. 执行引擎（Execution Engine）\n\n3. 运行时数据区(Runtime Data Area)\n\n   - 线程私有数据区（不会有垃圾回收）\n\n     1. Java栈 VM Stack\n\n        - 是Java方法执行的内存模型。\n\n        - **Java栈中存放的是一个个的栈帧，** 每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。\n        - 当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。\n        - 会有两种异常StackOverFlowError和 OutOfMemoryError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoryError。它是线程私有的，生命周期与线程相同。\n\n     2. 本地方法栈 Native Method\n\n        - Java栈是为执行Java方法服务的， 而本地方法栈则是为执行本地方法（Native Method）服务的。\n        - 与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常\n        - 在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。\n\n     3. 程序计数器 Program Counter Register\n\n        - 程序计数器是一块较小的内存空间， **可以看作是当前线程所执行的字节码的行号指示器。** 分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n        - 由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，**每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储**，我们称这类内存区域为 **“线程私有”** 的内存。\n        - 如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。\n        - 程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)\n\n   - 线程共享数据区（需要垃圾回收：堆）\n\n     1. 方法区Method Area\n        - 用于存储类信息（构造方法、接口定义）、常量池、静态变量、JIT编译后的代码等数据，（永久代是HotSpot虚拟机特有的概念，是对方法区的实现，别的JVM没有永久代的概念） \n        - 被所有线程共享\n     2. 堆 heap\n\n\n\n## 类加载器\n\n- 作用：加载class文件\n\n {% asset_img image-3.png %}\n\n {% asset_img image-4.png %}\n- 分类（对象.getClass().getClassLoader()）\n  1. 虚拟机自带的加载器\n  2. 启动类（根）加载器（/jre/lib/rt.jar）\n  3. 扩展类加载器（/jre/lib/ext）\n  4. 应用程序加载器\n\n\n\n## 双亲委派机制\n\n1. 类加载器收到类加载的请求\n2. 将请求向上委托给父类加载器中，一直向上委托，能加载就结束并使用当前加载器。APP类加载器 --> ext加载器 --> BOOT（最终执行）\n3. 不能加载则抛出异常（Class not found），通知子加载器进行加载\n\n\n\n## 沙箱安全机制\n\n1. Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱**主要限制系统资源访问**，那系统资源包括什么？——CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。\n\n2. 安全模型\n\n   当前最新的安全机制实现，则引入了域 (Domain) 的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域 (Protected Domain)，对应不一样的权限 (Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示 最新的安全模型(jdk 1.6)\n   ![在这里插入图片描述](https://img-blog.csdn.net/20181022103108566?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMzM2NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n3. doPrivileged 方法能够使一段受信任代码获得更大的权限，甚至比调用它的应用程序还要多，可做到临时访问更多的资源。有时候这是非常必要的，可以应付一些特殊的应用场景。例如，应用程序可能无法直接访问某些系统资源，但这样的应用程序必须得到这些资源才能够完成功能。\n\n4. 基本组件：\n\n   - 字节码校验器（bytecode verifier）：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。\n\n   - 类装载器\n\n     （class loader）：其中类装载器在3个方面对Java沙箱起作用\n\n     - 它防止恶意代码去干涉善意的代码；\n     - 它守护了被信任的类库边界；\n     - 它将代码归入保护域，确定了代码可以进行哪些操作。\n\n     虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。\n\n   - 存取控制器（access controller）：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。\n   - 安全管理器（security manager）：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。\n   - 安全软件包（security package）：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：\n     - 安全提供者\n     - 消息摘要\n     - 数字签名\n     - 加密\n     - 鉴别\n\n5. 要素：\n\n   1. 权限\n   2. 代码源\n   3. 保护欲\n   4. 策略文件\n   5. 密钥库\n\n\n\n## native关键字\n\n- 超出java的作用范围，去调底层c库\n\n- 会进入本地方法栈，调用本地方法接口（JNI），扩展java的使用\n- 本地方法栈，登记本地native方法\n- 最终执行时通过JNI加载本地方法库\n\n\n\n## 栈帧\n\n {% asset_img image-6.png %}\n\n\n\n## 堆\n\n- 一个JVM只有一个堆内存，大小可以调节\n\n- 保存类、方法、常量、变量、引用类型的真实对象\n\n- 分区\n\n  - 新生区\n\n    - 类的初始至结束\n    - 伊甸园区（Eden） -->满了触发轻GC\n    - 幸存者0区\n    - 幸存者1区\n\n  - 养老区（Old）\n\n  - 永久区（Perm）【逻辑上存在，物理上不存在，有人称为非堆】\n\n    - 常驻内存，用来存放JDK自身携带的对象，interface元数据，存储的是JAVA运行时的环境和类信息\n    - 不存在垃圾回收\n    - 关闭虚拟机会释放内存\n\n    - jdk6之前，永久代，常量池在方法区\n    - jdk7，永久代，常量池在堆中\n    - jdk8之后，无永久代，称为元空间，常量池在元空间\n\n\n\n## GC垃圾回收\n\n- 轻量级GC 新生区\n\n  伊甸园区满了会触发轻GC，有的对象仍存在引用，存到幸存者区。幸存者区满了进养老区\n\n- 重量级GC 新生区和养老区\n\n  新生区满了触发重GC（据调查，99%的对象是临时对象）\n\n\n\n## OOM问题（OutOfMemoryError）\n\n1. 尝试扩大堆内存\n\n   -Xms1024m -Xmx1024m -XX:+PrintGCDetails\n\n2. JProfile分析内存，内存快照分析工具\n\n   1. 分析Dump内存文件，快速定位内存泄露\n   \n      -Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemory\n   \n      // -Xms 设置初始化内存分配大小\n   \n      // -Xmx 设置最大分配内存\n   \n {% asset_img image-6.png %}\n   \n {% asset_img image-7.png %}\n   \n   2. 获得堆中的数据\n   \n   3. 获得大的对象\n\n\n\n## GC引用计数法\n\n {% asset_img image-8.png %}\n\n\n\n\n## GC复制算法\n\n- 主要用于年轻代\n- 好处：没有内存的碎片\n- 坏处：浪费了内存空间，有一半空间是空的（to区）\n- 最佳使用场景：对象存活度较低\n\n {% asset_img image-9.png %}\n\n {% asset_img image-10.png %}\n\n\n\n## GC标记压缩清除算法\n\n- 描述\n\n  1. 扫描对象，对活着的对象进行标记\n\n  2. 对没有标记的对象进行清除\n\n {% asset_img image-11.png %}\n\n- 优点：不需要额外的空间\n\n- 缺点：两次扫描，严重浪费时间，产生内存碎片\n\n- 再优化：压缩：防止内存碎片\n\n  - 再次扫描，多了移动成本\n\n  - 多次清除后再压缩节约成本\n\n {% asset_img image-12.png %}\n\n## GC算法总结\n\n- 内存效率：复制算法 > 标记清除算法 > 标记压缩算法（时间复杂度）\n- 内存整齐度：复制算法 = 标记压缩算法 > 标记清除算法\n- 内存利用率：标记压缩算法 = 标记清除算法 > 复制算法\n\n\n\n## 分代收集算法\n\n年轻代：存活率低，复制算法\n\n老年代：区域大，存活率高，标记清除和标记压缩混合实现\n\n\n\n## JMM\n\n1. 描述：\n\n   - java内存模型 ，java memory model。 \n\n     {% asset_img image-13.png %}\n\n   - 定义了线程工作内存和主内存的抽象关系，线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory）\n\n {% asset_img image-14.png %}\n \n   - 缓存一致性协议，用于定义数据读写的规则\n\n2. volilate 解决对象可见性\n\n   - 表示这个变量在不同线程中是共享，编译器与运行时都会注意到这个变量是**共享**的，因此不会对该变量进行**重排序**。\n   - volatile关键字保证可见性、有序性。但不保证原子性。\n\n3. **JMM的八种交互操作**（每个操作都为[原子操作](https://so.csdn.net/so/search?q=原子操作&spm=1001.2101.3001.7020)）\n\n   - lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态\n   - unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定\n   - read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用\n   - load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中\n   - use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令\n   - assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中\n   - store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用\n   - write 　（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中\n\n4. 八种操作的规则\n\n   - 不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write\n   - 不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存\n   - 不允许一个线程将没有assign的数据从工作内存同步回主内存\n   - 一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作\n   - 一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁\n   - 如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值\n   - 如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量\n   - 对一个变量进行unlock操作之前，必须把此变量同步回主内存","source":"_posts/JVM.md","raw":"---\ntitle: JVM\ndate: 2022-06-13 19:06:11\ntags: JAVA\ncategories: 编程\n---\n\n# JVM入门【持续补充】\n\n## jvm的位置\n\n{% asset_img image-1.png %}\n\n\n\n## jvm的体系结构\n\n- 源文件由编译器编译成字节码（ByteCode） \n- 字节码由java虚拟机解释运行。因为java程序既要编译同时也要经过JVM的解释运行\n\n{% asset_img image-2.png %}\n\n1. 类加载器（Class Loader）子系统\n\n2. 执行引擎（Execution Engine）\n\n3. 运行时数据区(Runtime Data Area)\n\n   - 线程私有数据区（不会有垃圾回收）\n\n     1. Java栈 VM Stack\n\n        - 是Java方法执行的内存模型。\n\n        - **Java栈中存放的是一个个的栈帧，** 每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。\n        - 当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。\n        - 会有两种异常StackOverFlowError和 OutOfMemoryError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoryError。它是线程私有的，生命周期与线程相同。\n\n     2. 本地方法栈 Native Method\n\n        - Java栈是为执行Java方法服务的， 而本地方法栈则是为执行本地方法（Native Method）服务的。\n        - 与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常\n        - 在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。\n\n     3. 程序计数器 Program Counter Register\n\n        - 程序计数器是一块较小的内存空间， **可以看作是当前线程所执行的字节码的行号指示器。** 分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n        - 由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，**每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储**，我们称这类内存区域为 **“线程私有”** 的内存。\n        - 如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。\n        - 程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)\n\n   - 线程共享数据区（需要垃圾回收：堆）\n\n     1. 方法区Method Area\n        - 用于存储类信息（构造方法、接口定义）、常量池、静态变量、JIT编译后的代码等数据，（永久代是HotSpot虚拟机特有的概念，是对方法区的实现，别的JVM没有永久代的概念） \n        - 被所有线程共享\n     2. 堆 heap\n\n\n\n## 类加载器\n\n- 作用：加载class文件\n\n {% asset_img image-3.png %}\n\n {% asset_img image-4.png %}\n- 分类（对象.getClass().getClassLoader()）\n  1. 虚拟机自带的加载器\n  2. 启动类（根）加载器（/jre/lib/rt.jar）\n  3. 扩展类加载器（/jre/lib/ext）\n  4. 应用程序加载器\n\n\n\n## 双亲委派机制\n\n1. 类加载器收到类加载的请求\n2. 将请求向上委托给父类加载器中，一直向上委托，能加载就结束并使用当前加载器。APP类加载器 --> ext加载器 --> BOOT（最终执行）\n3. 不能加载则抛出异常（Class not found），通知子加载器进行加载\n\n\n\n## 沙箱安全机制\n\n1. Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱**主要限制系统资源访问**，那系统资源包括什么？——CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。\n\n2. 安全模型\n\n   当前最新的安全机制实现，则引入了域 (Domain) 的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域 (Protected Domain)，对应不一样的权限 (Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示 最新的安全模型(jdk 1.6)\n   ![在这里插入图片描述](https://img-blog.csdn.net/20181022103108566?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMzM2NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n3. doPrivileged 方法能够使一段受信任代码获得更大的权限，甚至比调用它的应用程序还要多，可做到临时访问更多的资源。有时候这是非常必要的，可以应付一些特殊的应用场景。例如，应用程序可能无法直接访问某些系统资源，但这样的应用程序必须得到这些资源才能够完成功能。\n\n4. 基本组件：\n\n   - 字节码校验器（bytecode verifier）：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。\n\n   - 类装载器\n\n     （class loader）：其中类装载器在3个方面对Java沙箱起作用\n\n     - 它防止恶意代码去干涉善意的代码；\n     - 它守护了被信任的类库边界；\n     - 它将代码归入保护域，确定了代码可以进行哪些操作。\n\n     虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。\n\n   - 存取控制器（access controller）：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。\n   - 安全管理器（security manager）：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。\n   - 安全软件包（security package）：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：\n     - 安全提供者\n     - 消息摘要\n     - 数字签名\n     - 加密\n     - 鉴别\n\n5. 要素：\n\n   1. 权限\n   2. 代码源\n   3. 保护欲\n   4. 策略文件\n   5. 密钥库\n\n\n\n## native关键字\n\n- 超出java的作用范围，去调底层c库\n\n- 会进入本地方法栈，调用本地方法接口（JNI），扩展java的使用\n- 本地方法栈，登记本地native方法\n- 最终执行时通过JNI加载本地方法库\n\n\n\n## 栈帧\n\n {% asset_img image-6.png %}\n\n\n\n## 堆\n\n- 一个JVM只有一个堆内存，大小可以调节\n\n- 保存类、方法、常量、变量、引用类型的真实对象\n\n- 分区\n\n  - 新生区\n\n    - 类的初始至结束\n    - 伊甸园区（Eden） -->满了触发轻GC\n    - 幸存者0区\n    - 幸存者1区\n\n  - 养老区（Old）\n\n  - 永久区（Perm）【逻辑上存在，物理上不存在，有人称为非堆】\n\n    - 常驻内存，用来存放JDK自身携带的对象，interface元数据，存储的是JAVA运行时的环境和类信息\n    - 不存在垃圾回收\n    - 关闭虚拟机会释放内存\n\n    - jdk6之前，永久代，常量池在方法区\n    - jdk7，永久代，常量池在堆中\n    - jdk8之后，无永久代，称为元空间，常量池在元空间\n\n\n\n## GC垃圾回收\n\n- 轻量级GC 新生区\n\n  伊甸园区满了会触发轻GC，有的对象仍存在引用，存到幸存者区。幸存者区满了进养老区\n\n- 重量级GC 新生区和养老区\n\n  新生区满了触发重GC（据调查，99%的对象是临时对象）\n\n\n\n## OOM问题（OutOfMemoryError）\n\n1. 尝试扩大堆内存\n\n   -Xms1024m -Xmx1024m -XX:+PrintGCDetails\n\n2. JProfile分析内存，内存快照分析工具\n\n   1. 分析Dump内存文件，快速定位内存泄露\n   \n      -Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemory\n   \n      // -Xms 设置初始化内存分配大小\n   \n      // -Xmx 设置最大分配内存\n   \n {% asset_img image-6.png %}\n   \n {% asset_img image-7.png %}\n   \n   2. 获得堆中的数据\n   \n   3. 获得大的对象\n\n\n\n## GC引用计数法\n\n {% asset_img image-8.png %}\n\n\n\n\n## GC复制算法\n\n- 主要用于年轻代\n- 好处：没有内存的碎片\n- 坏处：浪费了内存空间，有一半空间是空的（to区）\n- 最佳使用场景：对象存活度较低\n\n {% asset_img image-9.png %}\n\n {% asset_img image-10.png %}\n\n\n\n## GC标记压缩清除算法\n\n- 描述\n\n  1. 扫描对象，对活着的对象进行标记\n\n  2. 对没有标记的对象进行清除\n\n {% asset_img image-11.png %}\n\n- 优点：不需要额外的空间\n\n- 缺点：两次扫描，严重浪费时间，产生内存碎片\n\n- 再优化：压缩：防止内存碎片\n\n  - 再次扫描，多了移动成本\n\n  - 多次清除后再压缩节约成本\n\n {% asset_img image-12.png %}\n\n## GC算法总结\n\n- 内存效率：复制算法 > 标记清除算法 > 标记压缩算法（时间复杂度）\n- 内存整齐度：复制算法 = 标记压缩算法 > 标记清除算法\n- 内存利用率：标记压缩算法 = 标记清除算法 > 复制算法\n\n\n\n## 分代收集算法\n\n年轻代：存活率低，复制算法\n\n老年代：区域大，存活率高，标记清除和标记压缩混合实现\n\n\n\n## JMM\n\n1. 描述：\n\n   - java内存模型 ，java memory model。 \n\n     {% asset_img image-13.png %}\n\n   - 定义了线程工作内存和主内存的抽象关系，线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory）\n\n {% asset_img image-14.png %}\n \n   - 缓存一致性协议，用于定义数据读写的规则\n\n2. volilate 解决对象可见性\n\n   - 表示这个变量在不同线程中是共享，编译器与运行时都会注意到这个变量是**共享**的，因此不会对该变量进行**重排序**。\n   - volatile关键字保证可见性、有序性。但不保证原子性。\n\n3. **JMM的八种交互操作**（每个操作都为[原子操作](https://so.csdn.net/so/search?q=原子操作&spm=1001.2101.3001.7020)）\n\n   - lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态\n   - unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定\n   - read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用\n   - load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中\n   - use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令\n   - assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中\n   - store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用\n   - write 　（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中\n\n4. 八种操作的规则\n\n   - 不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write\n   - 不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存\n   - 不允许一个线程将没有assign的数据从工作内存同步回主内存\n   - 一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作\n   - 一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁\n   - 如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值\n   - 如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量\n   - 对一个变量进行unlock操作之前，必须把此变量同步回主内存","slug":"JVM","published":1,"updated":"2022-10-13T15:29:47.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9x000s94wa1qbkdeft","content":"<h1 id=\"JVM入门【持续补充】\"><a href=\"#JVM入门【持续补充】\" class=\"headerlink\" title=\"JVM入门【持续补充】\"></a>JVM入门【持续补充】</h1><h2 id=\"jvm的位置\"><a href=\"#jvm的位置\" class=\"headerlink\" title=\"jvm的位置\"></a>jvm的位置</h2><img src=\"/2022/06/13/jvm/image-1.png\" class=\"\">\n\n\n\n<h2 id=\"jvm的体系结构\"><a href=\"#jvm的体系结构\" class=\"headerlink\" title=\"jvm的体系结构\"></a>jvm的体系结构</h2><ul>\n<li>源文件由编译器编译成字节码（ByteCode） </li>\n<li>字节码由java虚拟机解释运行。因为java程序既要编译同时也要经过JVM的解释运行</li>\n</ul>\n<img src=\"/2022/06/13/jvm/image-2.png\" class=\"\">\n\n<ol>\n<li><p>类加载器（Class Loader）子系统</p>\n</li>\n<li><p>执行引擎（Execution Engine）</p>\n</li>\n<li><p>运行时数据区(Runtime Data Area)</p>\n<ul>\n<li><p>线程私有数据区（不会有垃圾回收）</p>\n<ol>\n<li><p>Java栈 VM Stack</p>\n<ul>\n<li><p>是Java方法执行的内存模型。</p>\n</li>\n<li><p><strong>Java栈中存放的是一个个的栈帧，</strong> 每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。</p>\n</li>\n<li><p>当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。</p>\n</li>\n<li><p>会有两种异常StackOverFlowError和 OutOfMemoryError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoryError。它是线程私有的，生命周期与线程相同。</p>\n</li>\n</ul>\n</li>\n<li><p>本地方法栈 Native Method</p>\n<ul>\n<li>Java栈是为执行Java方法服务的， 而本地方法栈则是为执行本地方法（Native Method）服务的。</li>\n<li>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常</li>\n<li>在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。</li>\n</ul>\n</li>\n<li><p>程序计数器 Program Counter Register</p>\n<ul>\n<li>程序计数器是一块较小的内存空间， <strong>可以看作是当前线程所执行的字节码的行号指示器。</strong> 分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li>\n<li>由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，<strong>每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储</strong>，我们称这类内存区域为 <strong>“线程私有”</strong> 的内存。</li>\n<li>如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。</li>\n<li>程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>线程共享数据区（需要垃圾回收：堆）</p>\n<ol>\n<li>方法区Method Area<ul>\n<li>用于存储类信息（构造方法、接口定义）、常量池、静态变量、JIT编译后的代码等数据，（永久代是HotSpot虚拟机特有的概念，是对方法区的实现，别的JVM没有永久代的概念） </li>\n<li>被所有线程共享</li>\n</ul>\n</li>\n<li>堆 heap</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>作用：加载class文件</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-3.png\" class=\"\">\n\n <img src=\"/2022/06/13/jvm/image-4.png\" class=\"\">\n<ul>\n<li>分类（对象.getClass().getClassLoader()）<ol>\n<li>虚拟机自带的加载器</li>\n<li>启动类（根）加载器（/jre/lib/rt.jar）</li>\n<li>扩展类加载器（/jre/lib/ext）</li>\n<li>应用程序加载器</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><ol>\n<li>类加载器收到类加载的请求</li>\n<li>将请求向上委托给父类加载器中，一直向上委托，能加载就结束并使用当前加载器。APP类加载器 –&gt; ext加载器 –&gt; BOOT（最终执行）</li>\n<li>不能加载则抛出异常（Class not found），通知子加载器进行加载</li>\n</ol>\n<h2 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h2><ol>\n<li><p>Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱<strong>主要限制系统资源访问</strong>，那系统资源包括什么？——CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p>\n</li>\n<li><p>安全模型</p>\n<p>当前最新的安全机制实现，则引入了域 (Domain) 的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域 (Protected Domain)，对应不一样的权限 (Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示 最新的安全模型(jdk 1.6)<br><img src=\"https://img-blog.csdn.net/20181022103108566?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMzM2NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>doPrivileged 方法能够使一段受信任代码获得更大的权限，甚至比调用它的应用程序还要多，可做到临时访问更多的资源。有时候这是非常必要的，可以应付一些特殊的应用场景。例如，应用程序可能无法直接访问某些系统资源，但这样的应用程序必须得到这些资源才能够完成功能。</p>\n</li>\n<li><p>基本组件：</p>\n<ul>\n<li><p>字节码校验器（bytecode verifier）：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p>\n</li>\n<li><p>类装载器</p>\n<p>（class loader）：其中类装载器在3个方面对Java沙箱起作用</p>\n<ul>\n<li>它防止恶意代码去干涉善意的代码；</li>\n<li>它守护了被信任的类库边界；</li>\n<li>它将代码归入保护域，确定了代码可以进行哪些操作。</li>\n</ul>\n</li>\n</ul>\n<p>  虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。</p>\n<ul>\n<li>存取控制器（access controller）：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。</li>\n<li>安全管理器（security manager）：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li>\n<li>安全软件包（security package）：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：<ul>\n<li>安全提供者</li>\n<li>消息摘要</li>\n<li>数字签名</li>\n<li>加密</li>\n<li>鉴别</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要素：</p>\n<ol>\n<li>权限</li>\n<li>代码源</li>\n<li>保护欲</li>\n<li>策略文件</li>\n<li>密钥库</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"native关键字\"><a href=\"#native关键字\" class=\"headerlink\" title=\"native关键字\"></a>native关键字</h2><ul>\n<li><p>超出java的作用范围，去调底层c库</p>\n</li>\n<li><p>会进入本地方法栈，调用本地方法接口（JNI），扩展java的使用</p>\n</li>\n<li><p>本地方法栈，登记本地native方法</p>\n</li>\n<li><p>最终执行时通过JNI加载本地方法库</p>\n</li>\n</ul>\n<h2 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h2> <img src=\"/2022/06/13/jvm/image-6.png\" class=\"\">\n\n\n\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><ul>\n<li><p>一个JVM只有一个堆内存，大小可以调节</p>\n</li>\n<li><p>保存类、方法、常量、变量、引用类型的真实对象</p>\n</li>\n<li><p>分区</p>\n<ul>\n<li><p>新生区</p>\n<ul>\n<li>类的初始至结束</li>\n<li>伊甸园区（Eden） –&gt;满了触发轻GC</li>\n<li>幸存者0区</li>\n<li>幸存者1区</li>\n</ul>\n</li>\n<li><p>养老区（Old）</p>\n</li>\n<li><p>永久区（Perm）【逻辑上存在，物理上不存在，有人称为非堆】</p>\n<ul>\n<li><p>常驻内存，用来存放JDK自身携带的对象，interface元数据，存储的是JAVA运行时的环境和类信息</p>\n</li>\n<li><p>不存在垃圾回收</p>\n</li>\n<li><p>关闭虚拟机会释放内存</p>\n</li>\n<li><p>jdk6之前，永久代，常量池在方法区</p>\n</li>\n<li><p>jdk7，永久代，常量池在堆中</p>\n</li>\n<li><p>jdk8之后，无永久代，称为元空间，常量池在元空间</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"GC垃圾回收\"><a href=\"#GC垃圾回收\" class=\"headerlink\" title=\"GC垃圾回收\"></a>GC垃圾回收</h2><ul>\n<li><p>轻量级GC 新生区</p>\n<p>伊甸园区满了会触发轻GC，有的对象仍存在引用，存到幸存者区。幸存者区满了进养老区</p>\n</li>\n<li><p>重量级GC 新生区和养老区</p>\n<p>新生区满了触发重GC（据调查，99%的对象是临时对象）</p>\n</li>\n</ul>\n<h2 id=\"OOM问题（OutOfMemoryError）\"><a href=\"#OOM问题（OutOfMemoryError）\" class=\"headerlink\" title=\"OOM问题（OutOfMemoryError）\"></a>OOM问题（OutOfMemoryError）</h2><ol>\n<li><p>尝试扩大堆内存</p>\n<p>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</p>\n</li>\n<li><p>JProfile分析内存，内存快照分析工具</p>\n<ol>\n<li><p>分析Dump内存文件，快速定位内存泄露</p>\n<p>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemory</p>\n<p>// -Xms 设置初始化内存分配大小</p>\n<p>// -Xmx 设置最大分配内存</p>\n</li>\n</ol>\n</li>\n</ol>\n <img src=\"/2022/06/13/jvm/image-6.png\" class=\"\">\n <img src=\"/2022/06/13/jvm/image-7.png\" class=\"\">\n<ol start=\"2\">\n<li>获得堆中的数据</li>\n<li>获得大的对象</li>\n</ol>\n<h2 id=\"GC引用计数法\"><a href=\"#GC引用计数法\" class=\"headerlink\" title=\"GC引用计数法\"></a>GC引用计数法</h2> <img src=\"/2022/06/13/jvm/image-8.png\" class=\"\">\n\n\n\n\n<h2 id=\"GC复制算法\"><a href=\"#GC复制算法\" class=\"headerlink\" title=\"GC复制算法\"></a>GC复制算法</h2><ul>\n<li>主要用于年轻代</li>\n<li>好处：没有内存的碎片</li>\n<li>坏处：浪费了内存空间，有一半空间是空的（to区）</li>\n<li>最佳使用场景：对象存活度较低</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-9.png\" class=\"\">\n\n <img src=\"/2022/06/13/jvm/image-10.png\" class=\"\">\n\n\n\n<h2 id=\"GC标记压缩清除算法\"><a href=\"#GC标记压缩清除算法\" class=\"headerlink\" title=\"GC标记压缩清除算法\"></a>GC标记压缩清除算法</h2><ul>\n<li><p>描述</p>\n<ol>\n<li><p>扫描对象，对活着的对象进行标记</p>\n</li>\n<li><p>对没有标记的对象进行清除</p>\n</li>\n</ol>\n</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-11.png\" class=\"\">\n\n<ul>\n<li><p>优点：不需要额外的空间</p>\n</li>\n<li><p>缺点：两次扫描，严重浪费时间，产生内存碎片</p>\n</li>\n<li><p>再优化：压缩：防止内存碎片</p>\n<ul>\n<li><p>再次扫描，多了移动成本</p>\n</li>\n<li><p>多次清除后再压缩节约成本</p>\n</li>\n</ul>\n</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-12.png\" class=\"\">\n\n<h2 id=\"GC算法总结\"><a href=\"#GC算法总结\" class=\"headerlink\" title=\"GC算法总结\"></a>GC算法总结</h2><ul>\n<li>内存效率：复制算法 &gt; 标记清除算法 &gt; 标记压缩算法（时间复杂度）</li>\n<li>内存整齐度：复制算法 = 标记压缩算法 &gt; 标记清除算法</li>\n<li>内存利用率：标记压缩算法 = 标记清除算法 &gt; 复制算法</li>\n</ul>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>年轻代：存活率低，复制算法</p>\n<p>老年代：区域大，存活率高，标记清除和标记压缩混合实现</p>\n<h2 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h2><ol>\n<li><p>描述：</p>\n<ul>\n<li><p>java内存模型 ，java memory model。 </p>\n<img src=\"/2022/06/13/jvm/image-13.png\" class=\"\"></li>\n<li><p>定义了线程工作内存和主内存的抽象关系，线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory）</p>\n</li>\n</ul>\n</li>\n</ol>\n <img src=\"/2022/06/13/jvm/image-14.png\" class=\"\">\n<ul>\n<li>缓存一致性协议，用于定义数据读写的规则</li>\n</ul>\n<ol start=\"2\">\n<li><p>volilate 解决对象可见性</p>\n<ul>\n<li>表示这个变量在不同线程中是共享，编译器与运行时都会注意到这个变量是<strong>共享</strong>的，因此不会对该变量进行<strong>重排序</strong>。</li>\n<li>volatile关键字保证可见性、有序性。但不保证原子性。</li>\n</ul>\n</li>\n<li><p><strong>JMM的八种交互操作</strong>（每个操作都为<a href=\"https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C&spm=1001.2101.3001.7020\">原子操作</a>）</p>\n<ul>\n<li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>\n<li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>\n<li>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>\n<li>load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li>\n<li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>\n<li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>\n<li>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li>\n<li>write 　（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>\n</ul>\n</li>\n<li><p>八种操作的规则</p>\n<ul>\n<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>\n<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li>\n<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>\n<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作</li>\n<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>\n<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>\n<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>\n<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JVM入门【持续补充】\"><a href=\"#JVM入门【持续补充】\" class=\"headerlink\" title=\"JVM入门【持续补充】\"></a>JVM入门【持续补充】</h1><h2 id=\"jvm的位置\"><a href=\"#jvm的位置\" class=\"headerlink\" title=\"jvm的位置\"></a>jvm的位置</h2><img src=\"/2022/06/13/jvm/image-1.png\" class=\"\">\n\n\n\n<h2 id=\"jvm的体系结构\"><a href=\"#jvm的体系结构\" class=\"headerlink\" title=\"jvm的体系结构\"></a>jvm的体系结构</h2><ul>\n<li>源文件由编译器编译成字节码（ByteCode） </li>\n<li>字节码由java虚拟机解释运行。因为java程序既要编译同时也要经过JVM的解释运行</li>\n</ul>\n<img src=\"/2022/06/13/jvm/image-2.png\" class=\"\">\n\n<ol>\n<li><p>类加载器（Class Loader）子系统</p>\n</li>\n<li><p>执行引擎（Execution Engine）</p>\n</li>\n<li><p>运行时数据区(Runtime Data Area)</p>\n<ul>\n<li><p>线程私有数据区（不会有垃圾回收）</p>\n<ol>\n<li><p>Java栈 VM Stack</p>\n<ul>\n<li><p>是Java方法执行的内存模型。</p>\n</li>\n<li><p><strong>Java栈中存放的是一个个的栈帧，</strong> 每个栈帧对应一个被调用的方法，在栈帧中包括局部变量表(Local Variables)、操作数栈(Operand Stack)、指向当前方法所属的类的运行时常量池的引用(Reference to runtime constant pool)、方法返回地址(Return Address)和一些额外的附加信息。</p>\n</li>\n<li><p>当线程执行一个方法时，就会随之创建一个对应的栈帧，并将建立的栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。</p>\n</li>\n<li><p>会有两种异常StackOverFlowError和 OutOfMemoryError。当线程请求栈深度大于虚拟机所允许的深度就会抛出StackOverFlowError错误；虚拟机栈动态扩展，当扩展无法申请到足够的内存空间时候，抛出OutOfMemoryError。它是线程私有的，生命周期与线程相同。</p>\n</li>\n</ul>\n</li>\n<li><p>本地方法栈 Native Method</p>\n<ul>\n<li>Java栈是为执行Java方法服务的， 而本地方法栈则是为执行本地方法（Native Method）服务的。</li>\n<li>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常</li>\n<li>在JVM规范中，并没有对本地方发展的具体实现方法以及数据结构作强制规定，虚拟机可以自由实现它。在HotSopt虚拟机中直接就把本地方法栈和Java栈合二为一。</li>\n</ul>\n</li>\n<li><p>程序计数器 Program Counter Register</p>\n<ul>\n<li>程序计数器是一块较小的内存空间， <strong>可以看作是当前线程所执行的字节码的行号指示器。</strong> 分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li>\n<li>由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，<strong>每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储</strong>，我们称这类内存区域为 <strong>“线程私有”</strong> 的内存。</li>\n<li>如果线程执行的是非native方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是native方法，则程序计数器中的值是undefined。</li>\n<li>程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>线程共享数据区（需要垃圾回收：堆）</p>\n<ol>\n<li>方法区Method Area<ul>\n<li>用于存储类信息（构造方法、接口定义）、常量池、静态变量、JIT编译后的代码等数据，（永久代是HotSpot虚拟机特有的概念，是对方法区的实现，别的JVM没有永久代的概念） </li>\n<li>被所有线程共享</li>\n</ul>\n</li>\n<li>堆 heap</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><ul>\n<li>作用：加载class文件</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-3.png\" class=\"\">\n\n <img src=\"/2022/06/13/jvm/image-4.png\" class=\"\">\n<ul>\n<li>分类（对象.getClass().getClassLoader()）<ol>\n<li>虚拟机自带的加载器</li>\n<li>启动类（根）加载器（/jre/lib/rt.jar）</li>\n<li>扩展类加载器（/jre/lib/ext）</li>\n<li>应用程序加载器</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><ol>\n<li>类加载器收到类加载的请求</li>\n<li>将请求向上委托给父类加载器中，一直向上委托，能加载就结束并使用当前加载器。APP类加载器 –&gt; ext加载器 –&gt; BOOT（最终执行）</li>\n<li>不能加载则抛出异常（Class not found），通知子加载器进行加载</li>\n</ol>\n<h2 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h2><ol>\n<li><p>Java安全模型的核心就是Java沙箱（sandbox），什么是沙箱？沙箱是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机(JVM)特定的运行范围中，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱<strong>主要限制系统资源访问</strong>，那系统资源包括什么？——CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p>\n</li>\n<li><p>安全模型</p>\n<p>当前最新的安全机制实现，则引入了域 (Domain) 的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域 (Protected Domain)，对应不一样的权限 (Permission)。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示 最新的安全模型(jdk 1.6)<br><img src=\"https://img-blog.csdn.net/20181022103108566?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwMzM2NDMz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li><p>doPrivileged 方法能够使一段受信任代码获得更大的权限，甚至比调用它的应用程序还要多，可做到临时访问更多的资源。有时候这是非常必要的，可以应付一些特殊的应用场景。例如，应用程序可能无法直接访问某些系统资源，但这样的应用程序必须得到这些资源才能够完成功能。</p>\n</li>\n<li><p>基本组件：</p>\n<ul>\n<li><p>字节码校验器（bytecode verifier）：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</p>\n</li>\n<li><p>类装载器</p>\n<p>（class loader）：其中类装载器在3个方面对Java沙箱起作用</p>\n<ul>\n<li>它防止恶意代码去干涉善意的代码；</li>\n<li>它守护了被信任的类库边界；</li>\n<li>它将代码归入保护域，确定了代码可以进行哪些操作。</li>\n</ul>\n</li>\n</ul>\n<p>  虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由Java虚拟机为每一个类装载器维护的，它们互相之间甚至不可见。</p>\n<ul>\n<li>存取控制器（access controller）：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。</li>\n<li>安全管理器（security manager）：是核心API和操作系统之间的主要接口。实现权限控制，比存取控制器优先级高。</li>\n<li>安全软件包（security package）：java.security下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：<ul>\n<li>安全提供者</li>\n<li>消息摘要</li>\n<li>数字签名</li>\n<li>加密</li>\n<li>鉴别</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>要素：</p>\n<ol>\n<li>权限</li>\n<li>代码源</li>\n<li>保护欲</li>\n<li>策略文件</li>\n<li>密钥库</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"native关键字\"><a href=\"#native关键字\" class=\"headerlink\" title=\"native关键字\"></a>native关键字</h2><ul>\n<li><p>超出java的作用范围，去调底层c库</p>\n</li>\n<li><p>会进入本地方法栈，调用本地方法接口（JNI），扩展java的使用</p>\n</li>\n<li><p>本地方法栈，登记本地native方法</p>\n</li>\n<li><p>最终执行时通过JNI加载本地方法库</p>\n</li>\n</ul>\n<h2 id=\"栈帧\"><a href=\"#栈帧\" class=\"headerlink\" title=\"栈帧\"></a>栈帧</h2> <img src=\"/2022/06/13/jvm/image-6.png\" class=\"\">\n\n\n\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><ul>\n<li><p>一个JVM只有一个堆内存，大小可以调节</p>\n</li>\n<li><p>保存类、方法、常量、变量、引用类型的真实对象</p>\n</li>\n<li><p>分区</p>\n<ul>\n<li><p>新生区</p>\n<ul>\n<li>类的初始至结束</li>\n<li>伊甸园区（Eden） –&gt;满了触发轻GC</li>\n<li>幸存者0区</li>\n<li>幸存者1区</li>\n</ul>\n</li>\n<li><p>养老区（Old）</p>\n</li>\n<li><p>永久区（Perm）【逻辑上存在，物理上不存在，有人称为非堆】</p>\n<ul>\n<li><p>常驻内存，用来存放JDK自身携带的对象，interface元数据，存储的是JAVA运行时的环境和类信息</p>\n</li>\n<li><p>不存在垃圾回收</p>\n</li>\n<li><p>关闭虚拟机会释放内存</p>\n</li>\n<li><p>jdk6之前，永久代，常量池在方法区</p>\n</li>\n<li><p>jdk7，永久代，常量池在堆中</p>\n</li>\n<li><p>jdk8之后，无永久代，称为元空间，常量池在元空间</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"GC垃圾回收\"><a href=\"#GC垃圾回收\" class=\"headerlink\" title=\"GC垃圾回收\"></a>GC垃圾回收</h2><ul>\n<li><p>轻量级GC 新生区</p>\n<p>伊甸园区满了会触发轻GC，有的对象仍存在引用，存到幸存者区。幸存者区满了进养老区</p>\n</li>\n<li><p>重量级GC 新生区和养老区</p>\n<p>新生区满了触发重GC（据调查，99%的对象是临时对象）</p>\n</li>\n</ul>\n<h2 id=\"OOM问题（OutOfMemoryError）\"><a href=\"#OOM问题（OutOfMemoryError）\" class=\"headerlink\" title=\"OOM问题（OutOfMemoryError）\"></a>OOM问题（OutOfMemoryError）</h2><ol>\n<li><p>尝试扩大堆内存</p>\n<p>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</p>\n</li>\n<li><p>JProfile分析内存，内存快照分析工具</p>\n<ol>\n<li><p>分析Dump内存文件，快速定位内存泄露</p>\n<p>-Xms1m -Xmx8m -XX:+HeapDumpOnOutOfMemory</p>\n<p>// -Xms 设置初始化内存分配大小</p>\n<p>// -Xmx 设置最大分配内存</p>\n</li>\n</ol>\n</li>\n</ol>\n <img src=\"/2022/06/13/jvm/image-6.png\" class=\"\">\n <img src=\"/2022/06/13/jvm/image-7.png\" class=\"\">\n<ol start=\"2\">\n<li>获得堆中的数据</li>\n<li>获得大的对象</li>\n</ol>\n<h2 id=\"GC引用计数法\"><a href=\"#GC引用计数法\" class=\"headerlink\" title=\"GC引用计数法\"></a>GC引用计数法</h2> <img src=\"/2022/06/13/jvm/image-8.png\" class=\"\">\n\n\n\n\n<h2 id=\"GC复制算法\"><a href=\"#GC复制算法\" class=\"headerlink\" title=\"GC复制算法\"></a>GC复制算法</h2><ul>\n<li>主要用于年轻代</li>\n<li>好处：没有内存的碎片</li>\n<li>坏处：浪费了内存空间，有一半空间是空的（to区）</li>\n<li>最佳使用场景：对象存活度较低</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-9.png\" class=\"\">\n\n <img src=\"/2022/06/13/jvm/image-10.png\" class=\"\">\n\n\n\n<h2 id=\"GC标记压缩清除算法\"><a href=\"#GC标记压缩清除算法\" class=\"headerlink\" title=\"GC标记压缩清除算法\"></a>GC标记压缩清除算法</h2><ul>\n<li><p>描述</p>\n<ol>\n<li><p>扫描对象，对活着的对象进行标记</p>\n</li>\n<li><p>对没有标记的对象进行清除</p>\n</li>\n</ol>\n</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-11.png\" class=\"\">\n\n<ul>\n<li><p>优点：不需要额外的空间</p>\n</li>\n<li><p>缺点：两次扫描，严重浪费时间，产生内存碎片</p>\n</li>\n<li><p>再优化：压缩：防止内存碎片</p>\n<ul>\n<li><p>再次扫描，多了移动成本</p>\n</li>\n<li><p>多次清除后再压缩节约成本</p>\n</li>\n</ul>\n</li>\n</ul>\n <img src=\"/2022/06/13/jvm/image-12.png\" class=\"\">\n\n<h2 id=\"GC算法总结\"><a href=\"#GC算法总结\" class=\"headerlink\" title=\"GC算法总结\"></a>GC算法总结</h2><ul>\n<li>内存效率：复制算法 &gt; 标记清除算法 &gt; 标记压缩算法（时间复杂度）</li>\n<li>内存整齐度：复制算法 = 标记压缩算法 &gt; 标记清除算法</li>\n<li>内存利用率：标记压缩算法 = 标记清除算法 &gt; 复制算法</li>\n</ul>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>年轻代：存活率低，复制算法</p>\n<p>老年代：区域大，存活率高，标记清除和标记压缩混合实现</p>\n<h2 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h2><ol>\n<li><p>描述：</p>\n<ul>\n<li><p>java内存模型 ，java memory model。 </p>\n<img src=\"/2022/06/13/jvm/image-13.png\" class=\"\"></li>\n<li><p>定义了线程工作内存和主内存的抽象关系，线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory）</p>\n</li>\n</ul>\n</li>\n</ol>\n <img src=\"/2022/06/13/jvm/image-14.png\" class=\"\">\n<ul>\n<li>缓存一致性协议，用于定义数据读写的规则</li>\n</ul>\n<ol start=\"2\">\n<li><p>volilate 解决对象可见性</p>\n<ul>\n<li>表示这个变量在不同线程中是共享，编译器与运行时都会注意到这个变量是<strong>共享</strong>的，因此不会对该变量进行<strong>重排序</strong>。</li>\n<li>volatile关键字保证可见性、有序性。但不保证原子性。</li>\n</ul>\n</li>\n<li><p><strong>JMM的八种交互操作</strong>（每个操作都为<a href=\"https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C&spm=1001.2101.3001.7020\">原子操作</a>）</p>\n<ul>\n<li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>\n<li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>\n<li>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>\n<li>load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li>\n<li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>\n<li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>\n<li>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li>\n<li>write 　（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>\n</ul>\n</li>\n<li><p>八种操作的规则</p>\n<ul>\n<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>\n<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li>\n<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>\n<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作</li>\n<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>\n<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>\n<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>\n<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Lambda表达式","date":"2020-06-13T11:52:30.000Z","_content":"\n# Lambda表达式\n\n格式\n\n```java\n(param1,param2) -> {// 重写方法的代码}\n```\n\n- 使用lambda必须有接口（函数式接口），接口中有且仅有一个抽象方法\n- 使用lambda必须具有上下文推断","source":"_posts/Lambda.md","raw":"---\ntitle: Lambda表达式\ndate: 2020-06-13 19:52:30\ntags: JAVA\ncategories: 编程\n---\n\n# Lambda表达式\n\n格式\n\n```java\n(param1,param2) -> {// 重写方法的代码}\n```\n\n- 使用lambda必须有接口（函数式接口），接口中有且仅有一个抽象方法\n- 使用lambda必须具有上下文推断","slug":"Lambda","published":1,"updated":"2022-08-25T12:03:07.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9y000v94wa0wfa7mm6","content":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>格式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span>param2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重写方法的代码&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用lambda必须有接口（函数式接口），接口中有且仅有一个抽象方法</li>\n<li>使用lambda必须具有上下文推断</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h1><p>格式</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span>param2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重写方法的代码&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用lambda必须有接口（函数式接口），接口中有且仅有一个抽象方法</li>\n<li>使用lambda必须具有上下文推断</li>\n</ul>\n"},{"title":"redis","date":"2022-02-17T13:09:31.000Z","_content":"# Redis\n\n## 描述\n\nREmote DIctionary Server(Redis) 是 key-value 存储系统，是跨平台的非关系型数据库。\n\nredis基于内存操作，cpu不是redis性能瓶颈，瓶颈是根据机器的内存和网络带宽，单线程。多线程会产生cpu上下文的切换，耗时\n\n {% asset_img image-1.png %}\n\n\n\n## 优势\n\n**高性能**\n\n假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。\n\n**高并发**\n\n一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。\n\n> QPS（Query Per Second）：服务器每秒可以执行的查询次数\n\n\n\n## Redis 数据结构\n\n- **5 种基础数据结构** ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\n\n  - String\n\n  {% asset_img image-2.png %}\n\n  {% asset_img image-3.png %}\n\n  {% asset_img image-4.png %}\n\n  {% asset_img image-5.png %}\n\n  {% asset_img image-6.png %}\n\n  {% asset_img image-7.png %}\n\n  {% asset_img image-8.png %}\n\n  {% asset_img image-9.png %}\n\n  - List\n\n   {% asset_img image-10.png %}\n\n   {% asset_img image-11.png %}\n\n   {% asset_img image-12.png %}\n\n   {% asset_img image-13.png %}\n\n   {% asset_img image-14.png %}\n\n   {% asset_img image-15.png %}\n\n   {% asset_img image-16.png %}\n\n   {% asset_img image-17.png %}\n\n   {% asset_img image-18.png %}\n\n  - Set\n\n   {% asset_img image-19.png %}\n   {% asset_img image-20.png %}\n   {% asset_img image-21.png %}\n   {% asset_img image-22.png %}\n   {% asset_img image-23.png %}\n   {% asset_img image-24.png %}\n\n  - Hash\n\n   {% asset_img image-25.png %}\n   {% asset_img image-26.png %}\n    ![image-20220923193049607](C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220923193049607.png)\n\n{% asset_img image-27.png %}\n{% asset_img image-28.png %}\n  - Zset（有序集合）\n\n{% asset_img image-29.png %}\n{% asset_img image-30.png %}\n{% asset_img image-31.png %}\n{% asset_img image-32.png %}\n\n- **3 种特殊数据结构** ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\n\n  - Geospatial \n\n  {% asset_img image-33.png %}\n  {% asset_img image-34.png %}\n  {% asset_img image-35.png %}\n  {% asset_img image-36.png %}\n  {% asset_img image-37.png %}\n  {% asset_img image-38.png %}\n\n  - Hyperloglog基数\n\n    优点：查找不重复的元素，占内存小，12k内存，可以用于统计网页uv，比传统set方式节省空间\n\n      {% asset_img image-39.png %}\n        {% asset_img image-40.png %}\n\n  - Bitmaps位图\n\n  {% asset_img image-41.png %}\n  {% asset_img image-42.png %}\n  {% asset_img image-43.png %}\n    \n\n## 性能测试\n\n1. redis-benchmark -h localhost -p 6379 -c 100 -n 100000\n\n​\t\t-c 100 100个并发连接\n\n​\t\t-n 100000 每个连接100000个请求\n\n​\t![image-20220921230507325](C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230507325.png)\n\n2. 分析\n\n![image-20220921230332185](C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230332185.png)\n\n\n\n## 事务\n\n- 一组命令的集合。一个事务中的所有命令会被序列化。事务执行时按顺序执行。redis单条命令是保证原子性的，但是事务不保证原子性，没有隔离级别的概念。\n\n- 三个阶段\n\n  - 开启事务\n  - 命令入队\n  - 执行事务\n\n  ```bash\n  multi\n  set k1 v1\n  set k2 v2\n  get k1\n  exec\n  ```\n\n  - 取消事务 `dicard`\n\n- 异常\n\n  - 编译型异常\n\n      {% asset_img image-44.png %}\n\n  - 运行时异常\n\n      {% asset_img image-45.png %}\n- 乐观锁，监视测试\n\n  - 获取version\n  - 更新的时候比较version\n  - 事务执行失败，解锁unwatch\n\n      {% asset_img image-46.png %}\n      {% asset_img image-47.png %}\n\n\n## Jedis\n\n1. 依赖\n\n   ```java\n       <dependencies>\n           <!--导入Jedis的包-->\n           <dependency>\n               <groupId>redis.clients</groupId>\n               <artifactId>jedis</artifactId>\n               <version>4.2.3</version>\n           </dependency>\n           <!--导入fastjson的包-->\n           <dependency>\n               <groupId>com.alibaba</groupId>\n               <artifactId>fastjson</artifactId>\n               <version>2.0.13</version>\n           </dependency>\n       </dependencies>\n   ```\n\n2. 测试ping\n\n   ```java\n   public class TestPingRedis {\n       public static void main(String[] args) {\n           Jedis jedis = new Jedis(\"127.0.0.1\",6379);\n           System.out.println(jedis.ping());\n       }\n   }\n   ```\n\n3. 测试事务\n\n   ```java\n       public static void main(String[] args) {\n           Jedis jedis = new Jedis(\"127.0.0.1\",6379);\n           jedis.flushDB();\n           JSONObject jsonObject = new JSONObject();\n           jsonObject.put(\"a\",\"one\");\n           jsonObject.put(\"b\",\"two\");\n           jsonObject.put(\"c\",\"three\");\n           // 开启事务\n           Transaction transaction = jedis.multi();\n           try{\n               transaction.set(\"json1\",jsonObject.toString());\n               transaction.set(\"json2\",jsonObject.toString());\n               transaction.exec();\n           }\n           catch(Exception e){\n               transaction.discard();\n               e.printStackTrace();\n           }finally {\n               System.out.println(jedis.get(\"json1\"));\n               System.out.println(jedis.get(\"json2\"));\n               jedis.close();\n           }\n       }\n   ```\n\n   \n\n## 整合SpringBoot\n\nspringboot 2.x后，jedis被替换为了lettuce。jedis多个线程操作不安全，jedis pool（BIO）。lettuce采用netty，可以在多个线程中共享（NIO）\n\n      {% asset_img image-48.png %}\n\n\nRedis配置文件\n\n- network\n\n  ```bash\n  bind 127.0.0.1 #绑定ip\n  protected-mode yes #保护模式\n  port 6379 #端口\n  ```\n\n- general\n\n  ```bash\n  daemonize yes #守护进程的方式运行，默认是no\n  pidfile /var/run/redis_6379.pid #指定后台运行的pid文件\n  loglevel notice # 日志等级\n  logfile \"\" # 日志文件位置\n  databases 16 # 数据库数量，默认16个\n  ```\n\n- 快照\n\n  ```bash\n  save 3600 100 # 规定时间内，做了多少次操作会持久化到文件.rdb .aof\n  stop-writes-on-bgsave-error yes # 持久化出错是否继续工作\n  rdbcompression yes # 是否压缩rdb文件\n  rdbchecksum yes # 保存rdb文件的时候错误校验\n  dir ./ # rdb文件的位置\n  ```\n\n- 安全\n\n  ```\n  requirepass password # 设置密码，命令config set requirepass \"password\"\n  ```\n\n- 限制\n\n  ```bash\n  maxclients 1000 # 设置连接redis客户端最大数量\n  maxmemory <bytes> # redis配置最大的内存容量\n  maxmemory-policy noeviction # 内存到达上限的处理策略\n  ```\n\n  - maxmemory-policy\n\n    1. volatile-lru：只对设置了过期时间的key进行LRU（默认值） \n\n    2. allkeys-lru ： 删除lru算法的key  \n\n    3. volatile-random：随机删除即将过期key  \n\n    4. allkeys-random：随机删除  \n\n    5. volatile-ttl ： 删除即将过期的  \n\n    6. noeviction ： 永不过期，返回错误\n\n- Append Only模式 aof配置\n\n  ```bash\n  appendonly no # 默认不开启aof，默认使用rdb方式持久化\n  appendfsync everysec # 每秒执行一次sync，可能丢失1s的数据\n  appendfsync always # 每次修改执行sync，消耗性能\n  appendfsync no # 不执行sync，操作系统自己同步\n  ```\n\n\n\n## 持久化RDB（redis database）\n\n      {% asset_img image-49.png %}\n- 描述：\n\n  ​\t\tRedis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了。再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF更加高效，RDB的缺点是最后一次持久化后的数据可能丢失。\n\n- 触发机制\n\n  - save规则满足，自动触发\n  - 执行flushall命令\n  - 退出redis\n\n- 恢复rdb文件\n\n  1. 将rdb文件放在redis启动目录，redis启动自动检查\n  2. config get dir 得到启动目录\n\n- 优点\n\n  - 适合大规模的数据恢复\n\n  - 对数据的完整性要求不高\n\n- 缺点\n  - 需要一定的时间间隔进行操作，如果redis意外宕机，最后一次修改的数据会丢失\n  - fork进程占用一定的内存空间\n\n\n\n## 持久化AOF（Append Only File）\n\n- 描述\n\n  将所有的命令记录下来放入history文件，恢复的时候执行此文件。以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，但是不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作\n\n{% asset_img image-50.png %}\n- 优点\n\n  - 每次修改都同步，文件的完整性好\n  - 每秒同步，可能会丢失一秒的数据\n  - 从不同步效率最高\n\n- 缺点\n\n  - aof文件数据较大，修复速度慢\n  - aof运行效率慢\n\n\n\n## Redis发布订阅\n\n原理;\n\n通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道!，而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定channel的订阅链表中。\n\n通过PUBLSH命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。\n\n\n\n## Redis主从复制\n\n- 描述：\n\n  主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(masterleader)，后者称为从节点(slave/follower);数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。\n\n- 作用：\n\n  - 数据冗余：实现了数据的热备份\n  - 故障恢复：主节点出现故障，从节点提供服务\n  - 负载均衡：在主从复制的基础上，配合读写分离，分担服务器负载，提高服务器的并发量\n  - 高可用集群的基础\n\n- 查看当前库的信息：info-replication\n\n{% asset_img image-51.png %}\n- 操作步骤\n\n  1. 复制配置文件\n  2. 修改端口、pid、log文件名字、dump.rdb名字\n\n{% asset_img image-52.png %}\n- 配置从机\n\n  ```bash\n  slaveof 127.0.0.1 6379 # 从属于主机的地址\n  ```\n\n{% asset_img image-53.png %}\n- 复制原理\n\n  Slave启动成功连接到master后会发送一个sync命令\n  Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。\n\n  - 全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。\n  - 增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。\n\n{% asset_img image-54.png %}\n- salveof no one\n\n  如果主机断开了连接，可以使用这个命令来让自己成为主节点，其他的结点就可以手动连接到最新的这个主节点。如果这个时候主机修复了，那就只能重新连接\n\n\n\n## 哨兵模式（Sentinel）\n\n- 原理\n\n  Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是**哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例**\n\n{% asset_img image-55.png %}\n- 作用\n\n  1. 通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器\n  2. 当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让他们切换主机\n\n- 多哨兵模式\n\n  一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。\n\n  哨兵1先检测到主机宕机，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。如果主机此时回来了，只能归并到新的主机下，当做从机。\n\n{% asset_img image-56.png %}\n- 配置sentinel.conf\n\n{% asset_img image-57.png %}\n- 启动哨兵\n\n  ```bash\n  redis-sentinel ../etc/sentinal.conf\n  ```\n\n- 优点\n\n  1. 哨兵模式，基于主从复制模式，所有主从配置的优点它都有\n  2. 主从可以切换，故障可以转移，系统的可用性就会更好\n  3. 哨兵模式就是主从模式的升级，手动到自动，更加健壮\n\n- 缺点\n\n  1. Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦\n  2. 实现哨兵模式的配置是比较复杂\n\n- 哨兵配置\n\n  ```bash\n  # Example sentinel.conf\n   \n  # 哨兵sentinel实例运行的端口 默认26379\n  port 26379\n   \n  # 哨兵sentinel的工作目录\n  dir /tmp\n   \n  # 哨兵sentinel监控的redis主节点的 ip port \n  # master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符\".-_\"组成。\n  # quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了\n  # sentinel monitor <master-name> <ip> <redis-port> <quorum>\n  sentinel monitor mymaster 127.0.0.1 6379 1\n   \n  # 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码\n  # 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码\n  # sentinel auth-pass <master-name> <password>\n  sentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n   \n   \n  # 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒\n  # sentinel down-after-milliseconds <master-name> <milliseconds>\n  sentinel down-after-milliseconds mymaster 30000\n   \n  # 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，\n  这个数字越小，完成failover所需的时间就越长，\n  但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。\n  可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。\n  # sentinel parallel-syncs <master-name> <numslaves>\n  sentinel parallel-syncs mymaster 1\n   \n   \n   \n  # 故障转移的超时时间 failover-timeout 可以用在以下这些方面： \n  #1. 同一个sentinel对同一个master两次failover之间的间隔时间。\n  #2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。\n  #3.当想要取消一个正在进行的failover所需要的时间。  \n  #4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了\n  # 默认三分钟\n  # sentinel failover-timeout <master-name> <milliseconds>\n  sentinel failover-timeout mymaster 180000\n   \n  # SCRIPTS EXECUTION\n   \n  #配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。\n  #对于脚本的运行结果有以下规则：\n  #若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10\n  #若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。\n  #如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。\n  #一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。\n   \n  #通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，\n  #这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，\n  #一个是事件的类型，\n  #一个是事件的描述。\n  #如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。\n  #通知脚本\n  # sentinel notification-script <master-name> <script-path>\n    sentinel notification-script mymaster /var/redis/notify.sh\n   \n  # 客户端重新配置主节点参数脚本\n  # 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。\n  # 以下参数将会在调用脚本时传给脚本:\n  # <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>\n  # 目前<state>总是“failover”,\n  # <role>是“leader”或者“observer”中的一个。 \n  # 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的\n  # 这个脚本应该是通用的，能被多次调用，不是针对性的。\n  # sentinel client-reconfig-script <master-name> <script-path>\n  sentinel client-reconfig-script mymaster /var/redis/reconfig.sh\n  ```\n\n  \n\n## Redis缓存穿透\n\n- 描述：\n\n  用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。\n\n- 方案\n\n  - 布隆过滤器\n\n    布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力\n\n{% asset_img image-58.png %}\n  - 缓存空对象\n\n    缓存中存储较多无意义的空对象\n\n    缓存层和存储层的数据可能会出现数据不一致的情况\n\n\n\n## 缓存击穿\n\n- 描述：缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，并且回写缓存，会导使数据库瞬间压力过大。\n\n- 解决方案\n\n  - 设置热点数据永不过期\n\n    从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题、\n\n  - 加互斥锁\n\n    分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁考验很大\n\n\n\n## 缓存雪崩\n\n- 描述\n\n  缓存雪崩，是指在某一个时间段，缓存集中过期失效，产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增。Redis宕机。\n\n- 解决方案\n\n  - Redis高可用：多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群\n  - 限流降级：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。\n  - 数据预热：在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。","source":"_posts/Redis.md","raw":"---\ntitle: redis\ndate: 2022-02-17 21:09:31\ntags: redis\ncategories: 编程\n---\n# Redis\n\n## 描述\n\nREmote DIctionary Server(Redis) 是 key-value 存储系统，是跨平台的非关系型数据库。\n\nredis基于内存操作，cpu不是redis性能瓶颈，瓶颈是根据机器的内存和网络带宽，单线程。多线程会产生cpu上下文的切换，耗时\n\n {% asset_img image-1.png %}\n\n\n\n## 优势\n\n**高性能**\n\n假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。\n\n**高并发**\n\n一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。\n\n> QPS（Query Per Second）：服务器每秒可以执行的查询次数\n\n\n\n## Redis 数据结构\n\n- **5 种基础数据结构** ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。\n\n  - String\n\n  {% asset_img image-2.png %}\n\n  {% asset_img image-3.png %}\n\n  {% asset_img image-4.png %}\n\n  {% asset_img image-5.png %}\n\n  {% asset_img image-6.png %}\n\n  {% asset_img image-7.png %}\n\n  {% asset_img image-8.png %}\n\n  {% asset_img image-9.png %}\n\n  - List\n\n   {% asset_img image-10.png %}\n\n   {% asset_img image-11.png %}\n\n   {% asset_img image-12.png %}\n\n   {% asset_img image-13.png %}\n\n   {% asset_img image-14.png %}\n\n   {% asset_img image-15.png %}\n\n   {% asset_img image-16.png %}\n\n   {% asset_img image-17.png %}\n\n   {% asset_img image-18.png %}\n\n  - Set\n\n   {% asset_img image-19.png %}\n   {% asset_img image-20.png %}\n   {% asset_img image-21.png %}\n   {% asset_img image-22.png %}\n   {% asset_img image-23.png %}\n   {% asset_img image-24.png %}\n\n  - Hash\n\n   {% asset_img image-25.png %}\n   {% asset_img image-26.png %}\n    ![image-20220923193049607](C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220923193049607.png)\n\n{% asset_img image-27.png %}\n{% asset_img image-28.png %}\n  - Zset（有序集合）\n\n{% asset_img image-29.png %}\n{% asset_img image-30.png %}\n{% asset_img image-31.png %}\n{% asset_img image-32.png %}\n\n- **3 种特殊数据结构** ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。\n\n  - Geospatial \n\n  {% asset_img image-33.png %}\n  {% asset_img image-34.png %}\n  {% asset_img image-35.png %}\n  {% asset_img image-36.png %}\n  {% asset_img image-37.png %}\n  {% asset_img image-38.png %}\n\n  - Hyperloglog基数\n\n    优点：查找不重复的元素，占内存小，12k内存，可以用于统计网页uv，比传统set方式节省空间\n\n      {% asset_img image-39.png %}\n        {% asset_img image-40.png %}\n\n  - Bitmaps位图\n\n  {% asset_img image-41.png %}\n  {% asset_img image-42.png %}\n  {% asset_img image-43.png %}\n    \n\n## 性能测试\n\n1. redis-benchmark -h localhost -p 6379 -c 100 -n 100000\n\n​\t\t-c 100 100个并发连接\n\n​\t\t-n 100000 每个连接100000个请求\n\n​\t![image-20220921230507325](C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230507325.png)\n\n2. 分析\n\n![image-20220921230332185](C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230332185.png)\n\n\n\n## 事务\n\n- 一组命令的集合。一个事务中的所有命令会被序列化。事务执行时按顺序执行。redis单条命令是保证原子性的，但是事务不保证原子性，没有隔离级别的概念。\n\n- 三个阶段\n\n  - 开启事务\n  - 命令入队\n  - 执行事务\n\n  ```bash\n  multi\n  set k1 v1\n  set k2 v2\n  get k1\n  exec\n  ```\n\n  - 取消事务 `dicard`\n\n- 异常\n\n  - 编译型异常\n\n      {% asset_img image-44.png %}\n\n  - 运行时异常\n\n      {% asset_img image-45.png %}\n- 乐观锁，监视测试\n\n  - 获取version\n  - 更新的时候比较version\n  - 事务执行失败，解锁unwatch\n\n      {% asset_img image-46.png %}\n      {% asset_img image-47.png %}\n\n\n## Jedis\n\n1. 依赖\n\n   ```java\n       <dependencies>\n           <!--导入Jedis的包-->\n           <dependency>\n               <groupId>redis.clients</groupId>\n               <artifactId>jedis</artifactId>\n               <version>4.2.3</version>\n           </dependency>\n           <!--导入fastjson的包-->\n           <dependency>\n               <groupId>com.alibaba</groupId>\n               <artifactId>fastjson</artifactId>\n               <version>2.0.13</version>\n           </dependency>\n       </dependencies>\n   ```\n\n2. 测试ping\n\n   ```java\n   public class TestPingRedis {\n       public static void main(String[] args) {\n           Jedis jedis = new Jedis(\"127.0.0.1\",6379);\n           System.out.println(jedis.ping());\n       }\n   }\n   ```\n\n3. 测试事务\n\n   ```java\n       public static void main(String[] args) {\n           Jedis jedis = new Jedis(\"127.0.0.1\",6379);\n           jedis.flushDB();\n           JSONObject jsonObject = new JSONObject();\n           jsonObject.put(\"a\",\"one\");\n           jsonObject.put(\"b\",\"two\");\n           jsonObject.put(\"c\",\"three\");\n           // 开启事务\n           Transaction transaction = jedis.multi();\n           try{\n               transaction.set(\"json1\",jsonObject.toString());\n               transaction.set(\"json2\",jsonObject.toString());\n               transaction.exec();\n           }\n           catch(Exception e){\n               transaction.discard();\n               e.printStackTrace();\n           }finally {\n               System.out.println(jedis.get(\"json1\"));\n               System.out.println(jedis.get(\"json2\"));\n               jedis.close();\n           }\n       }\n   ```\n\n   \n\n## 整合SpringBoot\n\nspringboot 2.x后，jedis被替换为了lettuce。jedis多个线程操作不安全，jedis pool（BIO）。lettuce采用netty，可以在多个线程中共享（NIO）\n\n      {% asset_img image-48.png %}\n\n\nRedis配置文件\n\n- network\n\n  ```bash\n  bind 127.0.0.1 #绑定ip\n  protected-mode yes #保护模式\n  port 6379 #端口\n  ```\n\n- general\n\n  ```bash\n  daemonize yes #守护进程的方式运行，默认是no\n  pidfile /var/run/redis_6379.pid #指定后台运行的pid文件\n  loglevel notice # 日志等级\n  logfile \"\" # 日志文件位置\n  databases 16 # 数据库数量，默认16个\n  ```\n\n- 快照\n\n  ```bash\n  save 3600 100 # 规定时间内，做了多少次操作会持久化到文件.rdb .aof\n  stop-writes-on-bgsave-error yes # 持久化出错是否继续工作\n  rdbcompression yes # 是否压缩rdb文件\n  rdbchecksum yes # 保存rdb文件的时候错误校验\n  dir ./ # rdb文件的位置\n  ```\n\n- 安全\n\n  ```\n  requirepass password # 设置密码，命令config set requirepass \"password\"\n  ```\n\n- 限制\n\n  ```bash\n  maxclients 1000 # 设置连接redis客户端最大数量\n  maxmemory <bytes> # redis配置最大的内存容量\n  maxmemory-policy noeviction # 内存到达上限的处理策略\n  ```\n\n  - maxmemory-policy\n\n    1. volatile-lru：只对设置了过期时间的key进行LRU（默认值） \n\n    2. allkeys-lru ： 删除lru算法的key  \n\n    3. volatile-random：随机删除即将过期key  \n\n    4. allkeys-random：随机删除  \n\n    5. volatile-ttl ： 删除即将过期的  \n\n    6. noeviction ： 永不过期，返回错误\n\n- Append Only模式 aof配置\n\n  ```bash\n  appendonly no # 默认不开启aof，默认使用rdb方式持久化\n  appendfsync everysec # 每秒执行一次sync，可能丢失1s的数据\n  appendfsync always # 每次修改执行sync，消耗性能\n  appendfsync no # 不执行sync，操作系统自己同步\n  ```\n\n\n\n## 持久化RDB（redis database）\n\n      {% asset_img image-49.png %}\n- 描述：\n\n  ​\t\tRedis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了。再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF更加高效，RDB的缺点是最后一次持久化后的数据可能丢失。\n\n- 触发机制\n\n  - save规则满足，自动触发\n  - 执行flushall命令\n  - 退出redis\n\n- 恢复rdb文件\n\n  1. 将rdb文件放在redis启动目录，redis启动自动检查\n  2. config get dir 得到启动目录\n\n- 优点\n\n  - 适合大规模的数据恢复\n\n  - 对数据的完整性要求不高\n\n- 缺点\n  - 需要一定的时间间隔进行操作，如果redis意外宕机，最后一次修改的数据会丢失\n  - fork进程占用一定的内存空间\n\n\n\n## 持久化AOF（Append Only File）\n\n- 描述\n\n  将所有的命令记录下来放入history文件，恢复的时候执行此文件。以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，但是不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作\n\n{% asset_img image-50.png %}\n- 优点\n\n  - 每次修改都同步，文件的完整性好\n  - 每秒同步，可能会丢失一秒的数据\n  - 从不同步效率最高\n\n- 缺点\n\n  - aof文件数据较大，修复速度慢\n  - aof运行效率慢\n\n\n\n## Redis发布订阅\n\n原理;\n\n通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道!，而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定channel的订阅链表中。\n\n通过PUBLSH命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。\n\n\n\n## Redis主从复制\n\n- 描述：\n\n  主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(masterleader)，后者称为从节点(slave/follower);数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。\n\n- 作用：\n\n  - 数据冗余：实现了数据的热备份\n  - 故障恢复：主节点出现故障，从节点提供服务\n  - 负载均衡：在主从复制的基础上，配合读写分离，分担服务器负载，提高服务器的并发量\n  - 高可用集群的基础\n\n- 查看当前库的信息：info-replication\n\n{% asset_img image-51.png %}\n- 操作步骤\n\n  1. 复制配置文件\n  2. 修改端口、pid、log文件名字、dump.rdb名字\n\n{% asset_img image-52.png %}\n- 配置从机\n\n  ```bash\n  slaveof 127.0.0.1 6379 # 从属于主机的地址\n  ```\n\n{% asset_img image-53.png %}\n- 复制原理\n\n  Slave启动成功连接到master后会发送一个sync命令\n  Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。\n\n  - 全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。\n  - 增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。\n\n{% asset_img image-54.png %}\n- salveof no one\n\n  如果主机断开了连接，可以使用这个命令来让自己成为主节点，其他的结点就可以手动连接到最新的这个主节点。如果这个时候主机修复了，那就只能重新连接\n\n\n\n## 哨兵模式（Sentinel）\n\n- 原理\n\n  Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是**哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例**\n\n{% asset_img image-55.png %}\n- 作用\n\n  1. 通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器\n  2. 当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让他们切换主机\n\n- 多哨兵模式\n\n  一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。\n\n  哨兵1先检测到主机宕机，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。如果主机此时回来了，只能归并到新的主机下，当做从机。\n\n{% asset_img image-56.png %}\n- 配置sentinel.conf\n\n{% asset_img image-57.png %}\n- 启动哨兵\n\n  ```bash\n  redis-sentinel ../etc/sentinal.conf\n  ```\n\n- 优点\n\n  1. 哨兵模式，基于主从复制模式，所有主从配置的优点它都有\n  2. 主从可以切换，故障可以转移，系统的可用性就会更好\n  3. 哨兵模式就是主从模式的升级，手动到自动，更加健壮\n\n- 缺点\n\n  1. Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦\n  2. 实现哨兵模式的配置是比较复杂\n\n- 哨兵配置\n\n  ```bash\n  # Example sentinel.conf\n   \n  # 哨兵sentinel实例运行的端口 默认26379\n  port 26379\n   \n  # 哨兵sentinel的工作目录\n  dir /tmp\n   \n  # 哨兵sentinel监控的redis主节点的 ip port \n  # master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符\".-_\"组成。\n  # quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了\n  # sentinel monitor <master-name> <ip> <redis-port> <quorum>\n  sentinel monitor mymaster 127.0.0.1 6379 1\n   \n  # 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码\n  # 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码\n  # sentinel auth-pass <master-name> <password>\n  sentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n   \n   \n  # 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒\n  # sentinel down-after-milliseconds <master-name> <milliseconds>\n  sentinel down-after-milliseconds mymaster 30000\n   \n  # 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，\n  这个数字越小，完成failover所需的时间就越长，\n  但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。\n  可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。\n  # sentinel parallel-syncs <master-name> <numslaves>\n  sentinel parallel-syncs mymaster 1\n   \n   \n   \n  # 故障转移的超时时间 failover-timeout 可以用在以下这些方面： \n  #1. 同一个sentinel对同一个master两次failover之间的间隔时间。\n  #2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。\n  #3.当想要取消一个正在进行的failover所需要的时间。  \n  #4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了\n  # 默认三分钟\n  # sentinel failover-timeout <master-name> <milliseconds>\n  sentinel failover-timeout mymaster 180000\n   \n  # SCRIPTS EXECUTION\n   \n  #配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。\n  #对于脚本的运行结果有以下规则：\n  #若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10\n  #若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。\n  #如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。\n  #一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。\n   \n  #通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，\n  #这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，\n  #一个是事件的类型，\n  #一个是事件的描述。\n  #如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。\n  #通知脚本\n  # sentinel notification-script <master-name> <script-path>\n    sentinel notification-script mymaster /var/redis/notify.sh\n   \n  # 客户端重新配置主节点参数脚本\n  # 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。\n  # 以下参数将会在调用脚本时传给脚本:\n  # <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>\n  # 目前<state>总是“failover”,\n  # <role>是“leader”或者“observer”中的一个。 \n  # 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的\n  # 这个脚本应该是通用的，能被多次调用，不是针对性的。\n  # sentinel client-reconfig-script <master-name> <script-path>\n  sentinel client-reconfig-script mymaster /var/redis/reconfig.sh\n  ```\n\n  \n\n## Redis缓存穿透\n\n- 描述：\n\n  用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。\n\n- 方案\n\n  - 布隆过滤器\n\n    布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力\n\n{% asset_img image-58.png %}\n  - 缓存空对象\n\n    缓存中存储较多无意义的空对象\n\n    缓存层和存储层的数据可能会出现数据不一致的情况\n\n\n\n## 缓存击穿\n\n- 描述：缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，并且回写缓存，会导使数据库瞬间压力过大。\n\n- 解决方案\n\n  - 设置热点数据永不过期\n\n    从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题、\n\n  - 加互斥锁\n\n    分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁考验很大\n\n\n\n## 缓存雪崩\n\n- 描述\n\n  缓存雪崩，是指在某一个时间段，缓存集中过期失效，产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增。Redis宕机。\n\n- 解决方案\n\n  - Redis高可用：多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群\n  - 限流降级：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。\n  - 数据预热：在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。","slug":"Redis","published":1,"updated":"2025-03-11T13:16:58.166Z","_id":"cm67vdk9y000y94waazuohbkx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>REmote DIctionary Server(Redis) 是 key-value 存储系统，是跨平台的非关系型数据库。</p>\n<p>redis基于内存操作，cpu不是redis性能瓶颈，瓶颈是根据机器的内存和网络带宽，单线程。多线程会产生cpu上下文的切换，耗时</p>\n <img src=\"/2022/02/17/redis/image-1.png\" class=\"\">\n\n\n\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><p><strong>高性能</strong></p>\n<p>假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。</p>\n<p><strong>高并发</strong></p>\n<p>一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。</p>\n<blockquote>\n<p>QPS（Query Per Second）：服务器每秒可以执行的查询次数</p>\n</blockquote>\n<h2 id=\"Redis-数据结构\"><a href=\"#Redis-数据结构\" class=\"headerlink\" title=\"Redis 数据结构\"></a>Redis 数据结构</h2><ul>\n<li><p><strong>5 种基础数据结构</strong> ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</p>\n<ul>\n<li>String</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-2.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-3.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-4.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-5.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-6.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-7.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-8.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-9.png\" class=\"\">\n\n<ul>\n<li>List</li>\n</ul>\n <img src=\"/2022/02/17/redis/image-10.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-11.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-12.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-13.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-14.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-15.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-16.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-17.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-18.png\" class=\"\">\n\n<ul>\n<li>Set</li>\n</ul>\n <img src=\"/2022/02/17/redis/image-19.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-20.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-21.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-22.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-23.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-24.png\" class=\"\">\n\n<ul>\n<li>Hash</li>\n</ul>\n <img src=\"/2022/02/17/redis/image-25.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-26.png\" class=\"\">\n<p>  <img src=\"C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220923193049607.png\" alt=\"image-20220923193049607\"></p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-27.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-28.png\" class=\"\">\n<ul>\n<li>Zset（有序集合）</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-29.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-30.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-31.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-32.png\" class=\"\">\n\n<ul>\n<li><p><strong>3 种特殊数据结构</strong> ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。</p>\n<ul>\n<li>Geospatial </li>\n</ul>\n<img src=\"/2022/02/17/redis/image-33.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-34.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-35.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-36.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-37.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-38.png\" class=\"\">\n\n<ul>\n<li><p>Hyperloglog基数</p>\n<p>优点：查找不重复的元素，占内存小，12k内存，可以用于统计网页uv，比传统set方式节省空间</p>\n  <img src=\"/2022/02/17/redis/image-39.png\" class=\"\">\n<pre><code>&#123;% asset_img image-40.png %&#125;\n</code></pre>\n</li>\n<li><p>Bitmaps位图</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-41.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-42.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-43.png\" class=\"\">\n</li>\n</ul>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><ol>\n<li>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</li>\n</ol>\n<p>​        -c 100 100个并发连接</p>\n<p>​        -n 100000 每个连接100000个请求</p>\n<p>​    <img src=\"C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230507325.png\" alt=\"image-20220921230507325\"></p>\n<ol start=\"2\">\n<li>分析</li>\n</ol>\n<p><img src=\"C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230332185.png\" alt=\"image-20220921230332185\"></p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li><p>一组命令的集合。一个事务中的所有命令会被序列化。事务执行时按顺序执行。redis单条命令是保证原子性的，但是事务不保证原子性，没有隔离级别的概念。</p>\n</li>\n<li><p>三个阶段</p>\n<ul>\n<li>开启事务</li>\n<li>命令入队</li>\n<li>执行事务</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">multi\n<span class=\"token builtin class-name\">set</span> k1 v1\n<span class=\"token builtin class-name\">set</span> k2 v2\nget k1\n<span class=\"token builtin class-name\">exec</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>取消事务 <code>dicard</code></li>\n</ul>\n</li>\n<li><p>异常</p>\n<ul>\n<li><p>编译型异常</p>\n  <img src=\"/2022/02/17/redis/image-44.png\" class=\"\"></li>\n<li><p>运行时异常</p>\n  <img src=\"/2022/02/17/redis/image-45.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>乐观锁，监视测试</p>\n<ul>\n<li><p>获取version</p>\n</li>\n<li><p>更新的时候比较version</p>\n</li>\n<li><p>事务执行失败，解锁unwatch</p>\n  <img src=\"/2022/02/17/redis/image-46.png\" class=\"\">\n  <img src=\"/2022/02/17/redis/image-47.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h2><ol>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>导入<span class=\"token class-name\">Jedis</span>的包<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>redis<span class=\"token punctuation\">.</span>clients<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>jedis<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">4.2</span><span class=\"token number\">.3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>导入fastjson的包<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>fastjson<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.0</span><span class=\"token number\">.13</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试ping</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPingRedis</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试事务</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">flushDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 开启事务</span>\n    <span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json1\"</span><span class=\"token punctuation\">,</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json2\"</span><span class=\"token punctuation\">,</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"整合SpringBoot\"><a href=\"#整合SpringBoot\" class=\"headerlink\" title=\"整合SpringBoot\"></a>整合SpringBoot</h2><p>springboot 2.x后，jedis被替换为了lettuce。jedis多个线程操作不安全，jedis pool（BIO）。lettuce采用netty，可以在多个线程中共享（NIO）</p>\n<pre><code>  &#123;% asset_img image-48.png %&#125;\n</code></pre>\n<p>Redis配置文件</p>\n<ul>\n<li><p>network</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">bind</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token comment\">#绑定ip</span>\nprotected-mode <span class=\"token function\">yes</span> <span class=\"token comment\">#保护模式</span>\nport <span class=\"token number\">6379</span> <span class=\"token comment\">#端口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>general</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">daemonize <span class=\"token function\">yes</span> <span class=\"token comment\">#守护进程的方式运行，默认是no</span>\npidfile /var/run/redis_6379.pid <span class=\"token comment\">#指定后台运行的pid文件</span>\nloglevel notice <span class=\"token comment\"># 日志等级</span>\nlogfile <span class=\"token string\">\"\"</span> <span class=\"token comment\"># 日志文件位置</span>\ndatabases <span class=\"token number\">16</span> <span class=\"token comment\"># 数据库数量，默认16个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>快照</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">save <span class=\"token number\">3600</span> <span class=\"token number\">100</span> <span class=\"token comment\"># 规定时间内，做了多少次操作会持久化到文件.rdb .aof</span>\nstop-writes-on-bgsave-error <span class=\"token function\">yes</span> <span class=\"token comment\"># 持久化出错是否继续工作</span>\nrdbcompression <span class=\"token function\">yes</span> <span class=\"token comment\"># 是否压缩rdb文件</span>\nrdbchecksum <span class=\"token function\">yes</span> <span class=\"token comment\"># 保存rdb文件的时候错误校验</span>\n<span class=\"token function\">dir</span> ./ <span class=\"token comment\"># rdb文件的位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安全</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">requirepass password # 设置密码，命令config set requirepass &quot;password&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>限制</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">maxclients <span class=\"token number\">1000</span> <span class=\"token comment\"># 设置连接redis客户端最大数量</span>\nmaxmemory <span class=\"token operator\">&lt;</span>bytes<span class=\"token operator\">></span> <span class=\"token comment\"># redis配置最大的内存容量</span>\nmaxmemory-policy noeviction <span class=\"token comment\"># 内存到达上限的处理策略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>maxmemory-policy</p>\n<ol>\n<li><p>volatile-lru：只对设置了过期时间的key进行LRU（默认值） </p>\n</li>\n<li><p>allkeys-lru ： 删除lru算法的key  </p>\n</li>\n<li><p>volatile-random：随机删除即将过期key  </p>\n</li>\n<li><p>allkeys-random：随机删除  </p>\n</li>\n<li><p>volatile-ttl ： 删除即将过期的  </p>\n</li>\n<li><p>noeviction ： 永不过期，返回错误</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Append Only模式 aof配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">appendonly no <span class=\"token comment\"># 默认不开启aof，默认使用rdb方式持久化</span>\nappendfsync everysec <span class=\"token comment\"># 每秒执行一次sync，可能丢失1s的数据</span>\nappendfsync always <span class=\"token comment\"># 每次修改执行sync，消耗性能</span>\nappendfsync no <span class=\"token comment\"># 不执行sync，操作系统自己同步</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"持久化RDB（redis-database）\"><a href=\"#持久化RDB（redis-database）\" class=\"headerlink\" title=\"持久化RDB（redis database）\"></a>持久化RDB（redis database）</h2><pre><code>  &#123;% asset_img image-49.png %&#125;\n</code></pre>\n<ul>\n<li><p>描述：</p>\n<p>​        Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了。再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF更加高效，RDB的缺点是最后一次持久化后的数据可能丢失。</p>\n</li>\n<li><p>触发机制</p>\n<ul>\n<li>save规则满足，自动触发</li>\n<li>执行flushall命令</li>\n<li>退出redis</li>\n</ul>\n</li>\n<li><p>恢复rdb文件</p>\n<ol>\n<li>将rdb文件放在redis启动目录，redis启动自动检查</li>\n<li>config get dir 得到启动目录</li>\n</ol>\n</li>\n<li><p>优点</p>\n<ul>\n<li><p>适合大规模的数据恢复</p>\n</li>\n<li><p>对数据的完整性要求不高</p>\n</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>需要一定的时间间隔进行操作，如果redis意外宕机，最后一次修改的数据会丢失</li>\n<li>fork进程占用一定的内存空间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"持久化AOF（Append-Only-File）\"><a href=\"#持久化AOF（Append-Only-File）\" class=\"headerlink\" title=\"持久化AOF（Append Only File）\"></a>持久化AOF（Append Only File）</h2><ul>\n<li><p>描述</p>\n<p>将所有的命令记录下来放入history文件，恢复的时候执行此文件。以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，但是不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-50.png\" class=\"\">\n<ul>\n<li><p>优点</p>\n<ul>\n<li>每次修改都同步，文件的完整性好</li>\n<li>每秒同步，可能会丢失一秒的数据</li>\n<li>从不同步效率最高</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>aof文件数据较大，修复速度慢</li>\n<li>aof运行效率慢</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Redis发布订阅\"><a href=\"#Redis发布订阅\" class=\"headerlink\" title=\"Redis发布订阅\"></a>Redis发布订阅</h2><p>原理;</p>\n<p>通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道!，而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定channel的订阅链表中。</p>\n<p>通过PUBLSH命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>\n<h2 id=\"Redis主从复制\"><a href=\"#Redis主从复制\" class=\"headerlink\" title=\"Redis主从复制\"></a>Redis主从复制</h2><ul>\n<li><p>描述：</p>\n<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(masterleader)，后者称为从节点(slave/follower);数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p>\n</li>\n<li><p>作用：</p>\n<ul>\n<li>数据冗余：实现了数据的热备份</li>\n<li>故障恢复：主节点出现故障，从节点提供服务</li>\n<li>负载均衡：在主从复制的基础上，配合读写分离，分担服务器负载，提高服务器的并发量</li>\n<li>高可用集群的基础</li>\n</ul>\n</li>\n<li><p>查看当前库的信息：info-replication</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-51.png\" class=\"\">\n<ul>\n<li><p>操作步骤</p>\n<ol>\n<li>复制配置文件</li>\n<li>修改端口、pid、log文件名字、dump.rdb名字</li>\n</ol>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-52.png\" class=\"\">\n<ul>\n<li><p>配置从机</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">slaveof <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span> <span class=\"token comment\"># 从属于主机的地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<img src=\"/2022/02/17/redis/image-53.png\" class=\"\">\n<ul>\n<li><p>复制原理</p>\n<p>Slave启动成功连接到master后会发送一个sync命令<br>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p>\n<ul>\n<li>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>\n<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-54.png\" class=\"\">\n<ul>\n<li><p>salveof no one</p>\n<p>如果主机断开了连接，可以使用这个命令来让自己成为主节点，其他的结点就可以手动连接到最新的这个主节点。如果这个时候主机修复了，那就只能重新连接</p>\n</li>\n</ul>\n<h2 id=\"哨兵模式（Sentinel）\"><a href=\"#哨兵模式（Sentinel）\" class=\"headerlink\" title=\"哨兵模式（Sentinel）\"></a>哨兵模式（Sentinel）</h2><ul>\n<li><p>原理</p>\n<p>Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</strong></p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-55.png\" class=\"\">\n<ul>\n<li><p>作用</p>\n<ol>\n<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>\n<li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让他们切换主机</li>\n</ol>\n</li>\n<li><p>多哨兵模式</p>\n<p>一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p>哨兵1先检测到主机宕机，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。如果主机此时回来了，只能归并到新的主机下，当做从机。</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-56.png\" class=\"\">\n<ul>\n<li>配置sentinel.conf</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-57.png\" class=\"\">\n<ul>\n<li><p>启动哨兵</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis-sentinel <span class=\"token punctuation\">..</span>/etc/sentinal.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>优点</p>\n<ol>\n<li>哨兵模式，基于主从复制模式，所有主从配置的优点它都有</li>\n<li>主从可以切换，故障可以转移，系统的可用性就会更好</li>\n<li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li>\n</ol>\n</li>\n<li><p>缺点</p>\n<ol>\n<li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li>\n<li>实现哨兵模式的配置是比较复杂</li>\n</ol>\n</li>\n<li><p>哨兵配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Example sentinel.conf</span>\n \n<span class=\"token comment\"># 哨兵sentinel实例运行的端口 默认26379</span>\nport <span class=\"token number\">26379</span>\n \n<span class=\"token comment\"># 哨兵sentinel的工作目录</span>\n<span class=\"token function\">dir</span> /tmp\n \n<span class=\"token comment\"># 哨兵sentinel监控的redis主节点的 ip port </span>\n<span class=\"token comment\"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符\".-_\"组成。</span>\n<span class=\"token comment\"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span>\n<span class=\"token comment\"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>\nsentinel monitor mymaster <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span> <span class=\"token number\">1</span>\n \n<span class=\"token comment\"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span>\n<span class=\"token comment\"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span>\n<span class=\"token comment\"># sentinel auth-pass &lt;master-name> &lt;password></span>\nsentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n \n \n<span class=\"token comment\"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span>\n<span class=\"token comment\"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>\nsentinel down-after-milliseconds mymaster <span class=\"token number\">30000</span>\n \n<span class=\"token comment\"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span>\n这个数字越小，完成failover所需的时间就越长，\n但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。\n可以通过将这个值设为 <span class=\"token number\">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。\n<span class=\"token comment\"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>\nsentinel parallel-syncs mymaster <span class=\"token number\">1</span>\n \n \n \n<span class=\"token comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span>\n<span class=\"token comment\">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span>\n<span class=\"token comment\">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span>\n<span class=\"token comment\">#3.当想要取消一个正在进行的failover所需要的时间。  </span>\n<span class=\"token comment\">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span>\n<span class=\"token comment\"># 默认三分钟</span>\n<span class=\"token comment\"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>\nsentinel failover-timeout mymaster <span class=\"token number\">180000</span>\n \n<span class=\"token comment\"># SCRIPTS EXECUTION</span>\n \n<span class=\"token comment\">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span>\n<span class=\"token comment\">#对于脚本的运行结果有以下规则：</span>\n<span class=\"token comment\">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span>\n<span class=\"token comment\">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span>\n<span class=\"token comment\">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span>\n<span class=\"token comment\">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span>\n \n<span class=\"token comment\">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span>\n<span class=\"token comment\">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span>\n<span class=\"token comment\">#一个是事件的类型，</span>\n<span class=\"token comment\">#一个是事件的描述。</span>\n<span class=\"token comment\">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span>\n<span class=\"token comment\">#通知脚本</span>\n<span class=\"token comment\"># sentinel notification-script &lt;master-name> &lt;script-path></span>\n  sentinel notification-script mymaster /var/redis/notify.sh\n \n<span class=\"token comment\"># 客户端重新配置主节点参数脚本</span>\n<span class=\"token comment\"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span>\n<span class=\"token comment\"># 以下参数将会在调用脚本时传给脚本:</span>\n<span class=\"token comment\"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span>\n<span class=\"token comment\"># 目前&lt;state>总是“failover”,</span>\n<span class=\"token comment\"># &lt;role>是“leader”或者“observer”中的一个。 </span>\n<span class=\"token comment\"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span>\n<span class=\"token comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span>\n<span class=\"token comment\"># sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>\nsentinel client-reconfig-script mymaster /var/redis/reconfig.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Redis缓存穿透\"><a href=\"#Redis缓存穿透\" class=\"headerlink\" title=\"Redis缓存穿透\"></a>Redis缓存穿透</h2><ul>\n<li><p>描述：</p>\n<p>用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n</li>\n<li><p>方案</p>\n<ul>\n<li><p>布隆过滤器</p>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</p>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-58.png\" class=\"\">\n<ul>\n<li><p>缓存空对象</p>\n<p>缓存中存储较多无意义的空对象</p>\n<p>缓存层和存储层的数据可能会出现数据不一致的情况</p>\n</li>\n</ul>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><ul>\n<li><p>描述：缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，并且回写缓存，会导使数据库瞬间压力过大。</p>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li><p>设置热点数据永不过期</p>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题、</p>\n</li>\n<li><p>加互斥锁</p>\n<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁考验很大</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><ul>\n<li><p>描述</p>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效，产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增。Redis宕机。</p>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li>Redis高可用：多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</li>\n<li>限流降级：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</li>\n<li>数据预热：在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>REmote DIctionary Server(Redis) 是 key-value 存储系统，是跨平台的非关系型数据库。</p>\n<p>redis基于内存操作，cpu不是redis性能瓶颈，瓶颈是根据机器的内存和网络带宽，单线程。多线程会产生cpu上下文的切换，耗时</p>\n <img src=\"/2022/02/17/redis/image-1.png\" class=\"\">\n\n\n\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><p><strong>高性能</strong></p>\n<p>假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。</p>\n<p><strong>高并发</strong></p>\n<p>一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。</p>\n<blockquote>\n<p>QPS（Query Per Second）：服务器每秒可以执行的查询次数</p>\n</blockquote>\n<h2 id=\"Redis-数据结构\"><a href=\"#Redis-数据结构\" class=\"headerlink\" title=\"Redis 数据结构\"></a>Redis 数据结构</h2><ul>\n<li><p><strong>5 种基础数据结构</strong> ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</p>\n<ul>\n<li>String</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-2.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-3.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-4.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-5.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-6.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-7.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-8.png\" class=\"\">\n\n<img src=\"/2022/02/17/redis/image-9.png\" class=\"\">\n\n<ul>\n<li>List</li>\n</ul>\n <img src=\"/2022/02/17/redis/image-10.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-11.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-12.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-13.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-14.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-15.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-16.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-17.png\" class=\"\">\n\n <img src=\"/2022/02/17/redis/image-18.png\" class=\"\">\n\n<ul>\n<li>Set</li>\n</ul>\n <img src=\"/2022/02/17/redis/image-19.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-20.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-21.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-22.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-23.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-24.png\" class=\"\">\n\n<ul>\n<li>Hash</li>\n</ul>\n <img src=\"/2022/02/17/redis/image-25.png\" class=\"\">\n <img src=\"/2022/02/17/redis/image-26.png\" class=\"\">\n<p>  <img src=\"C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220923193049607.png\" alt=\"image-20220923193049607\"></p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-27.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-28.png\" class=\"\">\n<ul>\n<li>Zset（有序集合）</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-29.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-30.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-31.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-32.png\" class=\"\">\n\n<ul>\n<li><p><strong>3 种特殊数据结构</strong> ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。</p>\n<ul>\n<li>Geospatial </li>\n</ul>\n<img src=\"/2022/02/17/redis/image-33.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-34.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-35.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-36.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-37.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-38.png\" class=\"\">\n\n<ul>\n<li><p>Hyperloglog基数</p>\n<p>优点：查找不重复的元素，占内存小，12k内存，可以用于统计网页uv，比传统set方式节省空间</p>\n  <img src=\"/2022/02/17/redis/image-39.png\" class=\"\">\n<pre><code>&#123;% asset_img image-40.png %&#125;\n</code></pre>\n</li>\n<li><p>Bitmaps位图</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-41.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-42.png\" class=\"\">\n<img src=\"/2022/02/17/redis/image-43.png\" class=\"\">\n</li>\n</ul>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><ol>\n<li>redis-benchmark -h localhost -p 6379 -c 100 -n 100000</li>\n</ol>\n<p>​        -c 100 100个并发连接</p>\n<p>​        -n 100000 每个连接100000个请求</p>\n<p>​    <img src=\"C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230507325.png\" alt=\"image-20220921230507325\"></p>\n<ol start=\"2\">\n<li>分析</li>\n</ol>\n<p><img src=\"C:\\Users\\yangz\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220921230332185.png\" alt=\"image-20220921230332185\"></p>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><ul>\n<li><p>一组命令的集合。一个事务中的所有命令会被序列化。事务执行时按顺序执行。redis单条命令是保证原子性的，但是事务不保证原子性，没有隔离级别的概念。</p>\n</li>\n<li><p>三个阶段</p>\n<ul>\n<li>开启事务</li>\n<li>命令入队</li>\n<li>执行事务</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">multi\n<span class=\"token builtin class-name\">set</span> k1 v1\n<span class=\"token builtin class-name\">set</span> k2 v2\nget k1\n<span class=\"token builtin class-name\">exec</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>取消事务 <code>dicard</code></li>\n</ul>\n</li>\n<li><p>异常</p>\n<ul>\n<li><p>编译型异常</p>\n  <img src=\"/2022/02/17/redis/image-44.png\" class=\"\"></li>\n<li><p>运行时异常</p>\n  <img src=\"/2022/02/17/redis/image-45.png\" class=\"\"></li>\n</ul>\n</li>\n<li><p>乐观锁，监视测试</p>\n<ul>\n<li><p>获取version</p>\n</li>\n<li><p>更新的时候比较version</p>\n</li>\n<li><p>事务执行失败，解锁unwatch</p>\n  <img src=\"/2022/02/17/redis/image-46.png\" class=\"\">\n  <img src=\"/2022/02/17/redis/image-47.png\" class=\"\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h2><ol>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>导入<span class=\"token class-name\">Jedis</span>的包<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>redis<span class=\"token punctuation\">.</span>clients<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>jedis<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">4.2</span><span class=\"token number\">.3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>导入fastjson的包<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>fastjson<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.0</span><span class=\"token number\">.13</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试ping</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPingRedis</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试事务</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">flushDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">JSONObject</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 开启事务</span>\n    <span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json1\"</span><span class=\"token punctuation\">,</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json2\"</span><span class=\"token punctuation\">,</span>jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"json2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"整合SpringBoot\"><a href=\"#整合SpringBoot\" class=\"headerlink\" title=\"整合SpringBoot\"></a>整合SpringBoot</h2><p>springboot 2.x后，jedis被替换为了lettuce。jedis多个线程操作不安全，jedis pool（BIO）。lettuce采用netty，可以在多个线程中共享（NIO）</p>\n<pre><code>  &#123;% asset_img image-48.png %&#125;\n</code></pre>\n<p>Redis配置文件</p>\n<ul>\n<li><p>network</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">bind</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token comment\">#绑定ip</span>\nprotected-mode <span class=\"token function\">yes</span> <span class=\"token comment\">#保护模式</span>\nport <span class=\"token number\">6379</span> <span class=\"token comment\">#端口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>general</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">daemonize <span class=\"token function\">yes</span> <span class=\"token comment\">#守护进程的方式运行，默认是no</span>\npidfile /var/run/redis_6379.pid <span class=\"token comment\">#指定后台运行的pid文件</span>\nloglevel notice <span class=\"token comment\"># 日志等级</span>\nlogfile <span class=\"token string\">\"\"</span> <span class=\"token comment\"># 日志文件位置</span>\ndatabases <span class=\"token number\">16</span> <span class=\"token comment\"># 数据库数量，默认16个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>快照</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">save <span class=\"token number\">3600</span> <span class=\"token number\">100</span> <span class=\"token comment\"># 规定时间内，做了多少次操作会持久化到文件.rdb .aof</span>\nstop-writes-on-bgsave-error <span class=\"token function\">yes</span> <span class=\"token comment\"># 持久化出错是否继续工作</span>\nrdbcompression <span class=\"token function\">yes</span> <span class=\"token comment\"># 是否压缩rdb文件</span>\nrdbchecksum <span class=\"token function\">yes</span> <span class=\"token comment\"># 保存rdb文件的时候错误校验</span>\n<span class=\"token function\">dir</span> ./ <span class=\"token comment\"># rdb文件的位置</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安全</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">requirepass password # 设置密码，命令config set requirepass &quot;password&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>限制</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">maxclients <span class=\"token number\">1000</span> <span class=\"token comment\"># 设置连接redis客户端最大数量</span>\nmaxmemory <span class=\"token operator\">&lt;</span>bytes<span class=\"token operator\">></span> <span class=\"token comment\"># redis配置最大的内存容量</span>\nmaxmemory-policy noeviction <span class=\"token comment\"># 内存到达上限的处理策略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>maxmemory-policy</p>\n<ol>\n<li><p>volatile-lru：只对设置了过期时间的key进行LRU（默认值） </p>\n</li>\n<li><p>allkeys-lru ： 删除lru算法的key  </p>\n</li>\n<li><p>volatile-random：随机删除即将过期key  </p>\n</li>\n<li><p>allkeys-random：随机删除  </p>\n</li>\n<li><p>volatile-ttl ： 删除即将过期的  </p>\n</li>\n<li><p>noeviction ： 永不过期，返回错误</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Append Only模式 aof配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">appendonly no <span class=\"token comment\"># 默认不开启aof，默认使用rdb方式持久化</span>\nappendfsync everysec <span class=\"token comment\"># 每秒执行一次sync，可能丢失1s的数据</span>\nappendfsync always <span class=\"token comment\"># 每次修改执行sync，消耗性能</span>\nappendfsync no <span class=\"token comment\"># 不执行sync，操作系统自己同步</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"持久化RDB（redis-database）\"><a href=\"#持久化RDB（redis-database）\" class=\"headerlink\" title=\"持久化RDB（redis database）\"></a>持久化RDB（redis database）</h2><pre><code>  &#123;% asset_img image-49.png %&#125;\n</code></pre>\n<ul>\n<li><p>描述：</p>\n<p>​        Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了。再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF更加高效，RDB的缺点是最后一次持久化后的数据可能丢失。</p>\n</li>\n<li><p>触发机制</p>\n<ul>\n<li>save规则满足，自动触发</li>\n<li>执行flushall命令</li>\n<li>退出redis</li>\n</ul>\n</li>\n<li><p>恢复rdb文件</p>\n<ol>\n<li>将rdb文件放在redis启动目录，redis启动自动检查</li>\n<li>config get dir 得到启动目录</li>\n</ol>\n</li>\n<li><p>优点</p>\n<ul>\n<li><p>适合大规模的数据恢复</p>\n</li>\n<li><p>对数据的完整性要求不高</p>\n</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>需要一定的时间间隔进行操作，如果redis意外宕机，最后一次修改的数据会丢失</li>\n<li>fork进程占用一定的内存空间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"持久化AOF（Append-Only-File）\"><a href=\"#持久化AOF（Append-Only-File）\" class=\"headerlink\" title=\"持久化AOF（Append Only File）\"></a>持久化AOF（Append Only File）</h2><ul>\n<li><p>描述</p>\n<p>将所有的命令记录下来放入history文件，恢复的时候执行此文件。以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件，但是不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-50.png\" class=\"\">\n<ul>\n<li><p>优点</p>\n<ul>\n<li>每次修改都同步，文件的完整性好</li>\n<li>每秒同步，可能会丢失一秒的数据</li>\n<li>从不同步效率最高</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>aof文件数据较大，修复速度慢</li>\n<li>aof运行效率慢</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Redis发布订阅\"><a href=\"#Redis发布订阅\" class=\"headerlink\" title=\"Redis发布订阅\"></a>Redis发布订阅</h2><p>原理;</p>\n<p>通过SUBSCRIBE命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道!，而字典的值则是一个链表，链表中保存了所有订阅这个channel的客户端。SUBSCRIBE命令的关键，就是将客户端添加到给定channel的订阅链表中。</p>\n<p>通过PUBLSH命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>\n<h2 id=\"Redis主从复制\"><a href=\"#Redis主从复制\" class=\"headerlink\" title=\"Redis主从复制\"></a>Redis主从复制</h2><ul>\n<li><p>描述：</p>\n<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(masterleader)，后者称为从节点(slave/follower);数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p>\n</li>\n<li><p>作用：</p>\n<ul>\n<li>数据冗余：实现了数据的热备份</li>\n<li>故障恢复：主节点出现故障，从节点提供服务</li>\n<li>负载均衡：在主从复制的基础上，配合读写分离，分担服务器负载，提高服务器的并发量</li>\n<li>高可用集群的基础</li>\n</ul>\n</li>\n<li><p>查看当前库的信息：info-replication</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-51.png\" class=\"\">\n<ul>\n<li><p>操作步骤</p>\n<ol>\n<li>复制配置文件</li>\n<li>修改端口、pid、log文件名字、dump.rdb名字</li>\n</ol>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-52.png\" class=\"\">\n<ul>\n<li><p>配置从机</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">slaveof <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span> <span class=\"token comment\"># 从属于主机的地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<img src=\"/2022/02/17/redis/image-53.png\" class=\"\">\n<ul>\n<li><p>复制原理</p>\n<p>Slave启动成功连接到master后会发送一个sync命令<br>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p>\n<ul>\n<li>全量复制：slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>\n<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-54.png\" class=\"\">\n<ul>\n<li><p>salveof no one</p>\n<p>如果主机断开了连接，可以使用这个命令来让自己成为主节点，其他的结点就可以手动连接到最新的这个主节点。如果这个时候主机修复了，那就只能重新连接</p>\n</li>\n</ul>\n<h2 id=\"哨兵模式（Sentinel）\"><a href=\"#哨兵模式（Sentinel）\" class=\"headerlink\" title=\"哨兵模式（Sentinel）\"></a>哨兵模式（Sentinel）</h2><ul>\n<li><p>原理</p>\n<p>Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</strong></p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-55.png\" class=\"\">\n<ul>\n<li><p>作用</p>\n<ol>\n<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>\n<li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让他们切换主机</li>\n</ol>\n</li>\n<li><p>多哨兵模式</p>\n<p>一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p>哨兵1先检测到主机宕机，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。如果主机此时回来了，只能归并到新的主机下，当做从机。</p>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-56.png\" class=\"\">\n<ul>\n<li>配置sentinel.conf</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-57.png\" class=\"\">\n<ul>\n<li><p>启动哨兵</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">redis-sentinel <span class=\"token punctuation\">..</span>/etc/sentinal.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>优点</p>\n<ol>\n<li>哨兵模式，基于主从复制模式，所有主从配置的优点它都有</li>\n<li>主从可以切换，故障可以转移，系统的可用性就会更好</li>\n<li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li>\n</ol>\n</li>\n<li><p>缺点</p>\n<ol>\n<li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li>\n<li>实现哨兵模式的配置是比较复杂</li>\n</ol>\n</li>\n<li><p>哨兵配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Example sentinel.conf</span>\n \n<span class=\"token comment\"># 哨兵sentinel实例运行的端口 默认26379</span>\nport <span class=\"token number\">26379</span>\n \n<span class=\"token comment\"># 哨兵sentinel的工作目录</span>\n<span class=\"token function\">dir</span> /tmp\n \n<span class=\"token comment\"># 哨兵sentinel监控的redis主节点的 ip port </span>\n<span class=\"token comment\"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符\".-_\"组成。</span>\n<span class=\"token comment\"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span>\n<span class=\"token comment\"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>\nsentinel monitor mymaster <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span> <span class=\"token number\">1</span>\n \n<span class=\"token comment\"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span>\n<span class=\"token comment\"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span>\n<span class=\"token comment\"># sentinel auth-pass &lt;master-name> &lt;password></span>\nsentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n \n \n<span class=\"token comment\"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span>\n<span class=\"token comment\"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>\nsentinel down-after-milliseconds mymaster <span class=\"token number\">30000</span>\n \n<span class=\"token comment\"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span>\n这个数字越小，完成failover所需的时间就越长，\n但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。\n可以通过将这个值设为 <span class=\"token number\">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。\n<span class=\"token comment\"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>\nsentinel parallel-syncs mymaster <span class=\"token number\">1</span>\n \n \n \n<span class=\"token comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span>\n<span class=\"token comment\">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span>\n<span class=\"token comment\">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span>\n<span class=\"token comment\">#3.当想要取消一个正在进行的failover所需要的时间。  </span>\n<span class=\"token comment\">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span>\n<span class=\"token comment\"># 默认三分钟</span>\n<span class=\"token comment\"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>\nsentinel failover-timeout mymaster <span class=\"token number\">180000</span>\n \n<span class=\"token comment\"># SCRIPTS EXECUTION</span>\n \n<span class=\"token comment\">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span>\n<span class=\"token comment\">#对于脚本的运行结果有以下规则：</span>\n<span class=\"token comment\">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span>\n<span class=\"token comment\">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span>\n<span class=\"token comment\">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span>\n<span class=\"token comment\">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span>\n \n<span class=\"token comment\">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span>\n<span class=\"token comment\">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span>\n<span class=\"token comment\">#一个是事件的类型，</span>\n<span class=\"token comment\">#一个是事件的描述。</span>\n<span class=\"token comment\">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span>\n<span class=\"token comment\">#通知脚本</span>\n<span class=\"token comment\"># sentinel notification-script &lt;master-name> &lt;script-path></span>\n  sentinel notification-script mymaster /var/redis/notify.sh\n \n<span class=\"token comment\"># 客户端重新配置主节点参数脚本</span>\n<span class=\"token comment\"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span>\n<span class=\"token comment\"># 以下参数将会在调用脚本时传给脚本:</span>\n<span class=\"token comment\"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span>\n<span class=\"token comment\"># 目前&lt;state>总是“failover”,</span>\n<span class=\"token comment\"># &lt;role>是“leader”或者“observer”中的一个。 </span>\n<span class=\"token comment\"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span>\n<span class=\"token comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span>\n<span class=\"token comment\"># sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>\nsentinel client-reconfig-script mymaster /var/redis/reconfig.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Redis缓存穿透\"><a href=\"#Redis缓存穿透\" class=\"headerlink\" title=\"Redis缓存穿透\"></a>Redis缓存穿透</h2><ul>\n<li><p>描述：</p>\n<p>用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n</li>\n<li><p>方案</p>\n<ul>\n<li><p>布隆过滤器</p>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力</p>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2022/02/17/redis/image-58.png\" class=\"\">\n<ul>\n<li><p>缓存空对象</p>\n<p>缓存中存储较多无意义的空对象</p>\n<p>缓存层和存储层的数据可能会出现数据不一致的情况</p>\n</li>\n</ul>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><ul>\n<li><p>描述：缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，并且回写缓存，会导使数据库瞬间压力过大。</p>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li><p>设置热点数据永不过期</p>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题、</p>\n</li>\n<li><p>加互斥锁</p>\n<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁考验很大</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><ul>\n<li><p>描述</p>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效，产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增。Redis宕机。</p>\n</li>\n<li><p>解决方案</p>\n<ul>\n<li>Redis高可用：多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</li>\n<li>限流降级：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</li>\n<li>数据预热：在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"MySQL数据库知识点梳理","date":"2021-04-28T03:27:30.000Z","_content":"\n\n# MySQL数据库知识点梳理\n## 1. 数据库基本命令\n```sql\nMYSQL -UROOT -P123456 -- 连接数据库\nUPDATE MYSQL.USER SET AUTHENTICATION_STRING=PASSWORD('123456') WHERE USER='ROOT' AND HOST='LOCALHOST'; -- 修改用户密码\nFLUSH PRIVILEGES; -- 刷新权限\nSHOW DATABASES; -- 查看所有数据库\nUSE 数据库名; -- 切换数据库；\nSHOW TABLES; -- 查看数据库中所有表\nDESCRIBE 表名; -- 显示数据库中所有的表信息\nSHOW CREATE DATABASE `库名`; -- 查看创建数据库语句\nSHOW CREATE TABLE `表名;` -- 查看创建数据表语句\nDESC `表名`; -- 查看表结构\nEXIT; -- 退出连接\n```\n\n\n\n## 2. 数据库操作\n\n```sql\nCREATE DATABASE [IF NOT EXISTS] 数据库名; -- 创建数据库\nDROP DATABASE [IF EXISTS] 数据库名; -- 删除数据库\n```\n\n\n\n## 3. 数据库的列类型\n\n- 数值\n  - tinyint 1字节\n  - smallint 2字节\n  - mediumint 3字节\n  - **int 常用标准整数 4字节**\n  - bigint 8字节\n  - float 浮点数 4字节\n  - double 浮点数 8字节\n  - decimal 字符串形式的浮点数 用于金融计算\n  \n- 字符串\n  - char 固定大小0~255\n  - **varchar 可变字符串 0~65535**\n  - tinytext 微型文本 2^8-1\n  - **text 大文本 2^16-1**\n\n- 时间日期\n\n  - date YYYY-MM-DD 日期格式\n  - time HH:mm:ss 时间格式\n  - **datetime  YYYY-MM-DD HH:mm:ss 常用时间格式**\n  - timestamp 时间戳\n  - year 年份表示\n\n- null\n\n\n\n## 4. 数据库字段属性\n\n- Unsigned：\n  - 无符号整数\n  - 声明该列不能为负数\n  \n- zerofill： 不足的位数0填充\n\n- 自增： 设计唯一主键，类型必须为整数，可以自定义起始值和步长\n\n- 非空：\n  - not null 不赋值会报错\n  - null 不赋值默认为null\n  \n- default\n\n  \n\n## 5. 数据表操作\n\n1. 创建表\n\n   ```sql\n   CREATE TABLE [IF NOT EXISTS] `表名`(\n    `字段名` 列类型 [属性] [索引] [注释],\n   )[表类型][字符集][注释];\n   ```\n\n 2. 修改表\n\n    ```sql\n    ALTER TABLE 表名 RENAME AS 表名; -- 修改表名 \n    ALTER TABLE 表名 ADD 字段名 列属性; -- 表增加字段\n    ALTER TABLE 表名 MODIFY 字段名 列属性; -- 表修改约束\n    ALTER TABLE 表名 CHANGE 字段名 字段名 列属性; -- 表字段重命名\n    ```\n\n3. 删除表字段\n\n   ```sql\n   ALTER TABLE 表名 DROP 字段名;\n   ```\n\n4. 删除表\n\n    ```sql\n    DROP TABLE IF EXISTs 表名;\n    ```\n\n\n\n## 6. 引擎\n\n- INNODB（默认使用）：安全性高，事务处理。多表多用户操作\n  - 支持事务\n  - 支持数据行锁定\n  - 支持外键约束\n  - 不支持全文索引\n  - 表空间大小：大\n- MYISAM（较早版本使用）：节约空间，速度较快\n  - 不支持事务\n  - 不支持数据行锁定\n  - 不支持外键约束\n  - 支持全文索引\n  - 表空间大小：小\n\n\n\n## 7. DML\n\n- 插入\n\n  ```sql\n  INSERT INTO 表名([字段1,字段2]) values ('值1','值2'),('值1','值2');\n  ```\n\n- 修改\n\n  ```sql\n  UPDATE 表名 SET 字段1 = 值1, 字段2 = 值2, WHERE [条件];\n  ```\n\n- 删除\n\n  ```sql\n  DELETE FROM 表名 WHERE [条件];\n  ```\n\n  ```sql\n  TRUNCATE 表名; -- 清空表数据，重置自增列，不影响事务\n  ```\n\n- 查询\t\n\n    ```sql\n    SELECT [ALL|DISTINCT|DISTINCTROW|TOP]\n    {*|talbe.*|[table.]field1[AS alias1][,[table.]field2[AS alias2][,…]]}\n    FROM TABLE [AS 别名]\n    [LEFT | RIGHT | INNER join TABLE on …]\n    [WHERE…]\n    [GROUP BY…] -- 通过哪个字段分组\n    [HAVING…] -- 过滤分组的记录必须满足的次要条件\n    [ORDER BY 字段名 ASC|DESC]\n    [LIMIT 查询起始下标,数量];\n    ```\n    \n    ```sql\n    SELECT @@auto_increment_increment; -- 查询自增步长\n    ```\n\n\n\n## 8. 七种JOIN\n\n{% asset_img qizhongjon.png %}\n\n\n\n## 9. MYSQL常用函数\n\n- 数学运算函数\n ```sql\n  ABS(-8)  -- 8，绝对值\n  CEILING(9.4) -- 10，向上取整\n  FLOOR(9.4) -- 9，向下取整\n  RAND() -- 返回0-1的随机数\n  SIGN() -- 返回一个数的符号，正数1，负数-1\n ```\n- 字符串函数\n ```sql\n  CHAR_LENGTH('字符串长度') -- 返回字符串长度\n  CONCAT('拼接','多个','字符串') -- 拼接字符串\n  INSERT(源字符串,位置,长度,插入字符串) -- 查找位置替换对应长度的字符串\n  LOWER(字符串) -- 转小写\n  UPPER(字符串) -- 转大写\n  INSTR(字符串,子串) -- 返回第一次出现的子串的位置\n  REPLACE(字符串,被替换,需替换) -- 替换指定字符串\n  SUBSTR(字符串,截取起始位置,长度) -- 截取指定位置和长度的字符串\n  REVERSE(字符串) -- 反转\n  MD5(明文) -- MD5 加密\n ```\n- 时间和日期函数\n ```sql\n  CURRENT_DATE() -- 获取当前日期\n  CURDATE() -- 获取当前日期\n  NOW() -- 获取当前时间，时分秒\n  LOCALTIME -- 获取本地时间，时分秒\n  SYSDATE() -- 系统时间\n  YEAR()\n  MONTH()\n  DAY()\n  HOUR()\n  MINUTE()\n  SECOND()\n ```\n- 系统函数\n ```sql\n  SYSTEM_USER()\n  USER()\n  VERSION() -- 获取版本\n ```\n- 聚合函数\n\n```SQL\nCOUNT() -- 统计数量，count(字段)忽略null，count(*),count(1)不会忽略null\nSUM() -- 求和\nAVG() -- 求平均\nMAX() -- 求最大\nMIN() -- 求最小\n```\n\n\n\n## 10. 事务\n\n将一组SQL放在一个批次中去执行\n\n 1. 事务原则：ACID原则\n\n    - 原子性：一起成功或一起失败\n\n    - 一致性：操作前后数据完整性最终一致\n\n    - 隔离性：多个用户同时操作，排除其他事务对本次事务的影响\n\n    - 持久性：事务结束后的数据不随外界原因导致丢失，事务未提交恢复原状，事务提交后持久化到数据库，一旦提交就不可逆\n2. 事务的隔离级别\n\n    - 脏读：一个事务读取到另一个事务未提交的数据\n\t- 不可重复度：在一个事务内读取表中的某一行数据，多次读取结果不同\n\t- 虚读（幻读）：在一个事务内读取到了别的事务插入的数据，导致前后读取不一致（比如多了一条）\n\n3. 手动处理事务\n\n   ```sql\n   SET autocommit = 0; 关闭事务自动提交\n   START TRANSACTION; -- 标记一个事务开始\n   ...\n   COMMIT; -- 提交\n   ROLLBACK; -- 回滚\n   SET autocommit = 1; 开启事务自动提交\n   SAVEPOINT; -- 保存点\n   ROLLBACK TO SAVEPOINT; -- 回滚到保存点\n   RELEASE  SAVEPOINT; -- 撤销保存点\n   ```\n\n   \n\n## 11. 索引\n\n索引（index）是帮助MYSQL高效获取数据的数据结构。\n\n1. 索引的分类\n\n   - 主键索引（PRIMARY KEY）唯一标识，不可重复，只能有一个列作为主键\n   - 唯一索引（UNIQUE KEY）避免重复的列出现，多个列都可以标识\n   - 常规索引（KEY/INDEX）默认的\n   - 全文索引（FULLTEXT）快速定位数据，在特定数据库引擎下才有\n\n  2. 索引的使用\n\n     ```sql\n     SHOW INDEX FROM 表名; -- 显示所有索引信息\n     ALTER TABLE 表名 ADD 索引类型 index 索引名(字段名); -- 添加索引\n     CREATE INDEX 索引名 on 表名(字段名); -- 添加索引\n     SELECT * FROM 表名 use index(索引名) WHERE ...; -- 提示SQL使用索引\n     SELECT * FROM 表名 ignore index(索引名) WHERE ...; -- 提示SQL忽略使用索引\n     SELECT * FROM 表名 force index(索引名) WHERE ...; -- 提示SQL必须使用索引\n     ```\n\n3. 索引原则\n\n   - 索引不是越多越好\n   - 不要对进程变动数据加索引\n   - 小数据量表不需要加索引\n   - 索引一般加在常用来查询的字段上\n   - 覆盖索引：查询使用了索引，并且需要返回的列在该索引中全部能找到，减少select *\n\n 4. 索引失效情况\n\n    - 最左前缀原则：如果索引了多列（联合索引），查询从最左列开始，并且不跳过索引中的列。如果跳过某一列，索引将部分失效（后面的字段索引失效）。\n    - 联合索引中，出现范围查询（大于小于），范围查询右侧的列索引失效。业务允许的情况下使用大于等于、小于等于。\n    - 不要在索引列上进行运算，索引将失效。\n    - 字符串类型不加单引号，索引失效。\n    - 头部模糊匹配（%_），索引失效。尾部模糊匹配，索引不失效。\n    - or分隔的条件，如果or两侧的条件有一侧无索引，则涉及的索引都不会被用到。\n    - 如果MySQL评估使用索引比全表扫描更慢，则不使用索引。\n\n\n\n## 12. 用户管理\n\n用户表：mysql.user\n\n```sql\nCREATE USER 用户名 IDENTIFIED BY 密码; -- 创建用户\nSET PASSWORD = PASSWORD(密码); -- 修改当前用户密码\nSET PASSWORD FOR 用户名 = PASSWORD(密码); -- 修改指定用户密码\nRENAME USER 用户名 TO 新用户名; -- 重命名\nGRANT ALL PRIVILEGES ON 库.表 TO 用户; -- 用户授权所有权限\nSHOW GRANTS FOR 用户; -- 查询权限\nSHOW GRANTS FOR root@localhost; -- 查询权限\nREVOKE ALL PRIVILEGES ON 库.表 FROM 用户; -- 撤销权限\nDROP USER 用户名; -- 删除用户\n```\n\n命令行导出数据库：mysqldump -h主机名 -uroot -p密码 库名 表名1 表名2  > 磁盘名/文件名\n\n命令行导入数据库：source 磁盘名/文件名\n\n\n\n## 13. 三大范式\n\n- 第一范式（1NF）：数据库表的每一列都是不可分割的原子数据项\n- 第二范式（2NF）：（满足第一范式）数据库表中的每一列都和主键相关，而不是只与主键的某一列相关\n- 第三范式（3NF）：（满足第一范式和第二范式）数据库表的每一列都与主键直接相关，而不是间接相关\n\n\n\n## 14. JDBC\n\n```java\npackage com.jdbc.db;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport com.mysql.jdbc.Statement;\n\npublic class DBUTIL {\n\tprivate\tstatic final String URL = \"jdbc:mysql://localhost:3306/database\";\n\tprivate static final String USERNAME = \"root\";\n\tprivate static final String PASSWORD = \"password\";\n\t\n\tpublic static void main(String[] args) throws ClassNotFoundException, SQLException {\n\t\t// JDBC 的三要素文件，加载驱动，获取连接，\n\t\t//1. 加载驱动程序\n\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t//2. 获取数据库的连接 Connection 数据库连接对象\n\t\tConnection connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);\n\t\t//3. 通过数据库的连接操作数据库，实现增删改查，Statement SQL执行对象\n\t\tStatement statement = connection.createStatement();\n\t\t//4. 返回 ResultSet 对象，编写 sql 语句，实现最简单的增删改查\n\t\tResultSet resultSet = statement.executeQuery(\"select username,password from user\");\n\t\t//打印数据\n\t\twhile(resultSet.next()) {\n\t\t\t//返回字符串\n\t\t\tSystem.out.println(rs.getString(\"username\") + rs.getString(\"password\"));\n\t\t}\n        //5. 释放连接\n        resultSet.close();\n        statement.close();\n        connection.close();\n\t}\n}\n```\n\n```java\npackage com.thb.study3;\n\nimport com.thb.study2.Utils.JdbcUtils;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class Test03 {\n    public static void main(String[] args) {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;// 预执行\n        try {\n            connection = JdbcUtils.getConnection();\n            connection.setAutoCommit(false);// 关闭自动提交，开启事务\n            String sql = \"update account set money=money-100 where `name`='A'\";\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.executeUpdate();\n            String sql2 = \"update account set money=money+100 where `name`='B'\";\n            preparedStatement = connection.prepareStatement(sql2);\n            preparedStatement.executeUpdate();\n            connection.commit();\n            System.out.println(\"成功\");\n        } catch (SQLException e) {\n            //默认失败会回滚\n            connection.rollback();\n            e.printStackTrace();\n        }finally {\n            JdbcUtils.release(connection,preparedStatement,null);\n        }\n    }\n}\n```\n\n\n\n## 15. 视图\n\n虚拟存在的表，数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。只保留sql的查询逻辑，不保存查询结果。\n\n作用：1. 简化用户对数据的理解，也简化用户的操作。2. 设定视图用户的操作权限。3. 屏蔽真实表结构变化带来的影响\n\n- 创建\n\n  ```sql\n  CERATE VIEW 视图名 AS SELECT语句  [WITH[CASCADED | LOCAL] CHECK OPTION]; -- CASCADED 检查依赖的视图，LOCAL不检查依赖的视图\n  ```\n\n- 查询\n\n  ```sql\n  SHOW CREATE VIEW 视图名;\n  SELECT * FROM 视图名;\n  ```\n  \n- 修改\n\n  ```sql\n  CERATE OR REPLACE VIEW 视图名 AS SELECT语句  [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方式一\n  ALTER VIEW 视图名 AS SELECT语句 [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方式二\n  ```\n\n- 删除\n\n  ```sql\n  DROP VIEW [IF EXISTS] 视图名;\n  ```\n\n\n\n## 16. 存储过程\n\n数据库sql语言层面的代码封装和重用。\n\n- 创建\n\n  ```sql\n  DELIMITER $$ -- 定义结束符\n  CREATE PROCEDURE 存储过程名称([IN|OUT|INOUT 参数名 参数类型])\n  BEGIN \n  \t-- SQL语句\n  END$$\n  DELIMITER ; -- 重置结束符\n  ```\n\n- 调用\n\n  ```sql\n  CALL 名称([参数])\n  ```\n\n- 查看\n\n  ```sql\n  SELECT * FROM INFORMATION_SCHEMA_ROUTINES WHERE ROUTINE_SCHEMA = 'xxx';  -- 查询指定数据库的存储过程及状态信息\n  SHOW CREATE PROCEDURE 存储过程名称;  -- 查询存储过程的定义\n  ```\n  \n- 删除\n  \n  ```sql\n  DROP PROCEDURE [IF EXISTS] 存储过程名称;\n  ```\n  \n- 变量\n  \n  - 系统变量\n  \n    ```sql\n    SHOW [SESSION | GLOBAL] VARIABLES; -- 查看所有系统变量\n    SELECT @@[SESSION | GLOBAL] 系统变量名; -- 查看指定变量的值\n    SET [SESSION | GLOBAL] 系统变量名 = 值; -- 设置系统变量\n    SET @@[SESSION | GLOBAL] 系统变量名 = 值; -- 设置系统变量\n    ```\n    \n  - 自定义变量\n  \n    作用域：当前连接\n  \n    ```sql\n    SET @var_name  = expr[,@var_name  = expr]...; -- 赋值\n    SET @var_name  := expr[,@var_name  := expr]...; -- 赋值\n    SELECT @var_name  = expr[,@var_name  = expr]...; -- 赋值\n    SELECT 字段名 INTO @var_name FROM 表名; -- 赋值\n    \n    SELECT @var_name; -- 使用\n    ```\n  \n  - 局部变量\n  \n    作用域：BEGIN ... END块;\n  \n    ```sql\n    DECLARE 变量名 变量类型[DEFAULT]; -- 声明\n    SET 变量名 = 值; -- 赋值\n    SET 变量名 := 值; -- 赋值\n    SELECT 字段名 INTO 变量名 FROM 表名; -- 赋值\n    ```\n    \n  \n- 语句\n\n  ```sql\n  -- 判断\n  -- if\n  IF 条件1 THEN\n  ...\n  ELSEIF 条件2 THEN\n  ELSE\n  ...\n  END IF;\n  \n  -- case\n  CASE case_value\n  \tWHEN ... THEN ...\n  \tELSE\n  END CASE;\n  \n  -- 循环\n  -- while\n  WHILE 条件 DO\n  \t... sql\n  END WHILE;\n  \n  -- repeat\n  REPEAT\n  \t... sql\n  \tUNTIL 条件\n  END REPEAT;\n  \n  -- loop\n  [begin_label:]LOOP\n  \t...sql\n  END LOOP [end_label];\n  \n  -- 游标\n  DECLARE 游标名称 CURSOR FOR 查询语句; -- 声明游标\n  OPEN 游标名称; -- 打开游标\n  FETCH 游标名称 INTO 变量[,变量]; -- 获取游标记录\n  \n  -- handler\n  DECLARE handler_action HANDLER FOR condition_value[,condition_value]... statement; \n  -- handler_action\n  \tCONTINUE; -- 继续执行程序\n  \tEXIT; -- 终止程序\n  -- condition_value\n  \tSQLSTATE sqlstate_value; -- 状态码\n  \tSQLWARNING; -- 所有以01开头的SQLSTATE代码的缩写\n  \tNOT FOUND; -- 所有以02开头的SQLSTATE代码的缩写\n  \tSQLEXCEPTION; -- 所有没被SQLWARNING和NOT FOUND捕获\n  ```\n\n- 存储函数\n\n  ```sql\n  CREATE FUNCTION 存储函数名称([参数列表])\n  RETURNS TYPE [DETERMINISTIC | NO SQL |READS SQL DATA]\n  BEGIN \n  \t-- SQL语句\n  \tRETURN ...;\n  END;\n  ```\n\n\n\n## 17. 触发器\n\n触发器是指与表有关的数据库对象，指在insert/update/delete之前或者之后，触发并执行触发器中定义的SQL集合。OLD，NEW指发生变化的记录内容\n\n- 创建\n\n  ```sql\n  CREATE TRIGGER trigger_name\n  BEFORE|AFTER INSERT|UPDATE|DELETE\n  ON tb_name FOR EACH ROW -- 行级触发器\n  BEGIN\n  \ttrigger_stmt;\n  END;\n  ```\n\n- 查看\n\n  ```sql\n  SHOW TRIGGERS;\n  ```\n\n - 删除\n\n   ```sql\n   DROP TRIGGER [schema_name] trigger_name; -- 如果没有指定schema_name，默认当前数据库\n   ```\n\n\n\n## 18. 锁\n\n计算机协调多个进程或线程并发访问某一资源的机制。\n\n- 全局锁\n\n  对整个数据库实例加锁，加锁后处于只读状态。后续写操作将被阻塞。\n\n  使用场景：做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据完整性\n\n  ```\n  fush tables with read lock; -- 加全局锁\n  unlock tables; -- 释放锁\n  ```\n\n- 表级锁\n\n  每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。\n\n  - 表锁\n\n    加锁：lock tables 表名... read/write\n\n    释放锁：unlock tables / 客户端连接关闭\n\n    - 表共享读锁（read lock）：阻塞写，不阻塞其他客户端的读\n\n    - 表独占写锁（write lock）：阻塞其他客户端的读写，不阻塞自己的读写\n\n  - 元数据锁（meta data lock）\n\n    系统自动控制，无需显式使用。访问表时会自动加上，维护表元数据的数据一致性。在表上有未提交的事务时，不可以对元数据进行写入操作。避免了DML和DDL的冲突，保证读写的正确性。\n\n    增删改查时，加MDL读锁（共享），表结构变更时，加MDL写锁（排他）。\n\n  - 意向锁\n\n    使用场景：加表锁时需要检查每一行的行锁，为解决效率低的问题，使用意向锁减少检查。\n\n    - 意向共享锁（IS）\n\n      与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。\n\n    - 意向排他锁（IX）\n\n      与表锁共享锁（read）及表锁排他锁（write）都互斥，意向锁之间不互斥\n    \n\n- 行级锁\n\n  每次操作锁住对应表。锁定粒度小，发生锁冲突的概率最低，并发度最高。\n\n  通过对索引上的索引项加锁来实现的，而不是对记录加的锁。\n\n  - 行锁（record lock）\n\n    锁定单个记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。\n\n    - 共享锁（S）：\n\n      允许一个事物去读一行，阻止其他事务获得相同数据集的排他锁。\n  \n    - 排他锁（X）：\n  \n      允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。\n  \n  - 间隙锁（gap lock）\n  \n    锁定索引记录间隙（不含记录），确保索引记录间隙不变，防止其他事务insert产生幻读。在RR隔离级别下支持\n  \n  - 临键锁（next-key-lock）\n  \n    行锁和间隙锁的组合。在RR隔离级别下支持\n  \n\n\n\n## 19. SQL性能分析\n\n - SQL执行频率\n\n   ```sql\n   SHOW GLOBAL STATUS LIKE 'Com_______)';\n   ```\n\n - 开启慢查询日志\n\n​\t\t/etc/my.cnf配置 ，配置完重启mysql\n\n​\t\tslow_query_log = 1 # 设置开启MYSQL慢查询日志\n\n​\t\tlong_query_time = 2 # 设置SQL执行时间\n\n - profile耗时详情\n\n   ```sql\n   show profiles;\n   show profile [cpu] [for query query_id]; -- 耗时情况\n   ```\n\n - expain\n\n   sql语句前加上explain/desc\n\n    - select _type\n\n       - SIMPLE 简单表，不使用表连接或者子查询\n\n       - PRIMARY 主查询 外层的查询\n\n       - UNION UNION中的第二个或者后面的查询语句\n\n       - SUBQUERY SELECT / WHERE包含子查询\n\n    - **type**\n\n       ​\t连接类型由好到差NULL（不访问表）、system（系统表）、const（主键或唯一索引）、eq_ref（唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配）、ref（非唯一性的索引）、range（使用索引返回一个范围中的行，如大于小于等情况）、index（用了索引但遍历索引树）、all（全表扫描）\n\n\t - **possible_key** \n\t\n\t    显示可能应用在这张表上的索引，一个或多个\n\t\n\t - **key**\n\t\n\t    实际用到的索引，没有使用索引则为null\n\t\n\t - **key_len**\n\t\n\t    索引中使用的字节数，索引字段最大可能长度（并非实际使用长度），长度越短越好\n\t\n\t - rows\n\t\n\t    mysql认为必须要执行查询的行数（不准确的估计值）\n\t\n\t - filtered\n\t\n\t    表示返回结果行数占需读取行数的百分比，值越大越好\n\t    \n\t - extra\n\t\n\t    - using index condition; 查找使用了索引，但是需要回表查询数据\n\t    - using where;using index; 查找使用了索引，但是需要的数据都在索引列中能找到，不需要回表查询数据\n\t\n\t    ","source":"_posts/MySQL数据库知识点梳理.md","raw":"---\ntitle: MySQL数据库知识点梳理\ndate: 2021-04-28 11:27:30\ntags: 数据库\ncategories: 编程\n---\n\n\n# MySQL数据库知识点梳理\n## 1. 数据库基本命令\n```sql\nMYSQL -UROOT -P123456 -- 连接数据库\nUPDATE MYSQL.USER SET AUTHENTICATION_STRING=PASSWORD('123456') WHERE USER='ROOT' AND HOST='LOCALHOST'; -- 修改用户密码\nFLUSH PRIVILEGES; -- 刷新权限\nSHOW DATABASES; -- 查看所有数据库\nUSE 数据库名; -- 切换数据库；\nSHOW TABLES; -- 查看数据库中所有表\nDESCRIBE 表名; -- 显示数据库中所有的表信息\nSHOW CREATE DATABASE `库名`; -- 查看创建数据库语句\nSHOW CREATE TABLE `表名;` -- 查看创建数据表语句\nDESC `表名`; -- 查看表结构\nEXIT; -- 退出连接\n```\n\n\n\n## 2. 数据库操作\n\n```sql\nCREATE DATABASE [IF NOT EXISTS] 数据库名; -- 创建数据库\nDROP DATABASE [IF EXISTS] 数据库名; -- 删除数据库\n```\n\n\n\n## 3. 数据库的列类型\n\n- 数值\n  - tinyint 1字节\n  - smallint 2字节\n  - mediumint 3字节\n  - **int 常用标准整数 4字节**\n  - bigint 8字节\n  - float 浮点数 4字节\n  - double 浮点数 8字节\n  - decimal 字符串形式的浮点数 用于金融计算\n  \n- 字符串\n  - char 固定大小0~255\n  - **varchar 可变字符串 0~65535**\n  - tinytext 微型文本 2^8-1\n  - **text 大文本 2^16-1**\n\n- 时间日期\n\n  - date YYYY-MM-DD 日期格式\n  - time HH:mm:ss 时间格式\n  - **datetime  YYYY-MM-DD HH:mm:ss 常用时间格式**\n  - timestamp 时间戳\n  - year 年份表示\n\n- null\n\n\n\n## 4. 数据库字段属性\n\n- Unsigned：\n  - 无符号整数\n  - 声明该列不能为负数\n  \n- zerofill： 不足的位数0填充\n\n- 自增： 设计唯一主键，类型必须为整数，可以自定义起始值和步长\n\n- 非空：\n  - not null 不赋值会报错\n  - null 不赋值默认为null\n  \n- default\n\n  \n\n## 5. 数据表操作\n\n1. 创建表\n\n   ```sql\n   CREATE TABLE [IF NOT EXISTS] `表名`(\n    `字段名` 列类型 [属性] [索引] [注释],\n   )[表类型][字符集][注释];\n   ```\n\n 2. 修改表\n\n    ```sql\n    ALTER TABLE 表名 RENAME AS 表名; -- 修改表名 \n    ALTER TABLE 表名 ADD 字段名 列属性; -- 表增加字段\n    ALTER TABLE 表名 MODIFY 字段名 列属性; -- 表修改约束\n    ALTER TABLE 表名 CHANGE 字段名 字段名 列属性; -- 表字段重命名\n    ```\n\n3. 删除表字段\n\n   ```sql\n   ALTER TABLE 表名 DROP 字段名;\n   ```\n\n4. 删除表\n\n    ```sql\n    DROP TABLE IF EXISTs 表名;\n    ```\n\n\n\n## 6. 引擎\n\n- INNODB（默认使用）：安全性高，事务处理。多表多用户操作\n  - 支持事务\n  - 支持数据行锁定\n  - 支持外键约束\n  - 不支持全文索引\n  - 表空间大小：大\n- MYISAM（较早版本使用）：节约空间，速度较快\n  - 不支持事务\n  - 不支持数据行锁定\n  - 不支持外键约束\n  - 支持全文索引\n  - 表空间大小：小\n\n\n\n## 7. DML\n\n- 插入\n\n  ```sql\n  INSERT INTO 表名([字段1,字段2]) values ('值1','值2'),('值1','值2');\n  ```\n\n- 修改\n\n  ```sql\n  UPDATE 表名 SET 字段1 = 值1, 字段2 = 值2, WHERE [条件];\n  ```\n\n- 删除\n\n  ```sql\n  DELETE FROM 表名 WHERE [条件];\n  ```\n\n  ```sql\n  TRUNCATE 表名; -- 清空表数据，重置自增列，不影响事务\n  ```\n\n- 查询\t\n\n    ```sql\n    SELECT [ALL|DISTINCT|DISTINCTROW|TOP]\n    {*|talbe.*|[table.]field1[AS alias1][,[table.]field2[AS alias2][,…]]}\n    FROM TABLE [AS 别名]\n    [LEFT | RIGHT | INNER join TABLE on …]\n    [WHERE…]\n    [GROUP BY…] -- 通过哪个字段分组\n    [HAVING…] -- 过滤分组的记录必须满足的次要条件\n    [ORDER BY 字段名 ASC|DESC]\n    [LIMIT 查询起始下标,数量];\n    ```\n    \n    ```sql\n    SELECT @@auto_increment_increment; -- 查询自增步长\n    ```\n\n\n\n## 8. 七种JOIN\n\n{% asset_img qizhongjon.png %}\n\n\n\n## 9. MYSQL常用函数\n\n- 数学运算函数\n ```sql\n  ABS(-8)  -- 8，绝对值\n  CEILING(9.4) -- 10，向上取整\n  FLOOR(9.4) -- 9，向下取整\n  RAND() -- 返回0-1的随机数\n  SIGN() -- 返回一个数的符号，正数1，负数-1\n ```\n- 字符串函数\n ```sql\n  CHAR_LENGTH('字符串长度') -- 返回字符串长度\n  CONCAT('拼接','多个','字符串') -- 拼接字符串\n  INSERT(源字符串,位置,长度,插入字符串) -- 查找位置替换对应长度的字符串\n  LOWER(字符串) -- 转小写\n  UPPER(字符串) -- 转大写\n  INSTR(字符串,子串) -- 返回第一次出现的子串的位置\n  REPLACE(字符串,被替换,需替换) -- 替换指定字符串\n  SUBSTR(字符串,截取起始位置,长度) -- 截取指定位置和长度的字符串\n  REVERSE(字符串) -- 反转\n  MD5(明文) -- MD5 加密\n ```\n- 时间和日期函数\n ```sql\n  CURRENT_DATE() -- 获取当前日期\n  CURDATE() -- 获取当前日期\n  NOW() -- 获取当前时间，时分秒\n  LOCALTIME -- 获取本地时间，时分秒\n  SYSDATE() -- 系统时间\n  YEAR()\n  MONTH()\n  DAY()\n  HOUR()\n  MINUTE()\n  SECOND()\n ```\n- 系统函数\n ```sql\n  SYSTEM_USER()\n  USER()\n  VERSION() -- 获取版本\n ```\n- 聚合函数\n\n```SQL\nCOUNT() -- 统计数量，count(字段)忽略null，count(*),count(1)不会忽略null\nSUM() -- 求和\nAVG() -- 求平均\nMAX() -- 求最大\nMIN() -- 求最小\n```\n\n\n\n## 10. 事务\n\n将一组SQL放在一个批次中去执行\n\n 1. 事务原则：ACID原则\n\n    - 原子性：一起成功或一起失败\n\n    - 一致性：操作前后数据完整性最终一致\n\n    - 隔离性：多个用户同时操作，排除其他事务对本次事务的影响\n\n    - 持久性：事务结束后的数据不随外界原因导致丢失，事务未提交恢复原状，事务提交后持久化到数据库，一旦提交就不可逆\n2. 事务的隔离级别\n\n    - 脏读：一个事务读取到另一个事务未提交的数据\n\t- 不可重复度：在一个事务内读取表中的某一行数据，多次读取结果不同\n\t- 虚读（幻读）：在一个事务内读取到了别的事务插入的数据，导致前后读取不一致（比如多了一条）\n\n3. 手动处理事务\n\n   ```sql\n   SET autocommit = 0; 关闭事务自动提交\n   START TRANSACTION; -- 标记一个事务开始\n   ...\n   COMMIT; -- 提交\n   ROLLBACK; -- 回滚\n   SET autocommit = 1; 开启事务自动提交\n   SAVEPOINT; -- 保存点\n   ROLLBACK TO SAVEPOINT; -- 回滚到保存点\n   RELEASE  SAVEPOINT; -- 撤销保存点\n   ```\n\n   \n\n## 11. 索引\n\n索引（index）是帮助MYSQL高效获取数据的数据结构。\n\n1. 索引的分类\n\n   - 主键索引（PRIMARY KEY）唯一标识，不可重复，只能有一个列作为主键\n   - 唯一索引（UNIQUE KEY）避免重复的列出现，多个列都可以标识\n   - 常规索引（KEY/INDEX）默认的\n   - 全文索引（FULLTEXT）快速定位数据，在特定数据库引擎下才有\n\n  2. 索引的使用\n\n     ```sql\n     SHOW INDEX FROM 表名; -- 显示所有索引信息\n     ALTER TABLE 表名 ADD 索引类型 index 索引名(字段名); -- 添加索引\n     CREATE INDEX 索引名 on 表名(字段名); -- 添加索引\n     SELECT * FROM 表名 use index(索引名) WHERE ...; -- 提示SQL使用索引\n     SELECT * FROM 表名 ignore index(索引名) WHERE ...; -- 提示SQL忽略使用索引\n     SELECT * FROM 表名 force index(索引名) WHERE ...; -- 提示SQL必须使用索引\n     ```\n\n3. 索引原则\n\n   - 索引不是越多越好\n   - 不要对进程变动数据加索引\n   - 小数据量表不需要加索引\n   - 索引一般加在常用来查询的字段上\n   - 覆盖索引：查询使用了索引，并且需要返回的列在该索引中全部能找到，减少select *\n\n 4. 索引失效情况\n\n    - 最左前缀原则：如果索引了多列（联合索引），查询从最左列开始，并且不跳过索引中的列。如果跳过某一列，索引将部分失效（后面的字段索引失效）。\n    - 联合索引中，出现范围查询（大于小于），范围查询右侧的列索引失效。业务允许的情况下使用大于等于、小于等于。\n    - 不要在索引列上进行运算，索引将失效。\n    - 字符串类型不加单引号，索引失效。\n    - 头部模糊匹配（%_），索引失效。尾部模糊匹配，索引不失效。\n    - or分隔的条件，如果or两侧的条件有一侧无索引，则涉及的索引都不会被用到。\n    - 如果MySQL评估使用索引比全表扫描更慢，则不使用索引。\n\n\n\n## 12. 用户管理\n\n用户表：mysql.user\n\n```sql\nCREATE USER 用户名 IDENTIFIED BY 密码; -- 创建用户\nSET PASSWORD = PASSWORD(密码); -- 修改当前用户密码\nSET PASSWORD FOR 用户名 = PASSWORD(密码); -- 修改指定用户密码\nRENAME USER 用户名 TO 新用户名; -- 重命名\nGRANT ALL PRIVILEGES ON 库.表 TO 用户; -- 用户授权所有权限\nSHOW GRANTS FOR 用户; -- 查询权限\nSHOW GRANTS FOR root@localhost; -- 查询权限\nREVOKE ALL PRIVILEGES ON 库.表 FROM 用户; -- 撤销权限\nDROP USER 用户名; -- 删除用户\n```\n\n命令行导出数据库：mysqldump -h主机名 -uroot -p密码 库名 表名1 表名2  > 磁盘名/文件名\n\n命令行导入数据库：source 磁盘名/文件名\n\n\n\n## 13. 三大范式\n\n- 第一范式（1NF）：数据库表的每一列都是不可分割的原子数据项\n- 第二范式（2NF）：（满足第一范式）数据库表中的每一列都和主键相关，而不是只与主键的某一列相关\n- 第三范式（3NF）：（满足第一范式和第二范式）数据库表的每一列都与主键直接相关，而不是间接相关\n\n\n\n## 14. JDBC\n\n```java\npackage com.jdbc.db;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport com.mysql.jdbc.Statement;\n\npublic class DBUTIL {\n\tprivate\tstatic final String URL = \"jdbc:mysql://localhost:3306/database\";\n\tprivate static final String USERNAME = \"root\";\n\tprivate static final String PASSWORD = \"password\";\n\t\n\tpublic static void main(String[] args) throws ClassNotFoundException, SQLException {\n\t\t// JDBC 的三要素文件，加载驱动，获取连接，\n\t\t//1. 加载驱动程序\n\t\tClass.forName(\"com.mysql.jdbc.Driver\");\n\t\t//2. 获取数据库的连接 Connection 数据库连接对象\n\t\tConnection connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);\n\t\t//3. 通过数据库的连接操作数据库，实现增删改查，Statement SQL执行对象\n\t\tStatement statement = connection.createStatement();\n\t\t//4. 返回 ResultSet 对象，编写 sql 语句，实现最简单的增删改查\n\t\tResultSet resultSet = statement.executeQuery(\"select username,password from user\");\n\t\t//打印数据\n\t\twhile(resultSet.next()) {\n\t\t\t//返回字符串\n\t\t\tSystem.out.println(rs.getString(\"username\") + rs.getString(\"password\"));\n\t\t}\n        //5. 释放连接\n        resultSet.close();\n        statement.close();\n        connection.close();\n\t}\n}\n```\n\n```java\npackage com.thb.study3;\n\nimport com.thb.study2.Utils.JdbcUtils;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class Test03 {\n    public static void main(String[] args) {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;// 预执行\n        try {\n            connection = JdbcUtils.getConnection();\n            connection.setAutoCommit(false);// 关闭自动提交，开启事务\n            String sql = \"update account set money=money-100 where `name`='A'\";\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.executeUpdate();\n            String sql2 = \"update account set money=money+100 where `name`='B'\";\n            preparedStatement = connection.prepareStatement(sql2);\n            preparedStatement.executeUpdate();\n            connection.commit();\n            System.out.println(\"成功\");\n        } catch (SQLException e) {\n            //默认失败会回滚\n            connection.rollback();\n            e.printStackTrace();\n        }finally {\n            JdbcUtils.release(connection,preparedStatement,null);\n        }\n    }\n}\n```\n\n\n\n## 15. 视图\n\n虚拟存在的表，数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。只保留sql的查询逻辑，不保存查询结果。\n\n作用：1. 简化用户对数据的理解，也简化用户的操作。2. 设定视图用户的操作权限。3. 屏蔽真实表结构变化带来的影响\n\n- 创建\n\n  ```sql\n  CERATE VIEW 视图名 AS SELECT语句  [WITH[CASCADED | LOCAL] CHECK OPTION]; -- CASCADED 检查依赖的视图，LOCAL不检查依赖的视图\n  ```\n\n- 查询\n\n  ```sql\n  SHOW CREATE VIEW 视图名;\n  SELECT * FROM 视图名;\n  ```\n  \n- 修改\n\n  ```sql\n  CERATE OR REPLACE VIEW 视图名 AS SELECT语句  [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方式一\n  ALTER VIEW 视图名 AS SELECT语句 [WITH[CASCADED | LOCAL] CHECK OPTION]; -- 方式二\n  ```\n\n- 删除\n\n  ```sql\n  DROP VIEW [IF EXISTS] 视图名;\n  ```\n\n\n\n## 16. 存储过程\n\n数据库sql语言层面的代码封装和重用。\n\n- 创建\n\n  ```sql\n  DELIMITER $$ -- 定义结束符\n  CREATE PROCEDURE 存储过程名称([IN|OUT|INOUT 参数名 参数类型])\n  BEGIN \n  \t-- SQL语句\n  END$$\n  DELIMITER ; -- 重置结束符\n  ```\n\n- 调用\n\n  ```sql\n  CALL 名称([参数])\n  ```\n\n- 查看\n\n  ```sql\n  SELECT * FROM INFORMATION_SCHEMA_ROUTINES WHERE ROUTINE_SCHEMA = 'xxx';  -- 查询指定数据库的存储过程及状态信息\n  SHOW CREATE PROCEDURE 存储过程名称;  -- 查询存储过程的定义\n  ```\n  \n- 删除\n  \n  ```sql\n  DROP PROCEDURE [IF EXISTS] 存储过程名称;\n  ```\n  \n- 变量\n  \n  - 系统变量\n  \n    ```sql\n    SHOW [SESSION | GLOBAL] VARIABLES; -- 查看所有系统变量\n    SELECT @@[SESSION | GLOBAL] 系统变量名; -- 查看指定变量的值\n    SET [SESSION | GLOBAL] 系统变量名 = 值; -- 设置系统变量\n    SET @@[SESSION | GLOBAL] 系统变量名 = 值; -- 设置系统变量\n    ```\n    \n  - 自定义变量\n  \n    作用域：当前连接\n  \n    ```sql\n    SET @var_name  = expr[,@var_name  = expr]...; -- 赋值\n    SET @var_name  := expr[,@var_name  := expr]...; -- 赋值\n    SELECT @var_name  = expr[,@var_name  = expr]...; -- 赋值\n    SELECT 字段名 INTO @var_name FROM 表名; -- 赋值\n    \n    SELECT @var_name; -- 使用\n    ```\n  \n  - 局部变量\n  \n    作用域：BEGIN ... END块;\n  \n    ```sql\n    DECLARE 变量名 变量类型[DEFAULT]; -- 声明\n    SET 变量名 = 值; -- 赋值\n    SET 变量名 := 值; -- 赋值\n    SELECT 字段名 INTO 变量名 FROM 表名; -- 赋值\n    ```\n    \n  \n- 语句\n\n  ```sql\n  -- 判断\n  -- if\n  IF 条件1 THEN\n  ...\n  ELSEIF 条件2 THEN\n  ELSE\n  ...\n  END IF;\n  \n  -- case\n  CASE case_value\n  \tWHEN ... THEN ...\n  \tELSE\n  END CASE;\n  \n  -- 循环\n  -- while\n  WHILE 条件 DO\n  \t... sql\n  END WHILE;\n  \n  -- repeat\n  REPEAT\n  \t... sql\n  \tUNTIL 条件\n  END REPEAT;\n  \n  -- loop\n  [begin_label:]LOOP\n  \t...sql\n  END LOOP [end_label];\n  \n  -- 游标\n  DECLARE 游标名称 CURSOR FOR 查询语句; -- 声明游标\n  OPEN 游标名称; -- 打开游标\n  FETCH 游标名称 INTO 变量[,变量]; -- 获取游标记录\n  \n  -- handler\n  DECLARE handler_action HANDLER FOR condition_value[,condition_value]... statement; \n  -- handler_action\n  \tCONTINUE; -- 继续执行程序\n  \tEXIT; -- 终止程序\n  -- condition_value\n  \tSQLSTATE sqlstate_value; -- 状态码\n  \tSQLWARNING; -- 所有以01开头的SQLSTATE代码的缩写\n  \tNOT FOUND; -- 所有以02开头的SQLSTATE代码的缩写\n  \tSQLEXCEPTION; -- 所有没被SQLWARNING和NOT FOUND捕获\n  ```\n\n- 存储函数\n\n  ```sql\n  CREATE FUNCTION 存储函数名称([参数列表])\n  RETURNS TYPE [DETERMINISTIC | NO SQL |READS SQL DATA]\n  BEGIN \n  \t-- SQL语句\n  \tRETURN ...;\n  END;\n  ```\n\n\n\n## 17. 触发器\n\n触发器是指与表有关的数据库对象，指在insert/update/delete之前或者之后，触发并执行触发器中定义的SQL集合。OLD，NEW指发生变化的记录内容\n\n- 创建\n\n  ```sql\n  CREATE TRIGGER trigger_name\n  BEFORE|AFTER INSERT|UPDATE|DELETE\n  ON tb_name FOR EACH ROW -- 行级触发器\n  BEGIN\n  \ttrigger_stmt;\n  END;\n  ```\n\n- 查看\n\n  ```sql\n  SHOW TRIGGERS;\n  ```\n\n - 删除\n\n   ```sql\n   DROP TRIGGER [schema_name] trigger_name; -- 如果没有指定schema_name，默认当前数据库\n   ```\n\n\n\n## 18. 锁\n\n计算机协调多个进程或线程并发访问某一资源的机制。\n\n- 全局锁\n\n  对整个数据库实例加锁，加锁后处于只读状态。后续写操作将被阻塞。\n\n  使用场景：做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据完整性\n\n  ```\n  fush tables with read lock; -- 加全局锁\n  unlock tables; -- 释放锁\n  ```\n\n- 表级锁\n\n  每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。\n\n  - 表锁\n\n    加锁：lock tables 表名... read/write\n\n    释放锁：unlock tables / 客户端连接关闭\n\n    - 表共享读锁（read lock）：阻塞写，不阻塞其他客户端的读\n\n    - 表独占写锁（write lock）：阻塞其他客户端的读写，不阻塞自己的读写\n\n  - 元数据锁（meta data lock）\n\n    系统自动控制，无需显式使用。访问表时会自动加上，维护表元数据的数据一致性。在表上有未提交的事务时，不可以对元数据进行写入操作。避免了DML和DDL的冲突，保证读写的正确性。\n\n    增删改查时，加MDL读锁（共享），表结构变更时，加MDL写锁（排他）。\n\n  - 意向锁\n\n    使用场景：加表锁时需要检查每一行的行锁，为解决效率低的问题，使用意向锁减少检查。\n\n    - 意向共享锁（IS）\n\n      与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。\n\n    - 意向排他锁（IX）\n\n      与表锁共享锁（read）及表锁排他锁（write）都互斥，意向锁之间不互斥\n    \n\n- 行级锁\n\n  每次操作锁住对应表。锁定粒度小，发生锁冲突的概率最低，并发度最高。\n\n  通过对索引上的索引项加锁来实现的，而不是对记录加的锁。\n\n  - 行锁（record lock）\n\n    锁定单个记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。\n\n    - 共享锁（S）：\n\n      允许一个事物去读一行，阻止其他事务获得相同数据集的排他锁。\n  \n    - 排他锁（X）：\n  \n      允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。\n  \n  - 间隙锁（gap lock）\n  \n    锁定索引记录间隙（不含记录），确保索引记录间隙不变，防止其他事务insert产生幻读。在RR隔离级别下支持\n  \n  - 临键锁（next-key-lock）\n  \n    行锁和间隙锁的组合。在RR隔离级别下支持\n  \n\n\n\n## 19. SQL性能分析\n\n - SQL执行频率\n\n   ```sql\n   SHOW GLOBAL STATUS LIKE 'Com_______)';\n   ```\n\n - 开启慢查询日志\n\n​\t\t/etc/my.cnf配置 ，配置完重启mysql\n\n​\t\tslow_query_log = 1 # 设置开启MYSQL慢查询日志\n\n​\t\tlong_query_time = 2 # 设置SQL执行时间\n\n - profile耗时详情\n\n   ```sql\n   show profiles;\n   show profile [cpu] [for query query_id]; -- 耗时情况\n   ```\n\n - expain\n\n   sql语句前加上explain/desc\n\n    - select _type\n\n       - SIMPLE 简单表，不使用表连接或者子查询\n\n       - PRIMARY 主查询 外层的查询\n\n       - UNION UNION中的第二个或者后面的查询语句\n\n       - SUBQUERY SELECT / WHERE包含子查询\n\n    - **type**\n\n       ​\t连接类型由好到差NULL（不访问表）、system（系统表）、const（主键或唯一索引）、eq_ref（唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配）、ref（非唯一性的索引）、range（使用索引返回一个范围中的行，如大于小于等情况）、index（用了索引但遍历索引树）、all（全表扫描）\n\n\t - **possible_key** \n\t\n\t    显示可能应用在这张表上的索引，一个或多个\n\t\n\t - **key**\n\t\n\t    实际用到的索引，没有使用索引则为null\n\t\n\t - **key_len**\n\t\n\t    索引中使用的字节数，索引字段最大可能长度（并非实际使用长度），长度越短越好\n\t\n\t - rows\n\t\n\t    mysql认为必须要执行查询的行数（不准确的估计值）\n\t\n\t - filtered\n\t\n\t    表示返回结果行数占需读取行数的百分比，值越大越好\n\t    \n\t - extra\n\t\n\t    - using index condition; 查找使用了索引，但是需要回表查询数据\n\t    - using where;using index; 查找使用了索引，但是需要的数据都在索引列中能找到，不需要回表查询数据\n\t\n\t    ","slug":"MySQL数据库知识点梳理","published":1,"updated":"2022-07-27T17:05:21.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9z001194wa81e92bph","content":"<h1 id=\"MySQL数据库知识点梳理\"><a href=\"#MySQL数据库知识点梳理\" class=\"headerlink\" title=\"MySQL数据库知识点梳理\"></a>MySQL数据库知识点梳理</h1><h2 id=\"1-数据库基本命令\"><a href=\"#1-数据库基本命令\" class=\"headerlink\" title=\"1. 数据库基本命令\"></a>1. 数据库基本命令</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">MYSQL <span class=\"token operator\">-</span>UROOT <span class=\"token operator\">-</span>P123456 <span class=\"token comment\">-- 连接数据库</span>\n<span class=\"token keyword\">UPDATE</span> MYSQL<span class=\"token punctuation\">.</span><span class=\"token keyword\">USER</span> <span class=\"token keyword\">SET</span> AUTHENTICATION_STRING<span class=\"token operator\">=</span>PASSWORD<span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">USER</span><span class=\"token operator\">=</span><span class=\"token string\">'ROOT'</span> <span class=\"token operator\">AND</span> HOST<span class=\"token operator\">=</span><span class=\"token string\">'LOCALHOST'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改用户密码</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 刷新权限</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看所有数据库</span>\n<span class=\"token keyword\">USE</span> 数据库名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 切换数据库；</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看数据库中所有表</span>\n<span class=\"token keyword\">DESCRIBE</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 显示数据库中所有的表信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>库名<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看创建数据库语句</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>表名;<span class=\"token punctuation\">`</span></span> <span class=\"token comment\">-- 查看创建数据表语句</span>\n<span class=\"token keyword\">DESC</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>表名<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看表结构</span>\n<span class=\"token keyword\">EXIT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 退出连接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-数据库操作\"><a href=\"#2-数据库操作\" class=\"headerlink\" title=\"2. 数据库操作\"></a>2. 数据库操作</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 数据库名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 创建数据库</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 数据库名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 删除数据库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-数据库的列类型\"><a href=\"#3-数据库的列类型\" class=\"headerlink\" title=\"3. 数据库的列类型\"></a>3. 数据库的列类型</h2><ul>\n<li><p>数值</p>\n<ul>\n<li>tinyint 1字节</li>\n<li>smallint 2字节</li>\n<li>mediumint 3字节</li>\n<li><strong>int 常用标准整数 4字节</strong></li>\n<li>bigint 8字节</li>\n<li>float 浮点数 4字节</li>\n<li>double 浮点数 8字节</li>\n<li>decimal 字符串形式的浮点数 用于金融计算</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>char 固定大小0~255</li>\n<li><strong>varchar 可变字符串 0~65535</strong></li>\n<li>tinytext 微型文本 2^8-1</li>\n<li><strong>text 大文本 2^16-1</strong></li>\n</ul>\n</li>\n<li><p>时间日期</p>\n<ul>\n<li>date YYYY-MM-DD 日期格式</li>\n<li>time HH:mm:ss 时间格式</li>\n<li><strong>datetime  YYYY-MM-DD HH:mm:ss 常用时间格式</strong></li>\n<li>timestamp 时间戳</li>\n<li>year 年份表示</li>\n</ul>\n</li>\n<li><p>null</p>\n</li>\n</ul>\n<h2 id=\"4-数据库字段属性\"><a href=\"#4-数据库字段属性\" class=\"headerlink\" title=\"4. 数据库字段属性\"></a>4. 数据库字段属性</h2><ul>\n<li><p>Unsigned：</p>\n<ul>\n<li>无符号整数</li>\n<li>声明该列不能为负数</li>\n</ul>\n</li>\n<li><p>zerofill： 不足的位数0填充</p>\n</li>\n<li><p>自增： 设计唯一主键，类型必须为整数，可以自定义起始值和步长</p>\n</li>\n<li><p>非空：</p>\n<ul>\n<li>not null 不赋值会报错</li>\n<li>null 不赋值默认为null</li>\n</ul>\n</li>\n<li><p>default</p>\n</li>\n</ul>\n<h2 id=\"5-数据表操作\"><a href=\"#5-数据表操作\" class=\"headerlink\" title=\"5. 数据表操作\"></a>5. 数据表操作</h2><ol>\n<li><p>创建表</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>表名<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span>\n <span class=\"token identifier\"><span class=\"token punctuation\">`</span>字段名<span class=\"token punctuation\">`</span></span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>表类型<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>字符集<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>修改表</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">AS</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改表名 </span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> 字段名 列属性<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 表增加字段</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">MODIFY</span> 字段名 列属性<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 表修改约束</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 CHANGE 字段名 字段名 列属性<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 表字段重命名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>删除表字段</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">DROP</span> 字段名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>删除表</p>\n <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTs</span> 表名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"6-引擎\"><a href=\"#6-引擎\" class=\"headerlink\" title=\"6. 引擎\"></a>6. 引擎</h2><ul>\n<li>INNODB（默认使用）：安全性高，事务处理。多表多用户操作<ul>\n<li>支持事务</li>\n<li>支持数据行锁定</li>\n<li>支持外键约束</li>\n<li>不支持全文索引</li>\n<li>表空间大小：大</li>\n</ul>\n</li>\n<li>MYISAM（较早版本使用）：节约空间，速度较快<ul>\n<li>不支持事务</li>\n<li>不支持数据行锁定</li>\n<li>不支持外键约束</li>\n<li>支持全文索引</li>\n<li>表空间大小：小</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-DML\"><a href=\"#7-DML\" class=\"headerlink\" title=\"7. DML\"></a>7. DML</h2><ul>\n<li><p>插入</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>修改</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 字段<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">TRUNCATE</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 清空表数据，重置自增列，不影响事务</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>查询    </p>\n  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ALL</span><span class=\"token operator\">|</span><span class=\"token keyword\">DISTINCT</span><span class=\"token operator\">|</span><span class=\"token keyword\">DISTINCTROW</span><span class=\"token operator\">|</span><span class=\"token keyword\">TOP</span><span class=\"token punctuation\">]</span>\n&#123;<span class=\"token operator\">*</span><span class=\"token operator\">|</span>talbe<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>field1<span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> alias1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>field2<span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> alias2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>…<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>&#125;\n<span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> 别名<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">LEFT</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">RIGHT</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">join</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">on</span> …<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span>…<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>…<span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 通过哪个字段分组</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">HAVING</span>…<span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 过滤分组的记录必须满足的次要条件</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 字段名 <span class=\"token keyword\">ASC</span><span class=\"token operator\">|</span><span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">LIMIT</span> 查询起始下标<span class=\"token punctuation\">,</span>数量<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@auto_increment_increment</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询自增步长</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"8-七种JOIN\"><a href=\"#8-七种JOIN\" class=\"headerlink\" title=\"8. 七种JOIN\"></a>8. 七种JOIN</h2><img src=\"/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/qizhongjon.png\" class=\"\">\n\n\n\n<h2 id=\"9-MYSQL常用函数\"><a href=\"#9-MYSQL常用函数\" class=\"headerlink\" title=\"9. MYSQL常用函数\"></a>9. MYSQL常用函数</h2><ul>\n<li>数学运算函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ABS<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 8，绝对值</span>\nCEILING<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 10，向上取整</span>\nFLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 9，向下取整</span>\nRAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回0-1的随机数</span>\nSIGN<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回一个数的符号，正数1，负数-1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>字符串函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CHAR_LENGTH<span class=\"token punctuation\">(</span><span class=\"token string\">'字符串长度'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回字符串长度</span>\nCONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'拼接'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'多个'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'字符串'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 拼接字符串</span>\n<span class=\"token keyword\">INSERT</span><span class=\"token punctuation\">(</span>源字符串<span class=\"token punctuation\">,</span>位置<span class=\"token punctuation\">,</span>长度<span class=\"token punctuation\">,</span>插入字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 查找位置替换对应长度的字符串</span>\nLOWER<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 转小写</span>\nUPPER<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 转大写</span>\nINSTR<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">,</span>子串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回第一次出现的子串的位置</span>\n<span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">,</span>被替换<span class=\"token punctuation\">,</span>需替换<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 替换指定字符串</span>\nSUBSTR<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">,</span>截取起始位置<span class=\"token punctuation\">,</span>长度<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 截取指定位置和长度的字符串</span>\nREVERSE<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 反转</span>\nMD5<span class=\"token punctuation\">(</span>明文<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- MD5 加密</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>时间和日期函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CURRENT_DATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取当前日期</span>\nCURDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取当前日期</span>\n<span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取当前时间，时分秒</span>\nLOCALTIME <span class=\"token comment\">-- 获取本地时间，时分秒</span>\nSYSDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 系统时间</span>\n<span class=\"token keyword\">YEAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">MONTH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">DAY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">HOUR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">MINUTE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>系统函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SYSTEM_USER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">USER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nVERSION<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>聚合函数</li>\n</ul>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">COUNT() -- 统计数量，count(字段)忽略null，count(*),count(1)不会忽略null\nSUM() -- 求和\nAVG() -- 求平均\nMAX() -- 求最大\nMIN() -- 求最小<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"10-事务\"><a href=\"#10-事务\" class=\"headerlink\" title=\"10. 事务\"></a>10. 事务</h2><p>将一组SQL放在一个批次中去执行</p>\n<ol>\n<li><p>事务原则：ACID原则</p>\n<ul>\n<li><p>原子性：一起成功或一起失败</p>\n</li>\n<li><p>一致性：操作前后数据完整性最终一致</p>\n</li>\n<li><p>隔离性：多个用户同时操作，排除其他事务对本次事务的影响</p>\n</li>\n<li><p>持久性：事务结束后的数据不随外界原因导致丢失，事务未提交恢复原状，事务提交后持久化到数据库，一旦提交就不可逆</p>\n</li>\n</ul>\n</li>\n<li><p>事务的隔离级别</p>\n<ul>\n<li>脏读：一个事务读取到另一个事务未提交的数据</li>\n<li>不可重复度：在一个事务内读取表中的某一行数据，多次读取结果不同</li>\n<li>虚读（幻读）：在一个事务内读取到了别的事务插入的数据，导致前后读取不一致（比如多了一条）</li>\n</ul>\n</li>\n<li><p>手动处理事务</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> 关闭事务自动提交\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 标记一个事务开始</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提交</span>\n<span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 回滚</span>\n<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 开启事务自动提交\n<span class=\"token keyword\">SAVEPOINT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 保存点</span>\n<span class=\"token keyword\">ROLLBACK</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">SAVEPOINT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 回滚到保存点</span>\n<span class=\"token keyword\">RELEASE</span>  <span class=\"token keyword\">SAVEPOINT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 撤销保存点</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"11-索引\"><a href=\"#11-索引\" class=\"headerlink\" title=\"11. 索引\"></a>11. 索引</h2><p>索引（index）是帮助MYSQL高效获取数据的数据结构。</p>\n<ol>\n<li><p>索引的分类</p>\n<ul>\n<li>主键索引（PRIMARY KEY）唯一标识，不可重复，只能有一个列作为主键</li>\n<li>唯一索引（UNIQUE KEY）避免重复的列出现，多个列都可以标识</li>\n<li>常规索引（KEY/INDEX）默认的</li>\n<li>全文索引（FULLTEXT）快速定位数据，在特定数据库引擎下才有</li>\n</ul>\n</li>\n<li><p>索引的使用</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 显示所有索引信息</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> 索引类型 <span class=\"token keyword\">index</span> 索引名<span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 添加索引</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> 索引名 <span class=\"token keyword\">on</span> 表名<span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 添加索引</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">use</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提示SQL使用索引</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">ignore</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提示SQL忽略使用索引</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">force</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提示SQL必须使用索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>索引原则</p>\n<ul>\n<li>索引不是越多越好</li>\n<li>不要对进程变动数据加索引</li>\n<li>小数据量表不需要加索引</li>\n<li>索引一般加在常用来查询的字段上</li>\n<li>覆盖索引：查询使用了索引，并且需要返回的列在该索引中全部能找到，减少select *</li>\n</ul>\n</li>\n<li><p>索引失效情况</p>\n<ul>\n<li>最左前缀原则：如果索引了多列（联合索引），查询从最左列开始，并且不跳过索引中的列。如果跳过某一列，索引将部分失效（后面的字段索引失效）。</li>\n<li>联合索引中，出现范围查询（大于小于），范围查询右侧的列索引失效。业务允许的情况下使用大于等于、小于等于。</li>\n<li>不要在索引列上进行运算，索引将失效。</li>\n<li>字符串类型不加单引号，索引失效。</li>\n<li>头部模糊匹配（%_），索引失效。尾部模糊匹配，索引不失效。</li>\n<li>or分隔的条件，如果or两侧的条件有一侧无索引，则涉及的索引都不会被用到。</li>\n<li>如果MySQL评估使用索引比全表扫描更慢，则不使用索引。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"12-用户管理\"><a href=\"#12-用户管理\" class=\"headerlink\" title=\"12. 用户管理\"></a>12. 用户管理</h2><p>用户表：mysql.user</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> 用户名 IDENTIFIED <span class=\"token keyword\">BY</span> 密码<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 创建用户</span>\n<span class=\"token keyword\">SET</span> PASSWORD <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span>密码<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改当前用户密码</span>\n<span class=\"token keyword\">SET</span> PASSWORD <span class=\"token keyword\">FOR</span> 用户名 <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span>密码<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改指定用户密码</span>\n<span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">USER</span> 用户名 <span class=\"token keyword\">TO</span> 新用户名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 重命名</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> 库<span class=\"token punctuation\">.</span>表 <span class=\"token keyword\">TO</span> 用户<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 用户授权所有权限</span>\n<span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> 用户<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询权限</span>\n<span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> root<span class=\"token variable\">@localhost</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询权限</span>\n<span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> 库<span class=\"token punctuation\">.</span>表 <span class=\"token keyword\">FROM</span> 用户<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 撤销权限</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> 用户名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 删除用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>命令行导出数据库：mysqldump -h主机名 -uroot -p密码 库名 表名1 表名2  &gt; 磁盘名/文件名</p>\n<p>命令行导入数据库：source 磁盘名/文件名</p>\n<h2 id=\"13-三大范式\"><a href=\"#13-三大范式\" class=\"headerlink\" title=\"13. 三大范式\"></a>13. 三大范式</h2><ul>\n<li>第一范式（1NF）：数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：（满足第一范式）数据库表中的每一列都和主键相关，而不是只与主键的某一列相关</li>\n<li>第三范式（3NF）：（满足第一范式和第二范式）数据库表的每一列都与主键直接相关，而不是间接相关</li>\n</ul>\n<h2 id=\"14-JDBC\"><a href=\"#14-JDBC\" class=\"headerlink\" title=\"14. JDBC\"></a>14. JDBC</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>db</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> DBUTIL <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/database\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// JDBC 的三要素文件，加载驱动，获取连接，</span>\n\t\t<span class=\"token comment\">//1. 加载驱动程序</span>\n\t\t<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//2. 获取数据库的连接 Connection 数据库连接对象</span>\n\t\t<span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span>USERNAME<span class=\"token punctuation\">,</span>PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//3. 通过数据库的连接操作数据库，实现增删改查，Statement SQL执行对象</span>\n\t\t<span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//4. 返回 ResultSet 对象，编写 sql 语句，实现最简单的增删改查</span>\n\t\t<span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select username,password from user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//打印数据</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//返回字符串</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//5. 释放连接</span>\n        resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>thb<span class=\"token punctuation\">.</span>study3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>thb<span class=\"token punctuation\">.</span>study2<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Utils<span class=\"token punctuation\">.</span>JdbcUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test03</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 预执行</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭自动提交，开启事务</span>\n            <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money-100 where `name`='A'\"</span><span class=\"token punctuation\">;</span>\n            preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money+100 where `name`='B'\"</span><span class=\"token punctuation\">;</span>\n            preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//默认失败会回滚</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span>preparedStatement<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"15-视图\"><a href=\"#15-视图\" class=\"headerlink\" title=\"15. 视图\"></a>15. 视图</h2><p>虚拟存在的表，数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。只保留sql的查询逻辑，不保存查询结果。</p>\n<p>作用：1. 简化用户对数据的理解，也简化用户的操作。2. 设定视图用户的操作权限。3. 屏蔽真实表结构变化带来的影响</p>\n<ul>\n<li><p>创建</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CERATE <span class=\"token keyword\">VIEW</span> 视图名 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句  <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- CASCADED 检查依赖的视图，LOCAL不检查依赖的视图</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>查询</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> 视图名<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 视图名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>修改</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CERATE <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> 视图名 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句  <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 方式一</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">VIEW</span> 视图名 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 方式二</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 视图名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"16-存储过程\"><a href=\"#16-存储过程\" class=\"headerlink\" title=\"16. 存储过程\"></a>16. 存储过程</h2><p>数据库sql语言层面的代码封装和重用。</p>\n<ul>\n<li><p>创建</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELIMITER</span> $$ <span class=\"token comment\">-- 定义结束符</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">IN</span><span class=\"token operator\">|</span><span class=\"token keyword\">OUT</span><span class=\"token operator\">|</span><span class=\"token keyword\">INOUT</span> 参数名 参数类型<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n\t<span class=\"token comment\">-- SQL语句</span>\n<span class=\"token keyword\">END</span>$$\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 重置结束符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>调用</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CALL</span> 名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>查看</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> INFORMATION_SCHEMA_ROUTINES <span class=\"token keyword\">WHERE</span> ROUTINE_SCHEMA <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 查询指定数据库的存储过程及状态信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 查询存储过程的定义</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 存储过程名称<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>变量</p>\n<ul>\n<li><p>系统变量</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> VARIABLES<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看所有系统变量</span>\n<span class=\"token keyword\">SELECT</span> @@<span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看指定变量的值</span>\n<span class=\"token keyword\">SET</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 设置系统变量</span>\n<span class=\"token keyword\">SET</span> @@<span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 设置系统变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>自定义变量</p>\n<p>作用域：当前连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> <span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@var_name</span>  :<span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@var_name</span>  :<span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@var_name</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@var_name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>局部变量</p>\n<p>作用域：BEGIN … END块;</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> 变量名 变量类型<span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 声明</span>\n<span class=\"token keyword\">SET</span> 变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SET</span> 变量名 :<span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">INTO</span> 变量名 <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 判断</span>\n<span class=\"token comment\">-- if</span>\n<span class=\"token keyword\">IF</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">ELSEIF</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span>\n<span class=\"token keyword\">ELSE</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- case</span>\n<span class=\"token keyword\">CASE</span> case_value\n\t<span class=\"token keyword\">WHEN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">THEN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">ELSE</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">CASE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 循环</span>\n<span class=\"token comment\">-- while</span>\n<span class=\"token keyword\">WHILE</span> 条件 <span class=\"token keyword\">DO</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">sql</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- repeat</span>\n<span class=\"token keyword\">REPEAT</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">sql</span>\n\tUNTIL 条件\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- loop</span>\n<span class=\"token punctuation\">[</span>begin_label:<span class=\"token punctuation\">]</span><span class=\"token keyword\">LOOP</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span> <span class=\"token punctuation\">[</span>end_label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 游标</span>\n<span class=\"token keyword\">DECLARE</span> 游标名称 <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span> 查询语句<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 声明游标</span>\n<span class=\"token keyword\">OPEN</span> 游标名称<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 打开游标</span>\n<span class=\"token keyword\">FETCH</span> 游标名称 <span class=\"token keyword\">INTO</span> 变量<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>变量<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 获取游标记录</span>\n\n<span class=\"token comment\">-- handler</span>\n<span class=\"token keyword\">DECLARE</span> handler_action <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> condition_value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>condition_value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> statement<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">-- handler_action</span>\n\t<span class=\"token keyword\">CONTINUE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 继续执行程序</span>\n\t<span class=\"token keyword\">EXIT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 终止程序</span>\n<span class=\"token comment\">-- condition_value</span>\n\tSQLSTATE sqlstate_value<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 状态码</span>\n\tSQLWARNING<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 所有以01开头的SQLSTATE代码的缩写</span>\n\t<span class=\"token operator\">NOT</span> FOUND<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 所有以02开头的SQLSTATE代码的缩写</span>\n\tSQLEXCEPTION<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 所有没被SQLWARNING和NOT FOUND捕获</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>存储函数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> 存储函数名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数列表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">TYPE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">DETERMINISTIC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span> <span class=\"token keyword\">SQL</span> <span class=\"token operator\">|</span><span class=\"token keyword\">READS</span> <span class=\"token keyword\">SQL</span> <span class=\"token keyword\">DATA</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">BEGIN</span> \n\t<span class=\"token comment\">-- SQL语句</span>\n\t<span class=\"token keyword\">RETURN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"17-触发器\"><a href=\"#17-触发器\" class=\"headerlink\" title=\"17. 触发器\"></a>17. 触发器</h2><p>触发器是指与表有关的数据库对象，指在insert/update/delete之前或者之后，触发并执行触发器中定义的SQL集合。OLD，NEW指发生变化的记录内容</p>\n<ul>\n<li><p>创建</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> trigger_name\nBEFORE<span class=\"token operator\">|</span><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">INSERT</span><span class=\"token operator\">|</span><span class=\"token keyword\">UPDATE</span><span class=\"token operator\">|</span><span class=\"token keyword\">DELETE</span>\n<span class=\"token keyword\">ON</span> tb_name <span class=\"token keyword\">FOR EACH ROW</span> <span class=\"token comment\">-- 行级触发器</span>\n<span class=\"token keyword\">BEGIN</span>\n\ttrigger_stmt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>查看</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> TRIGGERS<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token punctuation\">[</span>schema_name<span class=\"token punctuation\">]</span> trigger_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 如果没有指定schema_name，默认当前数据库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"18-锁\"><a href=\"#18-锁\" class=\"headerlink\" title=\"18. 锁\"></a>18. 锁</h2><p>计算机协调多个进程或线程并发访问某一资源的机制。</p>\n<ul>\n<li><p>全局锁</p>\n<p>对整个数据库实例加锁，加锁后处于只读状态。后续写操作将被阻塞。</p>\n<p>使用场景：做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据完整性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fush tables with read lock; -- 加全局锁\nunlock tables; -- 释放锁<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>表级锁</p>\n<p>每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。</p>\n<ul>\n<li><p>表锁</p>\n<p>加锁：lock tables 表名… read/write</p>\n<p>释放锁：unlock tables / 客户端连接关闭</p>\n<ul>\n<li><p>表共享读锁（read lock）：阻塞写，不阻塞其他客户端的读</p>\n</li>\n<li><p>表独占写锁（write lock）：阻塞其他客户端的读写，不阻塞自己的读写</p>\n</li>\n</ul>\n</li>\n<li><p>元数据锁（meta data lock）</p>\n<p>系统自动控制，无需显式使用。访问表时会自动加上，维护表元数据的数据一致性。在表上有未提交的事务时，不可以对元数据进行写入操作。避免了DML和DDL的冲突，保证读写的正确性。</p>\n<p>增删改查时，加MDL读锁（共享），表结构变更时，加MDL写锁（排他）。</p>\n</li>\n<li><p>意向锁</p>\n<p>使用场景：加表锁时需要检查每一行的行锁，为解决效率低的问题，使用意向锁减少检查。</p>\n<ul>\n<li><p>意向共享锁（IS）</p>\n<p>与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。</p>\n</li>\n<li><p>意向排他锁（IX）</p>\n<p>与表锁共享锁（read）及表锁排他锁（write）都互斥，意向锁之间不互斥</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>行级锁</p>\n<p>每次操作锁住对应表。锁定粒度小，发生锁冲突的概率最低，并发度最高。</p>\n<p>通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</p>\n<ul>\n<li><p>行锁（record lock）</p>\n<p>锁定单个记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</p>\n<ul>\n<li><p>共享锁（S）：</p>\n<p>允许一个事物去读一行，阻止其他事务获得相同数据集的排他锁。</p>\n</li>\n<li><p>排他锁（X）：</p>\n<p>允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</p>\n</li>\n</ul>\n</li>\n<li><p>间隙锁（gap lock）</p>\n<p>锁定索引记录间隙（不含记录），确保索引记录间隙不变，防止其他事务insert产生幻读。在RR隔离级别下支持</p>\n</li>\n<li><p>临键锁（next-key-lock）</p>\n<p>行锁和间隙锁的组合。在RR隔离级别下支持</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"19-SQL性能分析\"><a href=\"#19-SQL性能分析\" class=\"headerlink\" title=\"19. SQL性能分析\"></a>19. SQL性能分析</h2><ul>\n<li><p>SQL执行频率</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">GLOBAL</span> <span class=\"token keyword\">STATUS</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'Com_______)'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>开启慢查询日志</p>\n</li>\n</ul>\n<p>​        /etc/my.cnf配置 ，配置完重启mysql</p>\n<p>​        slow_query_log = 1 # 设置开启MYSQL慢查询日志</p>\n<p>​        long_query_time = 2 # 设置SQL执行时间</p>\n<ul>\n<li><p>profile耗时详情</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> profiles<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> profile <span class=\"token punctuation\">[</span>cpu<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> query query_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 耗时情况</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>expain</p>\n<p>sql语句前加上explain/desc</p>\n<ul>\n<li><p>select _type</p>\n<ul>\n<li><p>SIMPLE 简单表，不使用表连接或者子查询</p>\n</li>\n<li><p>PRIMARY 主查询 外层的查询</p>\n</li>\n<li><p>UNION UNION中的第二个或者后面的查询语句</p>\n</li>\n<li><p>SUBQUERY SELECT / WHERE包含子查询</p>\n</li>\n</ul>\n</li>\n<li><p><strong>type</strong></p>\n<p> ​    连接类型由好到差NULL（不访问表）、system（系统表）、const（主键或唯一索引）、eq_ref（唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配）、ref（非唯一性的索引）、range（使用索引返回一个范围中的行，如大于小于等情况）、index（用了索引但遍历索引树）、all（全表扫描）</p>\n</li>\n<li><p><strong>possible_key</strong> </p>\n<p> 显示可能应用在这张表上的索引，一个或多个</p>\n</li>\n<li><p><strong>key</strong></p>\n<p> 实际用到的索引，没有使用索引则为null</p>\n</li>\n<li><p><strong>key_len</strong></p>\n<p> 索引中使用的字节数，索引字段最大可能长度（并非实际使用长度），长度越短越好</p>\n</li>\n<li><p>rows</p>\n<p> mysql认为必须要执行查询的行数（不准确的估计值）</p>\n</li>\n<li><p>filtered</p>\n<p> 表示返回结果行数占需读取行数的百分比，值越大越好</p>\n</li>\n<li><p>extra</p>\n<ul>\n<li>using index condition; 查找使用了索引，但是需要回表查询数据</li>\n<li>using where;using index; 查找使用了索引，但是需要的数据都在索引列中能找到，不需要回表查询数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MySQL数据库知识点梳理\"><a href=\"#MySQL数据库知识点梳理\" class=\"headerlink\" title=\"MySQL数据库知识点梳理\"></a>MySQL数据库知识点梳理</h1><h2 id=\"1-数据库基本命令\"><a href=\"#1-数据库基本命令\" class=\"headerlink\" title=\"1. 数据库基本命令\"></a>1. 数据库基本命令</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">MYSQL <span class=\"token operator\">-</span>UROOT <span class=\"token operator\">-</span>P123456 <span class=\"token comment\">-- 连接数据库</span>\n<span class=\"token keyword\">UPDATE</span> MYSQL<span class=\"token punctuation\">.</span><span class=\"token keyword\">USER</span> <span class=\"token keyword\">SET</span> AUTHENTICATION_STRING<span class=\"token operator\">=</span>PASSWORD<span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">USER</span><span class=\"token operator\">=</span><span class=\"token string\">'ROOT'</span> <span class=\"token operator\">AND</span> HOST<span class=\"token operator\">=</span><span class=\"token string\">'LOCALHOST'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改用户密码</span>\nFLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 刷新权限</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看所有数据库</span>\n<span class=\"token keyword\">USE</span> 数据库名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 切换数据库；</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看数据库中所有表</span>\n<span class=\"token keyword\">DESCRIBE</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 显示数据库中所有的表信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>库名<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看创建数据库语句</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>表名;<span class=\"token punctuation\">`</span></span> <span class=\"token comment\">-- 查看创建数据表语句</span>\n<span class=\"token keyword\">DESC</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>表名<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看表结构</span>\n<span class=\"token keyword\">EXIT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 退出连接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-数据库操作\"><a href=\"#2-数据库操作\" class=\"headerlink\" title=\"2. 数据库操作\"></a>2. 数据库操作</h2><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 数据库名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 创建数据库</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 数据库名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 删除数据库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"3-数据库的列类型\"><a href=\"#3-数据库的列类型\" class=\"headerlink\" title=\"3. 数据库的列类型\"></a>3. 数据库的列类型</h2><ul>\n<li><p>数值</p>\n<ul>\n<li>tinyint 1字节</li>\n<li>smallint 2字节</li>\n<li>mediumint 3字节</li>\n<li><strong>int 常用标准整数 4字节</strong></li>\n<li>bigint 8字节</li>\n<li>float 浮点数 4字节</li>\n<li>double 浮点数 8字节</li>\n<li>decimal 字符串形式的浮点数 用于金融计算</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>char 固定大小0~255</li>\n<li><strong>varchar 可变字符串 0~65535</strong></li>\n<li>tinytext 微型文本 2^8-1</li>\n<li><strong>text 大文本 2^16-1</strong></li>\n</ul>\n</li>\n<li><p>时间日期</p>\n<ul>\n<li>date YYYY-MM-DD 日期格式</li>\n<li>time HH:mm:ss 时间格式</li>\n<li><strong>datetime  YYYY-MM-DD HH:mm:ss 常用时间格式</strong></li>\n<li>timestamp 时间戳</li>\n<li>year 年份表示</li>\n</ul>\n</li>\n<li><p>null</p>\n</li>\n</ul>\n<h2 id=\"4-数据库字段属性\"><a href=\"#4-数据库字段属性\" class=\"headerlink\" title=\"4. 数据库字段属性\"></a>4. 数据库字段属性</h2><ul>\n<li><p>Unsigned：</p>\n<ul>\n<li>无符号整数</li>\n<li>声明该列不能为负数</li>\n</ul>\n</li>\n<li><p>zerofill： 不足的位数0填充</p>\n</li>\n<li><p>自增： 设计唯一主键，类型必须为整数，可以自定义起始值和步长</p>\n</li>\n<li><p>非空：</p>\n<ul>\n<li>not null 不赋值会报错</li>\n<li>null 不赋值默认为null</li>\n</ul>\n</li>\n<li><p>default</p>\n</li>\n</ul>\n<h2 id=\"5-数据表操作\"><a href=\"#5-数据表操作\" class=\"headerlink\" title=\"5. 数据表操作\"></a>5. 数据表操作</h2><ol>\n<li><p>创建表</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>表名<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span>\n <span class=\"token identifier\"><span class=\"token punctuation\">`</span>字段名<span class=\"token punctuation\">`</span></span> 列类型 <span class=\"token punctuation\">[</span>属性<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>表类型<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>字符集<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>注释<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>修改表</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">AS</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改表名 </span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> 字段名 列属性<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 表增加字段</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">MODIFY</span> 字段名 列属性<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 表修改约束</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 CHANGE 字段名 字段名 列属性<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 表字段重命名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>删除表字段</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">DROP</span> 字段名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>删除表</p>\n <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTs</span> 表名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"6-引擎\"><a href=\"#6-引擎\" class=\"headerlink\" title=\"6. 引擎\"></a>6. 引擎</h2><ul>\n<li>INNODB（默认使用）：安全性高，事务处理。多表多用户操作<ul>\n<li>支持事务</li>\n<li>支持数据行锁定</li>\n<li>支持外键约束</li>\n<li>不支持全文索引</li>\n<li>表空间大小：大</li>\n</ul>\n</li>\n<li>MYISAM（较早版本使用）：节约空间，速度较快<ul>\n<li>不支持事务</li>\n<li>不支持数据行锁定</li>\n<li>不支持外键约束</li>\n<li>支持全文索引</li>\n<li>表空间大小：小</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-DML\"><a href=\"#7-DML\" class=\"headerlink\" title=\"7. DML\"></a>7. DML</h2><ul>\n<li><p>插入</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>修改</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 字段<span class=\"token number\">1</span> <span class=\"token operator\">=</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span> <span class=\"token operator\">=</span> 值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">TRUNCATE</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 清空表数据，重置自增列，不影响事务</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>查询    </p>\n  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">ALL</span><span class=\"token operator\">|</span><span class=\"token keyword\">DISTINCT</span><span class=\"token operator\">|</span><span class=\"token keyword\">DISTINCTROW</span><span class=\"token operator\">|</span><span class=\"token keyword\">TOP</span><span class=\"token punctuation\">]</span>\n&#123;<span class=\"token operator\">*</span><span class=\"token operator\">|</span>talbe<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>field1<span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> alias1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>field2<span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> alias2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>…<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>&#125;\n<span class=\"token keyword\">FROM</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span> 别名<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">LEFT</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">RIGHT</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">join</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">on</span> …<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span>…<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span>…<span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 通过哪个字段分组</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">HAVING</span>…<span class=\"token punctuation\">]</span> <span class=\"token comment\">-- 过滤分组的记录必须满足的次要条件</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 字段名 <span class=\"token keyword\">ASC</span><span class=\"token operator\">|</span><span class=\"token keyword\">DESC</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">LIMIT</span> 查询起始下标<span class=\"token punctuation\">,</span>数量<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n  <pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> @<span class=\"token variable\">@auto_increment_increment</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询自增步长</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"8-七种JOIN\"><a href=\"#8-七种JOIN\" class=\"headerlink\" title=\"8. 七种JOIN\"></a>8. 七种JOIN</h2><img src=\"/2021/04/28/mysql-shu-ju-ku-zhi-shi-dian-shu-li/qizhongjon.png\" class=\"\">\n\n\n\n<h2 id=\"9-MYSQL常用函数\"><a href=\"#9-MYSQL常用函数\" class=\"headerlink\" title=\"9. MYSQL常用函数\"></a>9. MYSQL常用函数</h2><ul>\n<li>数学运算函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">ABS<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 8，绝对值</span>\nCEILING<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 10，向上取整</span>\nFLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">9.4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 9，向下取整</span>\nRAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回0-1的随机数</span>\nSIGN<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回一个数的符号，正数1，负数-1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>字符串函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CHAR_LENGTH<span class=\"token punctuation\">(</span><span class=\"token string\">'字符串长度'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回字符串长度</span>\nCONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">'拼接'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'多个'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'字符串'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 拼接字符串</span>\n<span class=\"token keyword\">INSERT</span><span class=\"token punctuation\">(</span>源字符串<span class=\"token punctuation\">,</span>位置<span class=\"token punctuation\">,</span>长度<span class=\"token punctuation\">,</span>插入字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 查找位置替换对应长度的字符串</span>\nLOWER<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 转小写</span>\nUPPER<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 转大写</span>\nINSTR<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">,</span>子串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 返回第一次出现的子串的位置</span>\n<span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">,</span>被替换<span class=\"token punctuation\">,</span>需替换<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 替换指定字符串</span>\nSUBSTR<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">,</span>截取起始位置<span class=\"token punctuation\">,</span>长度<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 截取指定位置和长度的字符串</span>\nREVERSE<span class=\"token punctuation\">(</span>字符串<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 反转</span>\nMD5<span class=\"token punctuation\">(</span>明文<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- MD5 加密</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>时间和日期函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CURRENT_DATE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取当前日期</span>\nCURDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取当前日期</span>\n<span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取当前时间，时分秒</span>\nLOCALTIME <span class=\"token comment\">-- 获取本地时间，时分秒</span>\nSYSDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 系统时间</span>\n<span class=\"token keyword\">YEAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">MONTH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">DAY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">HOUR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">MINUTE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SECOND</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>系统函数<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SYSTEM_USER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">USER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nVERSION<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 获取版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>聚合函数</li>\n</ul>\n<pre class=\"line-numbers language-SQL\" data-language=\"SQL\"><code class=\"language-SQL\">COUNT() -- 统计数量，count(字段)忽略null，count(*),count(1)不会忽略null\nSUM() -- 求和\nAVG() -- 求平均\nMAX() -- 求最大\nMIN() -- 求最小<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"10-事务\"><a href=\"#10-事务\" class=\"headerlink\" title=\"10. 事务\"></a>10. 事务</h2><p>将一组SQL放在一个批次中去执行</p>\n<ol>\n<li><p>事务原则：ACID原则</p>\n<ul>\n<li><p>原子性：一起成功或一起失败</p>\n</li>\n<li><p>一致性：操作前后数据完整性最终一致</p>\n</li>\n<li><p>隔离性：多个用户同时操作，排除其他事务对本次事务的影响</p>\n</li>\n<li><p>持久性：事务结束后的数据不随外界原因导致丢失，事务未提交恢复原状，事务提交后持久化到数据库，一旦提交就不可逆</p>\n</li>\n</ul>\n</li>\n<li><p>事务的隔离级别</p>\n<ul>\n<li>脏读：一个事务读取到另一个事务未提交的数据</li>\n<li>不可重复度：在一个事务内读取表中的某一行数据，多次读取结果不同</li>\n<li>虚读（幻读）：在一个事务内读取到了别的事务插入的数据，导致前后读取不一致（比如多了一条）</li>\n</ul>\n</li>\n<li><p>手动处理事务</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> 关闭事务自动提交\n<span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 标记一个事务开始</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提交</span>\n<span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 回滚</span>\n<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> 开启事务自动提交\n<span class=\"token keyword\">SAVEPOINT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 保存点</span>\n<span class=\"token keyword\">ROLLBACK</span> <span class=\"token keyword\">TO</span> <span class=\"token keyword\">SAVEPOINT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 回滚到保存点</span>\n<span class=\"token keyword\">RELEASE</span>  <span class=\"token keyword\">SAVEPOINT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 撤销保存点</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"11-索引\"><a href=\"#11-索引\" class=\"headerlink\" title=\"11. 索引\"></a>11. 索引</h2><p>索引（index）是帮助MYSQL高效获取数据的数据结构。</p>\n<ol>\n<li><p>索引的分类</p>\n<ul>\n<li>主键索引（PRIMARY KEY）唯一标识，不可重复，只能有一个列作为主键</li>\n<li>唯一索引（UNIQUE KEY）避免重复的列出现，多个列都可以标识</li>\n<li>常规索引（KEY/INDEX）默认的</li>\n<li>全文索引（FULLTEXT）快速定位数据，在特定数据库引擎下才有</li>\n</ul>\n</li>\n<li><p>索引的使用</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">INDEX</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 显示所有索引信息</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> 索引类型 <span class=\"token keyword\">index</span> 索引名<span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 添加索引</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> 索引名 <span class=\"token keyword\">on</span> 表名<span class=\"token punctuation\">(</span>字段名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 添加索引</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">use</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提示SQL使用索引</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">ignore</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提示SQL忽略使用索引</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token keyword\">force</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">(</span>索引名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">WHERE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 提示SQL必须使用索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>索引原则</p>\n<ul>\n<li>索引不是越多越好</li>\n<li>不要对进程变动数据加索引</li>\n<li>小数据量表不需要加索引</li>\n<li>索引一般加在常用来查询的字段上</li>\n<li>覆盖索引：查询使用了索引，并且需要返回的列在该索引中全部能找到，减少select *</li>\n</ul>\n</li>\n<li><p>索引失效情况</p>\n<ul>\n<li>最左前缀原则：如果索引了多列（联合索引），查询从最左列开始，并且不跳过索引中的列。如果跳过某一列，索引将部分失效（后面的字段索引失效）。</li>\n<li>联合索引中，出现范围查询（大于小于），范围查询右侧的列索引失效。业务允许的情况下使用大于等于、小于等于。</li>\n<li>不要在索引列上进行运算，索引将失效。</li>\n<li>字符串类型不加单引号，索引失效。</li>\n<li>头部模糊匹配（%_），索引失效。尾部模糊匹配，索引不失效。</li>\n<li>or分隔的条件，如果or两侧的条件有一侧无索引，则涉及的索引都不会被用到。</li>\n<li>如果MySQL评估使用索引比全表扫描更慢，则不使用索引。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"12-用户管理\"><a href=\"#12-用户管理\" class=\"headerlink\" title=\"12. 用户管理\"></a>12. 用户管理</h2><p>用户表：mysql.user</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> 用户名 IDENTIFIED <span class=\"token keyword\">BY</span> 密码<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 创建用户</span>\n<span class=\"token keyword\">SET</span> PASSWORD <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span>密码<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改当前用户密码</span>\n<span class=\"token keyword\">SET</span> PASSWORD <span class=\"token keyword\">FOR</span> 用户名 <span class=\"token operator\">=</span> PASSWORD<span class=\"token punctuation\">(</span>密码<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 修改指定用户密码</span>\n<span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">USER</span> 用户名 <span class=\"token keyword\">TO</span> 新用户名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 重命名</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> 库<span class=\"token punctuation\">.</span>表 <span class=\"token keyword\">TO</span> 用户<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 用户授权所有权限</span>\n<span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> 用户<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询权限</span>\n<span class=\"token keyword\">SHOW</span> GRANTS <span class=\"token keyword\">FOR</span> root<span class=\"token variable\">@localhost</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查询权限</span>\n<span class=\"token keyword\">REVOKE</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> 库<span class=\"token punctuation\">.</span>表 <span class=\"token keyword\">FROM</span> 用户<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 撤销权限</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> 用户名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 删除用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>命令行导出数据库：mysqldump -h主机名 -uroot -p密码 库名 表名1 表名2  &gt; 磁盘名/文件名</p>\n<p>命令行导入数据库：source 磁盘名/文件名</p>\n<h2 id=\"13-三大范式\"><a href=\"#13-三大范式\" class=\"headerlink\" title=\"13. 三大范式\"></a>13. 三大范式</h2><ul>\n<li>第一范式（1NF）：数据库表的每一列都是不可分割的原子数据项</li>\n<li>第二范式（2NF）：（满足第一范式）数据库表中的每一列都和主键相关，而不是只与主键的某一列相关</li>\n<li>第三范式（3NF）：（满足第一范式和第二范式）数据库表的每一列都与主键直接相关，而不是间接相关</li>\n</ul>\n<h2 id=\"14-JDBC\"><a href=\"#14-JDBC\" class=\"headerlink\" title=\"14. JDBC\"></a>14. JDBC</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span>db</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mysql<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> DBUTIL <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">private</span>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/database\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USERNAME <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">// JDBC 的三要素文件，加载驱动，获取连接，</span>\n\t\t<span class=\"token comment\">//1. 加载驱动程序</span>\n\t\t<span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//2. 获取数据库的连接 Connection 数据库连接对象</span>\n\t\t<span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span>USERNAME<span class=\"token punctuation\">,</span>PASSWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//3. 通过数据库的连接操作数据库，实现增删改查，Statement SQL执行对象</span>\n\t\t<span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//4. 返回 ResultSet 对象，编写 sql 语句，实现最简单的增删改查</span>\n\t\t<span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select username,password from user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//打印数据</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//返回字符串</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//5. 释放连接</span>\n        resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        statement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>thb<span class=\"token punctuation\">.</span>study3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>thb<span class=\"token punctuation\">.</span>study2<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Utils<span class=\"token punctuation\">.</span>JdbcUtils</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test03</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 预执行</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭自动提交，开启事务</span>\n            <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money-100 where `name`='A'\"</span><span class=\"token punctuation\">;</span>\n            preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> sql2 <span class=\"token operator\">=</span> <span class=\"token string\">\"update account set money=money+100 where `name`='B'\"</span><span class=\"token punctuation\">;</span>\n            preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//默认失败会回滚</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">JdbcUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span>preparedStatement<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"15-视图\"><a href=\"#15-视图\" class=\"headerlink\" title=\"15. 视图\"></a>15. 视图</h2><p>虚拟存在的表，数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。只保留sql的查询逻辑，不保存查询结果。</p>\n<p>作用：1. 简化用户对数据的理解，也简化用户的操作。2. 设定视图用户的操作权限。3. 屏蔽真实表结构变化带来的影响</p>\n<ul>\n<li><p>创建</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CERATE <span class=\"token keyword\">VIEW</span> 视图名 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句  <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- CASCADED 检查依赖的视图，LOCAL不检查依赖的视图</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>查询</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> 视图名<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 视图名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>修改</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CERATE <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> 视图名 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句  <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 方式一</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">VIEW</span> 视图名 <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 方式二</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 视图名<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"16-存储过程\"><a href=\"#16-存储过程\" class=\"headerlink\" title=\"16. 存储过程\"></a>16. 存储过程</h2><p>数据库sql语言层面的代码封装和重用。</p>\n<ul>\n<li><p>创建</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELIMITER</span> $$ <span class=\"token comment\">-- 定义结束符</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">IN</span><span class=\"token operator\">|</span><span class=\"token keyword\">OUT</span><span class=\"token operator\">|</span><span class=\"token keyword\">INOUT</span> 参数名 参数类型<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span> \n\t<span class=\"token comment\">-- SQL语句</span>\n<span class=\"token keyword\">END</span>$$\n<span class=\"token keyword\">DELIMITER</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 重置结束符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>调用</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CALL</span> 名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>查看</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> INFORMATION_SCHEMA_ROUTINES <span class=\"token keyword\">WHERE</span> ROUTINE_SCHEMA <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 查询指定数据库的存储过程及状态信息</span>\n<span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> 存储过程名称<span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 查询存储过程的定义</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">PROCEDURE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 存储过程名称<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>变量</p>\n<ul>\n<li><p>系统变量</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> VARIABLES<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看所有系统变量</span>\n<span class=\"token keyword\">SELECT</span> @@<span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 查看指定变量的值</span>\n<span class=\"token keyword\">SET</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 设置系统变量</span>\n<span class=\"token keyword\">SET</span> @@<span class=\"token punctuation\">[</span><span class=\"token keyword\">SESSION</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">GLOBAL</span><span class=\"token punctuation\">]</span> 系统变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 设置系统变量</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>自定义变量</p>\n<p>作用域：当前连接</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SET</span> <span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@var_name</span>  :<span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@var_name</span>  :<span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@var_name</span>  <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@var_name</span> <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@var_name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>局部变量</p>\n<p>作用域：BEGIN … END块;</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> 变量名 变量类型<span class=\"token punctuation\">[</span><span class=\"token keyword\">DEFAULT</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 声明</span>\n<span class=\"token keyword\">SET</span> 变量名 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SET</span> 变量名 :<span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span>\n<span class=\"token keyword\">SELECT</span> 字段名 <span class=\"token keyword\">INTO</span> 变量名 <span class=\"token keyword\">FROM</span> 表名<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 赋值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 判断</span>\n<span class=\"token comment\">-- if</span>\n<span class=\"token keyword\">IF</span> 条件<span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">ELSEIF</span> 条件<span class=\"token number\">2</span> <span class=\"token keyword\">THEN</span>\n<span class=\"token keyword\">ELSE</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- case</span>\n<span class=\"token keyword\">CASE</span> case_value\n\t<span class=\"token keyword\">WHEN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">THEN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">ELSE</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">CASE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 循环</span>\n<span class=\"token comment\">-- while</span>\n<span class=\"token keyword\">WHILE</span> 条件 <span class=\"token keyword\">DO</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">sql</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- repeat</span>\n<span class=\"token keyword\">REPEAT</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">sql</span>\n\tUNTIL 条件\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- loop</span>\n<span class=\"token punctuation\">[</span>begin_label:<span class=\"token punctuation\">]</span><span class=\"token keyword\">LOOP</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">sql</span>\n<span class=\"token keyword\">END</span> <span class=\"token keyword\">LOOP</span> <span class=\"token punctuation\">[</span>end_label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 游标</span>\n<span class=\"token keyword\">DECLARE</span> 游标名称 <span class=\"token keyword\">CURSOR</span> <span class=\"token keyword\">FOR</span> 查询语句<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 声明游标</span>\n<span class=\"token keyword\">OPEN</span> 游标名称<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 打开游标</span>\n<span class=\"token keyword\">FETCH</span> 游标名称 <span class=\"token keyword\">INTO</span> 变量<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>变量<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 获取游标记录</span>\n\n<span class=\"token comment\">-- handler</span>\n<span class=\"token keyword\">DECLARE</span> handler_action <span class=\"token keyword\">HANDLER</span> <span class=\"token keyword\">FOR</span> condition_value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>condition_value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> statement<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">-- handler_action</span>\n\t<span class=\"token keyword\">CONTINUE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 继续执行程序</span>\n\t<span class=\"token keyword\">EXIT</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 终止程序</span>\n<span class=\"token comment\">-- condition_value</span>\n\tSQLSTATE sqlstate_value<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 状态码</span>\n\tSQLWARNING<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 所有以01开头的SQLSTATE代码的缩写</span>\n\t<span class=\"token operator\">NOT</span> FOUND<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 所有以02开头的SQLSTATE代码的缩写</span>\n\tSQLEXCEPTION<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 所有没被SQLWARNING和NOT FOUND捕获</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>存储函数</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> 存储函数名称<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>参数列表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">TYPE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">DETERMINISTIC</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">NO</span> <span class=\"token keyword\">SQL</span> <span class=\"token operator\">|</span><span class=\"token keyword\">READS</span> <span class=\"token keyword\">SQL</span> <span class=\"token keyword\">DATA</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">BEGIN</span> \n\t<span class=\"token comment\">-- SQL语句</span>\n\t<span class=\"token keyword\">RETURN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"17-触发器\"><a href=\"#17-触发器\" class=\"headerlink\" title=\"17. 触发器\"></a>17. 触发器</h2><p>触发器是指与表有关的数据库对象，指在insert/update/delete之前或者之后，触发并执行触发器中定义的SQL集合。OLD，NEW指发生变化的记录内容</p>\n<ul>\n<li><p>创建</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> trigger_name\nBEFORE<span class=\"token operator\">|</span><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">INSERT</span><span class=\"token operator\">|</span><span class=\"token keyword\">UPDATE</span><span class=\"token operator\">|</span><span class=\"token keyword\">DELETE</span>\n<span class=\"token keyword\">ON</span> tb_name <span class=\"token keyword\">FOR EACH ROW</span> <span class=\"token comment\">-- 行级触发器</span>\n<span class=\"token keyword\">BEGIN</span>\n\ttrigger_stmt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>查看</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> TRIGGERS<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>删除</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token punctuation\">[</span>schema_name<span class=\"token punctuation\">]</span> trigger_name<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 如果没有指定schema_name，默认当前数据库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"18-锁\"><a href=\"#18-锁\" class=\"headerlink\" title=\"18. 锁\"></a>18. 锁</h2><p>计算机协调多个进程或线程并发访问某一资源的机制。</p>\n<ul>\n<li><p>全局锁</p>\n<p>对整个数据库实例加锁，加锁后处于只读状态。后续写操作将被阻塞。</p>\n<p>使用场景：做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据完整性</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fush tables with read lock; -- 加全局锁\nunlock tables; -- 释放锁<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>表级锁</p>\n<p>每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。</p>\n<ul>\n<li><p>表锁</p>\n<p>加锁：lock tables 表名… read/write</p>\n<p>释放锁：unlock tables / 客户端连接关闭</p>\n<ul>\n<li><p>表共享读锁（read lock）：阻塞写，不阻塞其他客户端的读</p>\n</li>\n<li><p>表独占写锁（write lock）：阻塞其他客户端的读写，不阻塞自己的读写</p>\n</li>\n</ul>\n</li>\n<li><p>元数据锁（meta data lock）</p>\n<p>系统自动控制，无需显式使用。访问表时会自动加上，维护表元数据的数据一致性。在表上有未提交的事务时，不可以对元数据进行写入操作。避免了DML和DDL的冲突，保证读写的正确性。</p>\n<p>增删改查时，加MDL读锁（共享），表结构变更时，加MDL写锁（排他）。</p>\n</li>\n<li><p>意向锁</p>\n<p>使用场景：加表锁时需要检查每一行的行锁，为解决效率低的问题，使用意向锁减少检查。</p>\n<ul>\n<li><p>意向共享锁（IS）</p>\n<p>与表锁共享锁（read）兼容，与表锁排他锁（write）互斥。</p>\n</li>\n<li><p>意向排他锁（IX）</p>\n<p>与表锁共享锁（read）及表锁排他锁（write）都互斥，意向锁之间不互斥</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>行级锁</p>\n<p>每次操作锁住对应表。锁定粒度小，发生锁冲突的概率最低，并发度最高。</p>\n<p>通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</p>\n<ul>\n<li><p>行锁（record lock）</p>\n<p>锁定单个记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</p>\n<ul>\n<li><p>共享锁（S）：</p>\n<p>允许一个事物去读一行，阻止其他事务获得相同数据集的排他锁。</p>\n</li>\n<li><p>排他锁（X）：</p>\n<p>允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</p>\n</li>\n</ul>\n</li>\n<li><p>间隙锁（gap lock）</p>\n<p>锁定索引记录间隙（不含记录），确保索引记录间隙不变，防止其他事务insert产生幻读。在RR隔离级别下支持</p>\n</li>\n<li><p>临键锁（next-key-lock）</p>\n<p>行锁和间隙锁的组合。在RR隔离级别下支持</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"19-SQL性能分析\"><a href=\"#19-SQL性能分析\" class=\"headerlink\" title=\"19. SQL性能分析\"></a>19. SQL性能分析</h2><ul>\n<li><p>SQL执行频率</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">GLOBAL</span> <span class=\"token keyword\">STATUS</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'Com_______)'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>开启慢查询日志</p>\n</li>\n</ul>\n<p>​        /etc/my.cnf配置 ，配置完重启mysql</p>\n<p>​        slow_query_log = 1 # 设置开启MYSQL慢查询日志</p>\n<p>​        long_query_time = 2 # 设置SQL执行时间</p>\n<ul>\n<li><p>profile耗时详情</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> profiles<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">show</span> profile <span class=\"token punctuation\">[</span>cpu<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> query query_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 耗时情况</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>expain</p>\n<p>sql语句前加上explain/desc</p>\n<ul>\n<li><p>select _type</p>\n<ul>\n<li><p>SIMPLE 简单表，不使用表连接或者子查询</p>\n</li>\n<li><p>PRIMARY 主查询 外层的查询</p>\n</li>\n<li><p>UNION UNION中的第二个或者后面的查询语句</p>\n</li>\n<li><p>SUBQUERY SELECT / WHERE包含子查询</p>\n</li>\n</ul>\n</li>\n<li><p><strong>type</strong></p>\n<p> ​    连接类型由好到差NULL（不访问表）、system（系统表）、const（主键或唯一索引）、eq_ref（唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配）、ref（非唯一性的索引）、range（使用索引返回一个范围中的行，如大于小于等情况）、index（用了索引但遍历索引树）、all（全表扫描）</p>\n</li>\n<li><p><strong>possible_key</strong> </p>\n<p> 显示可能应用在这张表上的索引，一个或多个</p>\n</li>\n<li><p><strong>key</strong></p>\n<p> 实际用到的索引，没有使用索引则为null</p>\n</li>\n<li><p><strong>key_len</strong></p>\n<p> 索引中使用的字节数，索引字段最大可能长度（并非实际使用长度），长度越短越好</p>\n</li>\n<li><p>rows</p>\n<p> mysql认为必须要执行查询的行数（不准确的估计值）</p>\n</li>\n<li><p>filtered</p>\n<p> 表示返回结果行数占需读取行数的百分比，值越大越好</p>\n</li>\n<li><p>extra</p>\n<ul>\n<li>using index condition; 查找使用了索引，但是需要回表查询数据</li>\n<li>using where;using index; 查找使用了索引，但是需要的数据都在索引列中能找到，不需要回表查询数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"SpringBoot","date":"2021-05-02T10:44:33.000Z","_content":"\n# SpringBoot\n\n## 1. 描述\n\n   SpringBoot是整合Spring技术栈的一站式框架，SpringBoot是简化Spring技术栈的快速开发脚手架，能快速创建出生产级别的Spring应用。\n\n\n\n## 2. 优点\n\n   - Create stand-alone Spring applications\n   - 创建独立Spring应用\n   - Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n   - 内嵌web服务器\n   - Provide opinionated 'starter' dependencies to simplify your build configuration\n   - 自动starter依赖，简化构建配置\n   - Automatically configure Spring and 3rd party libraries whenever possible\n   - 自动配置Spring以及第三方功能\n   - Provide production-ready features such as metrics, health checks, and externalized configuration\n   - 提供生产级别的监控、健康检查及外部化配置\n   - Absolutely no code generation and no requirement for XML configuration\n   - 无代码生成、无需编写XML\n\n\n\n## 3. 创建maven工程\n\n   1. 引入依赖\n\n       ```xml\n       <parent>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-parent</artifactId>\n           <version>2.3.4.RELEASE</version>\n       </parent>\n       \n       <!-- web场景启动器 -->\n       <dependencies>\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-web</artifactId>\n           </dependency>\n       </dependencies>\n       ```\n\n   2. 主程序类\n   \n      ```java\n      /**\n       * 主程序类\n       * @SpringBootApplication：这是一个SpringBoot应用\n       */\n      @SpringBootApplication\n      public class MainApplication {\n      \n          public static void main(String[] args) {\n              SpringApplication.run(MainApplication.class,args);\n          }\n      }\n      ```\n   \n   3. 简化部署打jar包\n   \n      ```xml\n      <build>\n          <plugins>\n              <plugin>\n                  <groupId>org.springframework.boot</groupId>\n                  <artifactId>spring-boot-maven-plugin</artifactId>\n              </plugin>\n          </plugins>\n      </build>\n      ```\n\n\n\n## 4. 依赖管理与自动配置\n\n1. 依赖管理   \n\n   - 父项目做依赖管理\n\n        ```xml\n        <parent>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-parent</artifactId>\n            <version>2.3.4.RELEASE</version>\n        </parent>\n\n        <!--spring-boot-starter-parent的父项目-->\n        <parent>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.3.4.RELEASE</version>\n        </parent>\n        ```\n\n   - 开发导入starter场景启动器\n\n        - spring-boot-starter-* ： *就某种场景\n        - 只要引入starter，这个场景的所有常规需要的依赖我们都自动引入\n        - SpringBoot所有支持的场景\n          https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n        - *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。\n        - 所有场景启动器最底层的依赖`spring-boot-starter-parent`\n\n   - 无需关注版本号，自动版本仲裁\n\n        - 引入依赖默认都可以不写版本\n        - 引入非版本仲裁的jar，要写版本号\n\n   - 可以修改默认版本号\n\n        ```xml\n        <properties>\n        \t<mysql.version>5.1.43</mysql.version>\n        </properties>\n        ```\n\n2. 自动配置\n\n   - 自动配好Tomcat\n       - 引入Tomcat依赖\n       - 配置Tomcat\n   - 自动配好SpringMVC\n      - 引入SpringMVC全套组件\n      - 自动配好SpringMVC常用组件（功能）\n   - 自动配好Web常见功能，如：字符编码问题\n\n      - SpringBoot帮我们配置好了所有web开发的常见场景\n   - 默认的包结构\n\n      - 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来\n      - 无需以前的包扫描配置\n      - 想要改变扫描路径，@SpringBootApplication(scanBasePackages=\"包名\")或者@ComponentScan 指定扫描路径\n   - 各种配置拥有默认值\n      - 默认配置最终都是映射到某个类上，如：MultipartProperties\n      - 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象\n   - 按需加载所有自动配置项\n      - 引入了哪些场景这个场景的自动配置才会开启\n      - SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面\n\n\n\n## 5. 底层注解\n\n\t1. @Configuration\n\t\n\t   - 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n\t\n\t   - 配置类本身也是组件\n\t\n\t   - proxyBeanMethods：代理bean的方法\n\t\n\t      - Full：(proxyBeanMethods = true)【保证每个@Bean方法被调用多少次返回的对象都是单实例的】\n\t      - Lite：(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的对象都是新创建的】\n\t      - 组件依赖必须使用Full模式默认。其他默认是否Lite模式\n\t\n\t2. @Import\n\t\n\t  导入组件：给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n\t\n\t  ```java\n\t  @Import({User.class, DBHelper.class})\n\t  ```\n\t\n\t3. @Conditional\n\t\n\t  条件装配：满足Conditional指定的条件，则进行组件注入\n\n4. @ImportResource\n\n   ```java\n   @ImportResource(\"classpath:beans.xml\")\n   ```\n\n5. 配置绑定\n\n   Java读取到properties文件中的内容，并且把它封装到JavaBean中\n\n   - @Component + @ConfigurationProperties\n\n     ```java\n     /**\n      * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能\n      */\n     @Component\n     @ConfigurationProperties(prefix = \"mycar\")\n     public class Car{\n         \n     }\n     ```\n\n   - @EnableConfigurationProperties + @ConfigurationProperties\n\n     ```java\n     @EnableConfigurationProperties(Car.class)\n     //1、开启Car配置绑定功能\n     //2、把这个Car这个组件自动注册到容器中\n     public class MyConfig {\n     }\n     ```\n\n\n\n## 6. 自动配置原理\n\n**xxxxxAutoConfiguration ---> 组件  --->** **xxxxProperties里面拿值  ----> application.properties**\n\n- SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration\n- 每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，xxxxProperties里面拿。xxxProperties和配置文件进行了绑定\n- 生效的配置类就会给容器中装配很多组件\n- 只要容器中有这些组件，相当于这些功能就有了\n- 定制化配置\n\n- - 用户直接自己@Bean替换底层的组件\n  - 用户去看这个组件是获取的配置文件什么值就去修改。\n\n- \n\n 1. 加载自动配置类\n\n    - @SpringBootConfiguration\n\n    - @ComponentScan\n\n    - @EnableAutoConfiguration\n\n      - @AutoConfigurationPackage\n\n        @Import({AutoConfigurationPackages.Registrar.class})\n\n        利用Registrar导入一系列组件\n\n      - @Import({AutoConfigurationImportSelector.class})\n\n        获取所有导入到容器中的配置类，从META-INF/spring.factories位置来加载一个文件。\n        \t默认扫描我们当前系统里面所有jar包META-INF/spring.factories位置的文件\n\n2. 按照条件装配规则（@Conditional），最终会按需配置。\n\n3. 修改默认配置，以用户修改的优先\n\n   ```java\n   @Bean\n   @ConditionalOnBean(MultipartResolver.class)  //容器中有这个类型组件\n   @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件\n   public MultipartResolver multipartResolver(MultipartResolver resolver) {\n       //给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。\n       //SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范\n       // Detect if the user has created a MultipartResolver but named it incorrectly\n       return resolver;\n   }\n   ```\n\n   \n\n## 7. Lombok\n\n1. 依赖+插件\n\n   ```java\n   <dependency>\n       <groupId>org.projectlombok</groupId>\n       <artifactId>lombok</artifactId>\n   </dependency>\n   ```\n\n2. @Data\n\n   生成set/get\n\n3. @ToString\n\n4. @AllArgsConstructor\n\n   全参构造器\n\n5. @NoArgsConstructor\n\n   无参构造器\n\n6. @EqualsAndHashCode\n\n7. @Slf4j\n\n   log.info\n\n\n\n## 8. Web开发\n\n1. Rest原理（表单提交要使用REST的时候）\n\n    - 表单提交会带上**_method=PUT**\n    - **请求过来被**HiddenHttpMethodFilter拦截\n      - 请求是否正常，并且是POST\n\n      - 获取到**_method**的值。\n        - 兼容以下请求；**PUT**.**DELETE**.**PATCH**\n        - **原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。**\n        - **过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。**\n2. 参数处理原理\n    - HandlerMapping中找到能处理请求的Handler（Controller.method()）\n    - 为当前Handler 找一个适配器 HandlerAdapter； **RequestMappingHandlerAdapter**\n    - 适配器执行目标方法并确定方法参数的每一个值\n\n\n\n## 9.SpringBoot启动过程\n\n   - 创建 **SpringApplication**\n\n   - - 保存一些信息。\n     - 判定当前应用的类型。ClassUtils。Servlet\n     - **bootstrappers****：初始启动引导器（**List<Bootstrapper>**）：去spring.factories文件中找** org.springframework.boot.**Bootstrapper**\n     - 找 **ApplicationContextInitializer**；去**spring.factories****找** **ApplicationContextInitializer**\n\n   - - - List<ApplicationContextInitializer<?>> **initializers**\n\n   - - **找** **ApplicationListener  ；应用监听器。**去**spring.factories****找** **ApplicationListener**\n\n   - - - List<ApplicationListener<?>> **listeners**\n\n   - 运行 **SpringApplication**\n\n   - - **StopWatch**\n     - **记录应用的启动时间**\n     - **创建引导上下文（Context环境）****createBootstrapContext()**\n\n   - - - 获取到所有之前的 **bootstrappers 挨个执行** intitialize() 来完成对引导启动器上下文环境设置\n\n   - - 让当前应用进入**headless**模式。**java.awt.headless**\n     - **获取所有** **RunListener****（运行监听器）【为了方便所有Listener进行事件感知】**\n\n   - - - getSpringFactoriesInstances 去**spring.factories****找** **SpringApplicationRunListener**. \n\n   - - 遍历 **SpringApplicationRunListener 调用 starting 方法；**\n\n   - - - **相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。**\n\n   - - 保存命令行参数；ApplicationArguments\n     - 准备环境 prepareEnvironment（）;\n\n   - - - 返回或者创建基础环境信息对象。**StandardServletEnvironment**\n       - **配置环境信息对象。**\n\n   - - - - **读取所有的配置源的配置属性值。**\n\n   - - - 绑定环境信息\n       - 监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成\n\n   - - 创建IOC容器（createApplicationContext（））\n\n   - - - 根据项目类型（Servlet）创建容器，\n       - 当前会创建 **AnnotationConfigServletWebServerApplicationContext**\n\n   - - **准备ApplicationContext IOC容器的基本信息**  **prepareContext()**\n\n   - - - 保存环境信息\n       - IOC容器的后置处理流程。\n       - 应用初始化器；applyInitializers；\n\n   - - - - 遍历所有的 **ApplicationContextInitializer 。调用** **initialize.。来对ioc容器进行初始化扩展功能**\n         - 遍历所有的 listener 调用 **contextPrepared。EventPublishRunListenr；通知所有的监听器****contextPrepared**\n\n   - - - **所有的监听器 调用** **contextLoaded。通知所有的监听器** **contextLoaded；**\n\n   - - **刷新IOC容器。**refreshContext\n\n   - - - 创建容器中的所有组件（Spring注解）\n\n   - - 容器刷新完成后工作？afterRefresh\n     - 所有监听 器 调用 listeners.**started**(context); **通知所有的监听器** **started**\n     - **调用所有runners；**callRunners()\n\n   - - - **获取容器中的** **ApplicationRunner** \n       - **获取容器中的**  **CommandLineRunner**\n       - **合并所有runner并且按照@Order进行排序**\n       - **遍历所有的runner。调用 run** **方法**\n\n   - - **如果以上有异常，**\n\n   - - - **调用Listener 的 failed**\n\n   - - **调用所有监听器的 running 方法**  listeners.running(context); **通知所有的监听器** **running** \n     - **running如果有问题。继续通知 failed 。****调用所有 Listener 的** **failed；****通知所有的监听器** **failed**\n\n","source":"_posts/SpringBoot.md","raw":"---\ntitle: SpringBoot\ndate: 2021-05-02 18:44:33\ntags: JAVA\ncategories: 编程\n---\n\n# SpringBoot\n\n## 1. 描述\n\n   SpringBoot是整合Spring技术栈的一站式框架，SpringBoot是简化Spring技术栈的快速开发脚手架，能快速创建出生产级别的Spring应用。\n\n\n\n## 2. 优点\n\n   - Create stand-alone Spring applications\n   - 创建独立Spring应用\n   - Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n   - 内嵌web服务器\n   - Provide opinionated 'starter' dependencies to simplify your build configuration\n   - 自动starter依赖，简化构建配置\n   - Automatically configure Spring and 3rd party libraries whenever possible\n   - 自动配置Spring以及第三方功能\n   - Provide production-ready features such as metrics, health checks, and externalized configuration\n   - 提供生产级别的监控、健康检查及外部化配置\n   - Absolutely no code generation and no requirement for XML configuration\n   - 无代码生成、无需编写XML\n\n\n\n## 3. 创建maven工程\n\n   1. 引入依赖\n\n       ```xml\n       <parent>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-parent</artifactId>\n           <version>2.3.4.RELEASE</version>\n       </parent>\n       \n       <!-- web场景启动器 -->\n       <dependencies>\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-web</artifactId>\n           </dependency>\n       </dependencies>\n       ```\n\n   2. 主程序类\n   \n      ```java\n      /**\n       * 主程序类\n       * @SpringBootApplication：这是一个SpringBoot应用\n       */\n      @SpringBootApplication\n      public class MainApplication {\n      \n          public static void main(String[] args) {\n              SpringApplication.run(MainApplication.class,args);\n          }\n      }\n      ```\n   \n   3. 简化部署打jar包\n   \n      ```xml\n      <build>\n          <plugins>\n              <plugin>\n                  <groupId>org.springframework.boot</groupId>\n                  <artifactId>spring-boot-maven-plugin</artifactId>\n              </plugin>\n          </plugins>\n      </build>\n      ```\n\n\n\n## 4. 依赖管理与自动配置\n\n1. 依赖管理   \n\n   - 父项目做依赖管理\n\n        ```xml\n        <parent>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-parent</artifactId>\n            <version>2.3.4.RELEASE</version>\n        </parent>\n\n        <!--spring-boot-starter-parent的父项目-->\n        <parent>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.3.4.RELEASE</version>\n        </parent>\n        ```\n\n   - 开发导入starter场景启动器\n\n        - spring-boot-starter-* ： *就某种场景\n        - 只要引入starter，这个场景的所有常规需要的依赖我们都自动引入\n        - SpringBoot所有支持的场景\n          https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n        - *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。\n        - 所有场景启动器最底层的依赖`spring-boot-starter-parent`\n\n   - 无需关注版本号，自动版本仲裁\n\n        - 引入依赖默认都可以不写版本\n        - 引入非版本仲裁的jar，要写版本号\n\n   - 可以修改默认版本号\n\n        ```xml\n        <properties>\n        \t<mysql.version>5.1.43</mysql.version>\n        </properties>\n        ```\n\n2. 自动配置\n\n   - 自动配好Tomcat\n       - 引入Tomcat依赖\n       - 配置Tomcat\n   - 自动配好SpringMVC\n      - 引入SpringMVC全套组件\n      - 自动配好SpringMVC常用组件（功能）\n   - 自动配好Web常见功能，如：字符编码问题\n\n      - SpringBoot帮我们配置好了所有web开发的常见场景\n   - 默认的包结构\n\n      - 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来\n      - 无需以前的包扫描配置\n      - 想要改变扫描路径，@SpringBootApplication(scanBasePackages=\"包名\")或者@ComponentScan 指定扫描路径\n   - 各种配置拥有默认值\n      - 默认配置最终都是映射到某个类上，如：MultipartProperties\n      - 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象\n   - 按需加载所有自动配置项\n      - 引入了哪些场景这个场景的自动配置才会开启\n      - SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面\n\n\n\n## 5. 底层注解\n\n\t1. @Configuration\n\t\n\t   - 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n\t\n\t   - 配置类本身也是组件\n\t\n\t   - proxyBeanMethods：代理bean的方法\n\t\n\t      - Full：(proxyBeanMethods = true)【保证每个@Bean方法被调用多少次返回的对象都是单实例的】\n\t      - Lite：(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的对象都是新创建的】\n\t      - 组件依赖必须使用Full模式默认。其他默认是否Lite模式\n\t\n\t2. @Import\n\t\n\t  导入组件：给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n\t\n\t  ```java\n\t  @Import({User.class, DBHelper.class})\n\t  ```\n\t\n\t3. @Conditional\n\t\n\t  条件装配：满足Conditional指定的条件，则进行组件注入\n\n4. @ImportResource\n\n   ```java\n   @ImportResource(\"classpath:beans.xml\")\n   ```\n\n5. 配置绑定\n\n   Java读取到properties文件中的内容，并且把它封装到JavaBean中\n\n   - @Component + @ConfigurationProperties\n\n     ```java\n     /**\n      * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能\n      */\n     @Component\n     @ConfigurationProperties(prefix = \"mycar\")\n     public class Car{\n         \n     }\n     ```\n\n   - @EnableConfigurationProperties + @ConfigurationProperties\n\n     ```java\n     @EnableConfigurationProperties(Car.class)\n     //1、开启Car配置绑定功能\n     //2、把这个Car这个组件自动注册到容器中\n     public class MyConfig {\n     }\n     ```\n\n\n\n## 6. 自动配置原理\n\n**xxxxxAutoConfiguration ---> 组件  --->** **xxxxProperties里面拿值  ----> application.properties**\n\n- SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration\n- 每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，xxxxProperties里面拿。xxxProperties和配置文件进行了绑定\n- 生效的配置类就会给容器中装配很多组件\n- 只要容器中有这些组件，相当于这些功能就有了\n- 定制化配置\n\n- - 用户直接自己@Bean替换底层的组件\n  - 用户去看这个组件是获取的配置文件什么值就去修改。\n\n- \n\n 1. 加载自动配置类\n\n    - @SpringBootConfiguration\n\n    - @ComponentScan\n\n    - @EnableAutoConfiguration\n\n      - @AutoConfigurationPackage\n\n        @Import({AutoConfigurationPackages.Registrar.class})\n\n        利用Registrar导入一系列组件\n\n      - @Import({AutoConfigurationImportSelector.class})\n\n        获取所有导入到容器中的配置类，从META-INF/spring.factories位置来加载一个文件。\n        \t默认扫描我们当前系统里面所有jar包META-INF/spring.factories位置的文件\n\n2. 按照条件装配规则（@Conditional），最终会按需配置。\n\n3. 修改默认配置，以用户修改的优先\n\n   ```java\n   @Bean\n   @ConditionalOnBean(MultipartResolver.class)  //容器中有这个类型组件\n   @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件\n   public MultipartResolver multipartResolver(MultipartResolver resolver) {\n       //给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。\n       //SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范\n       // Detect if the user has created a MultipartResolver but named it incorrectly\n       return resolver;\n   }\n   ```\n\n   \n\n## 7. Lombok\n\n1. 依赖+插件\n\n   ```java\n   <dependency>\n       <groupId>org.projectlombok</groupId>\n       <artifactId>lombok</artifactId>\n   </dependency>\n   ```\n\n2. @Data\n\n   生成set/get\n\n3. @ToString\n\n4. @AllArgsConstructor\n\n   全参构造器\n\n5. @NoArgsConstructor\n\n   无参构造器\n\n6. @EqualsAndHashCode\n\n7. @Slf4j\n\n   log.info\n\n\n\n## 8. Web开发\n\n1. Rest原理（表单提交要使用REST的时候）\n\n    - 表单提交会带上**_method=PUT**\n    - **请求过来被**HiddenHttpMethodFilter拦截\n      - 请求是否正常，并且是POST\n\n      - 获取到**_method**的值。\n        - 兼容以下请求；**PUT**.**DELETE**.**PATCH**\n        - **原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。**\n        - **过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。**\n2. 参数处理原理\n    - HandlerMapping中找到能处理请求的Handler（Controller.method()）\n    - 为当前Handler 找一个适配器 HandlerAdapter； **RequestMappingHandlerAdapter**\n    - 适配器执行目标方法并确定方法参数的每一个值\n\n\n\n## 9.SpringBoot启动过程\n\n   - 创建 **SpringApplication**\n\n   - - 保存一些信息。\n     - 判定当前应用的类型。ClassUtils。Servlet\n     - **bootstrappers****：初始启动引导器（**List<Bootstrapper>**）：去spring.factories文件中找** org.springframework.boot.**Bootstrapper**\n     - 找 **ApplicationContextInitializer**；去**spring.factories****找** **ApplicationContextInitializer**\n\n   - - - List<ApplicationContextInitializer<?>> **initializers**\n\n   - - **找** **ApplicationListener  ；应用监听器。**去**spring.factories****找** **ApplicationListener**\n\n   - - - List<ApplicationListener<?>> **listeners**\n\n   - 运行 **SpringApplication**\n\n   - - **StopWatch**\n     - **记录应用的启动时间**\n     - **创建引导上下文（Context环境）****createBootstrapContext()**\n\n   - - - 获取到所有之前的 **bootstrappers 挨个执行** intitialize() 来完成对引导启动器上下文环境设置\n\n   - - 让当前应用进入**headless**模式。**java.awt.headless**\n     - **获取所有** **RunListener****（运行监听器）【为了方便所有Listener进行事件感知】**\n\n   - - - getSpringFactoriesInstances 去**spring.factories****找** **SpringApplicationRunListener**. \n\n   - - 遍历 **SpringApplicationRunListener 调用 starting 方法；**\n\n   - - - **相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。**\n\n   - - 保存命令行参数；ApplicationArguments\n     - 准备环境 prepareEnvironment（）;\n\n   - - - 返回或者创建基础环境信息对象。**StandardServletEnvironment**\n       - **配置环境信息对象。**\n\n   - - - - **读取所有的配置源的配置属性值。**\n\n   - - - 绑定环境信息\n       - 监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成\n\n   - - 创建IOC容器（createApplicationContext（））\n\n   - - - 根据项目类型（Servlet）创建容器，\n       - 当前会创建 **AnnotationConfigServletWebServerApplicationContext**\n\n   - - **准备ApplicationContext IOC容器的基本信息**  **prepareContext()**\n\n   - - - 保存环境信息\n       - IOC容器的后置处理流程。\n       - 应用初始化器；applyInitializers；\n\n   - - - - 遍历所有的 **ApplicationContextInitializer 。调用** **initialize.。来对ioc容器进行初始化扩展功能**\n         - 遍历所有的 listener 调用 **contextPrepared。EventPublishRunListenr；通知所有的监听器****contextPrepared**\n\n   - - - **所有的监听器 调用** **contextLoaded。通知所有的监听器** **contextLoaded；**\n\n   - - **刷新IOC容器。**refreshContext\n\n   - - - 创建容器中的所有组件（Spring注解）\n\n   - - 容器刷新完成后工作？afterRefresh\n     - 所有监听 器 调用 listeners.**started**(context); **通知所有的监听器** **started**\n     - **调用所有runners；**callRunners()\n\n   - - - **获取容器中的** **ApplicationRunner** \n       - **获取容器中的**  **CommandLineRunner**\n       - **合并所有runner并且按照@Order进行排序**\n       - **遍历所有的runner。调用 run** **方法**\n\n   - - **如果以上有异常，**\n\n   - - - **调用Listener 的 failed**\n\n   - - **调用所有监听器的 running 方法**  listeners.running(context); **通知所有的监听器** **running** \n     - **running如果有问题。继续通知 failed 。****调用所有 Listener 的** **failed；****通知所有的监听器** **failed**\n\n","slug":"SpringBoot","published":1,"updated":"2022-10-13T14:56:42.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdk9z001494wa3y727xsa","content":"<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><h2 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h2><p>   SpringBoot是整合Spring技术栈的一站式框架，SpringBoot是简化Spring技术栈的快速开发脚手架，能快速创建出生产级别的Spring应用。</p>\n<h2 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h2><ul>\n<li>Create stand-alone Spring applications</li>\n<li>创建独立Spring应用</li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li>\n<li>内嵌web服务器</li>\n<li>Provide opinionated ‘starter’ dependencies to simplify your build configuration</li>\n<li>自动starter依赖，简化构建配置</li>\n<li>Automatically configure Spring and 3rd party libraries whenever possible</li>\n<li>自动配置Spring以及第三方功能</li>\n<li>Provide production-ready features such as metrics, health checks, and externalized configuration</li>\n<li>提供生产级别的监控、健康检查及外部化配置</li>\n<li>Absolutely no code generation and no requirement for XML configuration</li>\n<li>无代码生成、无需编写XML</li>\n</ul>\n<h2 id=\"3-创建maven工程\"><a href=\"#3-创建maven工程\" class=\"headerlink\" title=\"3. 创建maven工程\"></a>3. 创建maven工程</h2><ol>\n<li><p>引入依赖</p>\n <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- web场景启动器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>主程序类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 主程序类\n * @SpringBootApplication：这是一个SpringBoot应用\n */</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApplication</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>简化部署打jar包</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"4-依赖管理与自动配置\"><a href=\"#4-依赖管理与自动配置\" class=\"headerlink\" title=\"4. 依赖管理与自动配置\"></a>4. 依赖管理与自动配置</h2><ol>\n<li><p>依赖管理   </p>\n<ul>\n<li><p>父项目做依赖管理</p>\n   <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--spring-boot-starter-parent的父项目--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>开发导入starter场景启动器</p>\n<ul>\n<li>spring-boot-starter-* ： *就某种场景</li>\n<li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li>\n<li>SpringBoot所有支持的场景<br><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n<li>*-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li>\n<li>所有场景启动器最底层的依赖<code>spring-boot-starter-parent</code></li>\n</ul>\n</li>\n<li><p>无需关注版本号，自动版本仲裁</p>\n<ul>\n<li>引入依赖默认都可以不写版本</li>\n<li>引入非版本仲裁的jar，要写版本号</li>\n</ul>\n</li>\n<li><p>可以修改默认版本号</p>\n   <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mysql.version</span><span class=\"token punctuation\">></span></span>5.1.43<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mysql.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>自动配置</p>\n<ul>\n<li><p>自动配好Tomcat</p>\n<ul>\n<li>引入Tomcat依赖</li>\n<li>配置Tomcat</li>\n</ul>\n</li>\n<li><p>自动配好SpringMVC</p>\n<ul>\n<li>引入SpringMVC全套组件</li>\n<li>自动配好SpringMVC常用组件（功能）</li>\n</ul>\n</li>\n<li><p>自动配好Web常见功能，如：字符编码问题</p>\n<ul>\n<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>\n</ul>\n</li>\n<li><p>默认的包结构</p>\n<ul>\n<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>\n<li>无需以前的包扫描配置</li>\n<li>想要改变扫描路径，@SpringBootApplication(scanBasePackages=”包名”)或者@ComponentScan 指定扫描路径</li>\n</ul>\n</li>\n<li><p>各种配置拥有默认值</p>\n<ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>\n<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n<li><p>按需加载所有自动配置项</p>\n<ul>\n<li>引入了哪些场景这个场景的自动配置才会开启</li>\n<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5-底层注解\"><a href=\"#5-底层注解\" class=\"headerlink\" title=\"5. 底层注解\"></a>5. 底层注解</h2><pre><code>1. @Configuration\n\n   - 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n\n   - 配置类本身也是组件\n\n   - proxyBeanMethods：代理bean的方法\n\n      - Full：(proxyBeanMethods = true)【保证每个@Bean方法被调用多少次返回的对象都是单实例的】\n      - Lite：(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的对象都是新创建的】\n      - 组件依赖必须使用Full模式默认。其他默认是否Lite模式\n\n2. @Import\n\n  导入组件：给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DBHelper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n3. @Conditional\n\n  条件装配：满足Conditional指定的条件，则进行组件注入\n</code></pre>\n<ol start=\"4\">\n<li><p>@ImportResource</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ImportResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:beans.xml\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>配置绑定</p>\n<p>Java读取到properties文件中的内容，并且把它封装到JavaBean中</p>\n<ul>\n<li><p>@Component + @ConfigurationProperties</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"mycar\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@EnableConfigurationProperties + @ConfigurationProperties</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//1、开启Car配置绑定功能</span>\n<span class=\"token comment\">//2、把这个Car这个组件自动注册到容器中</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"6-自动配置原理\"><a href=\"#6-自动配置原理\" class=\"headerlink\" title=\"6. 自动配置原理\"></a>6. 自动配置原理</h2><p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>\n<ul>\n<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>\n</li>\n<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>\n</li>\n<li><p>生效的配置类就会给容器中装配很多组件</p>\n</li>\n<li><p>只要容器中有这些组件，相当于这些功能就有了</p>\n</li>\n<li><p>定制化配置</p>\n</li>\n<li><ul>\n<li>用户直接自己@Bean替换底层的组件</li>\n<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<ol>\n<li><p>加载自动配置类</p>\n<ul>\n<li><p>@SpringBootConfiguration</p>\n</li>\n<li><p>@ComponentScan</p>\n</li>\n<li><p>@EnableAutoConfiguration</p>\n<ul>\n<li><p>@AutoConfigurationPackage</p>\n<p>@Import({AutoConfigurationPackages.Registrar.class})</p>\n<p>利用Registrar导入一系列组件</p>\n</li>\n<li><p>@Import({AutoConfigurationImportSelector.class})</p>\n<p>获取所有导入到容器中的配置类，从META-INF/spring.factories位置来加载一个文件。</p>\n<pre><code>默认扫描我们当前系统里面所有jar包META-INF/spring.factories位置的文件\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>按照条件装配规则（@Conditional），最终会按需配置。</p>\n</li>\n<li><p>修改默认配置，以用户修改的优先</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@ConditionalOnBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//容器中有这个类型组件</span>\n<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">.</span>MULTIPART_RESOLVER_BEAN_NAME<span class=\"token punctuation\">)</span> <span class=\"token comment\">//容器中没有这个名字 multipartResolver 的组件</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MultipartResolver</span> <span class=\"token function\">multipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartResolver</span> resolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span>\n    <span class=\"token comment\">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span>\n    <span class=\"token comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span>\n    <span class=\"token keyword\">return</span> resolver<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"7-Lombok\"><a href=\"#7-Lombok\" class=\"headerlink\" title=\"7. Lombok\"></a>7. Lombok</h2><ol>\n<li><p>依赖+插件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>projectlombok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>lombok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@Data</p>\n<p>生成set/get</p>\n</li>\n<li><p>@ToString</p>\n</li>\n<li><p>@AllArgsConstructor</p>\n<p>全参构造器</p>\n</li>\n<li><p>@NoArgsConstructor</p>\n<p>无参构造器</p>\n</li>\n<li><p>@EqualsAndHashCode</p>\n</li>\n<li><p>@Slf4j</p>\n<p>log.info</p>\n</li>\n</ol>\n<h2 id=\"8-Web开发\"><a href=\"#8-Web开发\" class=\"headerlink\" title=\"8. Web开发\"></a>8. Web开发</h2><ol>\n<li><p>Rest原理（表单提交要使用REST的时候）</p>\n<ul>\n<li><p>表单提交会带上**_method=PUT**</p>\n</li>\n<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>\n<ul>\n<li><p>请求是否正常，并且是POST</p>\n</li>\n<li><p>获取到**_method**的值。</p>\n<ul>\n<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>\n<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>\n<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>参数处理原理</p>\n<ul>\n<li>HandlerMapping中找到能处理请求的Handler（Controller.method()）</li>\n<li>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></li>\n<li>适配器执行目标方法并确定方法参数的每一个值</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"9-SpringBoot启动过程\"><a href=\"#9-SpringBoot启动过程\" class=\"headerlink\" title=\"9.SpringBoot启动过程\"></a>9.SpringBoot启动过程</h2><ul>\n<li><p>创建 <strong>SpringApplication</strong></p>\n</li>\n<li><ul>\n<li>保存一些信息。</li>\n<li>判定当前应用的类型。ClassUtils。Servlet</li>\n<li><strong>bootstrappers****：初始启动引导器（</strong>List<Bootstrapper><strong>）：去spring.factories文件中找</strong> org.springframework.boot.<strong>Bootstrapper</strong></li>\n<li>找 <strong>ApplicationContextInitializer</strong>；去<strong>spring.factories****找</strong> <strong>ApplicationContextInitializer</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializers</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>找</strong> <strong>ApplicationListener  ；应用监听器。</strong>去<strong>spring.factories****找</strong> <strong>ApplicationListener</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行 <strong>SpringApplication</strong></p>\n</li>\n<li><ul>\n<li><strong>StopWatch</strong></li>\n<li><strong>记录应用的启动时间</strong></li>\n<li><strong>创建引导上下文（Context环境）****createBootstrapContext()</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>获取到所有之前的 <strong>bootstrappers 挨个执行</strong> intitialize() 来完成对引导启动器上下文环境设置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>让当前应用进入<strong>headless</strong>模式。<strong>java.awt.headless</strong></li>\n<li><strong>获取所有</strong> <strong>RunListener****（运行监听器）【为了方便所有Listener进行事件感知】</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>getSpringFactoriesInstances 去<strong>spring.factories****找</strong> <strong>SpringApplicationRunListener</strong>. </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>遍历 <strong>SpringApplicationRunListener 调用 starting 方法；</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>保存命令行参数；ApplicationArguments</li>\n<li>准备环境 prepareEnvironment（）;</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>返回或者创建基础环境信息对象。<strong>StandardServletEnvironment</strong></li>\n<li><strong>配置环境信息对象。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><strong>读取所有的配置源的配置属性值。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>绑定环境信息</li>\n<li>监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>创建IOC容器（createApplicationContext（））</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>根据项目类型（Servlet）创建容器，</li>\n<li>当前会创建 <strong>AnnotationConfigServletWebServerApplicationContext</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>准备ApplicationContext IOC容器的基本信息</strong>  <strong>prepareContext()</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>保存环境信息</li>\n<li>IOC容器的后置处理流程。</li>\n<li>应用初始化器；applyInitializers；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>遍历所有的 <strong>ApplicationContextInitializer 。调用</strong> <strong>initialize.。来对ioc容器进行初始化扩展功能</strong></li>\n<li>遍历所有的 listener 调用 <strong>contextPrepared。EventPublishRunListenr；通知所有的监听器****contextPrepared</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>所有的监听器 调用</strong> <strong>contextLoaded。通知所有的监听器</strong> <strong>contextLoaded；</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>刷新IOC容器。</strong>refreshContext</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>创建容器中的所有组件（Spring注解）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>容器刷新完成后工作？afterRefresh</li>\n<li>所有监听 器 调用 listeners.<strong>started</strong>(context); <strong>通知所有的监听器</strong> <strong>started</strong></li>\n<li><strong>调用所有runners；</strong>callRunners()</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>获取容器中的</strong> <strong>ApplicationRunner</strong> </li>\n<li><strong>获取容器中的</strong>  <strong>CommandLineRunner</strong></li>\n<li><strong>合并所有runner并且按照@Order进行排序</strong></li>\n<li><strong>遍历所有的runner。调用 run</strong> <strong>方法</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>如果以上有异常，</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>调用Listener 的 failed</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>调用所有监听器的 running 方法</strong>  listeners.running(context); <strong>通知所有的监听器</strong> <strong>running</strong> </li>\n<li><strong>running如果有问题。继续通知 failed 。****调用所有 Listener 的</strong> <strong>failed；****通知所有的监听器</strong> <strong>failed</strong></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h1><h2 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h2><p>   SpringBoot是整合Spring技术栈的一站式框架，SpringBoot是简化Spring技术栈的快速开发脚手架，能快速创建出生产级别的Spring应用。</p>\n<h2 id=\"2-优点\"><a href=\"#2-优点\" class=\"headerlink\" title=\"2. 优点\"></a>2. 优点</h2><ul>\n<li>Create stand-alone Spring applications</li>\n<li>创建独立Spring应用</li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li>\n<li>内嵌web服务器</li>\n<li>Provide opinionated ‘starter’ dependencies to simplify your build configuration</li>\n<li>自动starter依赖，简化构建配置</li>\n<li>Automatically configure Spring and 3rd party libraries whenever possible</li>\n<li>自动配置Spring以及第三方功能</li>\n<li>Provide production-ready features such as metrics, health checks, and externalized configuration</li>\n<li>提供生产级别的监控、健康检查及外部化配置</li>\n<li>Absolutely no code generation and no requirement for XML configuration</li>\n<li>无代码生成、无需编写XML</li>\n</ul>\n<h2 id=\"3-创建maven工程\"><a href=\"#3-创建maven工程\" class=\"headerlink\" title=\"3. 创建maven工程\"></a>3. 创建maven工程</h2><ol>\n<li><p>引入依赖</p>\n <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- web场景启动器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>主程序类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 主程序类\n * @SpringBootApplication：这是一个SpringBoot应用\n */</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainApplication</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>简化部署打jar包</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"4-依赖管理与自动配置\"><a href=\"#4-依赖管理与自动配置\" class=\"headerlink\" title=\"4. 依赖管理与自动配置\"></a>4. 依赖管理与自动配置</h2><ol>\n<li><p>依赖管理   </p>\n<ul>\n<li><p>父项目做依赖管理</p>\n   <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--spring-boot-starter-parent的父项目--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>开发导入starter场景启动器</p>\n<ul>\n<li>spring-boot-starter-* ： *就某种场景</li>\n<li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li>\n<li>SpringBoot所有支持的场景<br><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>\n<li>*-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li>\n<li>所有场景启动器最底层的依赖<code>spring-boot-starter-parent</code></li>\n</ul>\n</li>\n<li><p>无需关注版本号，自动版本仲裁</p>\n<ul>\n<li>引入依赖默认都可以不写版本</li>\n<li>引入非版本仲裁的jar，要写版本号</li>\n</ul>\n</li>\n<li><p>可以修改默认版本号</p>\n   <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mysql.version</span><span class=\"token punctuation\">></span></span>5.1.43<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mysql.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>自动配置</p>\n<ul>\n<li><p>自动配好Tomcat</p>\n<ul>\n<li>引入Tomcat依赖</li>\n<li>配置Tomcat</li>\n</ul>\n</li>\n<li><p>自动配好SpringMVC</p>\n<ul>\n<li>引入SpringMVC全套组件</li>\n<li>自动配好SpringMVC常用组件（功能）</li>\n</ul>\n</li>\n<li><p>自动配好Web常见功能，如：字符编码问题</p>\n<ul>\n<li>SpringBoot帮我们配置好了所有web开发的常见场景</li>\n</ul>\n</li>\n<li><p>默认的包结构</p>\n<ul>\n<li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li>\n<li>无需以前的包扫描配置</li>\n<li>想要改变扫描路径，@SpringBootApplication(scanBasePackages=”包名”)或者@ComponentScan 指定扫描路径</li>\n</ul>\n</li>\n<li><p>各种配置拥有默认值</p>\n<ul>\n<li>默认配置最终都是映射到某个类上，如：MultipartProperties</li>\n<li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li>\n</ul>\n</li>\n<li><p>按需加载所有自动配置项</p>\n<ul>\n<li>引入了哪些场景这个场景的自动配置才会开启</li>\n<li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5-底层注解\"><a href=\"#5-底层注解\" class=\"headerlink\" title=\"5. 底层注解\"></a>5. 底层注解</h2><pre><code>1. @Configuration\n\n   - 配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n\n   - 配置类本身也是组件\n\n   - proxyBeanMethods：代理bean的方法\n\n      - Full：(proxyBeanMethods = true)【保证每个@Bean方法被调用多少次返回的对象都是单实例的】\n      - Lite：(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的对象都是新创建的】\n      - 组件依赖必须使用Full模式默认。其他默认是否Lite模式\n\n2. @Import\n\n  导入组件：给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n\n  <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DBHelper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n3. @Conditional\n\n  条件装配：满足Conditional指定的条件，则进行组件注入\n</code></pre>\n<ol start=\"4\">\n<li><p>@ImportResource</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ImportResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:beans.xml\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>配置绑定</p>\n<p>Java读取到properties文件中的内容，并且把它封装到JavaBean中</p>\n<ul>\n<li><p>@Component + @ConfigurationProperties</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能\n */</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"mycar\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@EnableConfigurationProperties + @ConfigurationProperties</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//1、开启Car配置绑定功能</span>\n<span class=\"token comment\">//2、把这个Car这个组件自动注册到容器中</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyConfig</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"6-自动配置原理\"><a href=\"#6-自动配置原理\" class=\"headerlink\" title=\"6. 自动配置原理\"></a>6. 自动配置原理</h2><p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>\n<ul>\n<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>\n</li>\n<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值，xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>\n</li>\n<li><p>生效的配置类就会给容器中装配很多组件</p>\n</li>\n<li><p>只要容器中有这些组件，相当于这些功能就有了</p>\n</li>\n<li><p>定制化配置</p>\n</li>\n<li><ul>\n<li>用户直接自己@Bean替换底层的组件</li>\n<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<ol>\n<li><p>加载自动配置类</p>\n<ul>\n<li><p>@SpringBootConfiguration</p>\n</li>\n<li><p>@ComponentScan</p>\n</li>\n<li><p>@EnableAutoConfiguration</p>\n<ul>\n<li><p>@AutoConfigurationPackage</p>\n<p>@Import({AutoConfigurationPackages.Registrar.class})</p>\n<p>利用Registrar导入一系列组件</p>\n</li>\n<li><p>@Import({AutoConfigurationImportSelector.class})</p>\n<p>获取所有导入到容器中的配置类，从META-INF/spring.factories位置来加载一个文件。</p>\n<pre><code>默认扫描我们当前系统里面所有jar包META-INF/spring.factories位置的文件\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>按照条件装配规则（@Conditional），最终会按需配置。</p>\n</li>\n<li><p>修改默认配置，以用户修改的优先</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@ConditionalOnBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//容器中有这个类型组件</span>\n<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatcherServlet</span><span class=\"token punctuation\">.</span>MULTIPART_RESOLVER_BEAN_NAME<span class=\"token punctuation\">)</span> <span class=\"token comment\">//容器中没有这个名字 multipartResolver 的组件</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MultipartResolver</span> <span class=\"token function\">multipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartResolver</span> resolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span>\n    <span class=\"token comment\">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span>\n    <span class=\"token comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span>\n    <span class=\"token keyword\">return</span> resolver<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"7-Lombok\"><a href=\"#7-Lombok\" class=\"headerlink\" title=\"7. Lombok\"></a>7. Lombok</h2><ol>\n<li><p>依赖+插件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>projectlombok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>lombok<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@Data</p>\n<p>生成set/get</p>\n</li>\n<li><p>@ToString</p>\n</li>\n<li><p>@AllArgsConstructor</p>\n<p>全参构造器</p>\n</li>\n<li><p>@NoArgsConstructor</p>\n<p>无参构造器</p>\n</li>\n<li><p>@EqualsAndHashCode</p>\n</li>\n<li><p>@Slf4j</p>\n<p>log.info</p>\n</li>\n</ol>\n<h2 id=\"8-Web开发\"><a href=\"#8-Web开发\" class=\"headerlink\" title=\"8. Web开发\"></a>8. Web开发</h2><ol>\n<li><p>Rest原理（表单提交要使用REST的时候）</p>\n<ul>\n<li><p>表单提交会带上**_method=PUT**</p>\n</li>\n<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>\n<ul>\n<li><p>请求是否正常，并且是POST</p>\n</li>\n<li><p>获取到**_method**的值。</p>\n<ul>\n<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>\n<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>\n<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>参数处理原理</p>\n<ul>\n<li>HandlerMapping中找到能处理请求的Handler（Controller.method()）</li>\n<li>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></li>\n<li>适配器执行目标方法并确定方法参数的每一个值</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"9-SpringBoot启动过程\"><a href=\"#9-SpringBoot启动过程\" class=\"headerlink\" title=\"9.SpringBoot启动过程\"></a>9.SpringBoot启动过程</h2><ul>\n<li><p>创建 <strong>SpringApplication</strong></p>\n</li>\n<li><ul>\n<li>保存一些信息。</li>\n<li>判定当前应用的类型。ClassUtils。Servlet</li>\n<li><strong>bootstrappers****：初始启动引导器（</strong>List<Bootstrapper><strong>）：去spring.factories文件中找</strong> org.springframework.boot.<strong>Bootstrapper</strong></li>\n<li>找 <strong>ApplicationContextInitializer</strong>；去<strong>spring.factories****找</strong> <strong>ApplicationContextInitializer</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializers</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>找</strong> <strong>ApplicationListener  ；应用监听器。</strong>去<strong>spring.factories****找</strong> <strong>ApplicationListener</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>运行 <strong>SpringApplication</strong></p>\n</li>\n<li><ul>\n<li><strong>StopWatch</strong></li>\n<li><strong>记录应用的启动时间</strong></li>\n<li><strong>创建引导上下文（Context环境）****createBootstrapContext()</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>获取到所有之前的 <strong>bootstrappers 挨个执行</strong> intitialize() 来完成对引导启动器上下文环境设置</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>让当前应用进入<strong>headless</strong>模式。<strong>java.awt.headless</strong></li>\n<li><strong>获取所有</strong> <strong>RunListener****（运行监听器）【为了方便所有Listener进行事件感知】</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>getSpringFactoriesInstances 去<strong>spring.factories****找</strong> <strong>SpringApplicationRunListener</strong>. </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>遍历 <strong>SpringApplicationRunListener 调用 starting 方法；</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>保存命令行参数；ApplicationArguments</li>\n<li>准备环境 prepareEnvironment（）;</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>返回或者创建基础环境信息对象。<strong>StandardServletEnvironment</strong></li>\n<li><strong>配置环境信息对象。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li><strong>读取所有的配置源的配置属性值。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>绑定环境信息</li>\n<li>监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>创建IOC容器（createApplicationContext（））</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>根据项目类型（Servlet）创建容器，</li>\n<li>当前会创建 <strong>AnnotationConfigServletWebServerApplicationContext</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>准备ApplicationContext IOC容器的基本信息</strong>  <strong>prepareContext()</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>保存环境信息</li>\n<li>IOC容器的后置处理流程。</li>\n<li>应用初始化器；applyInitializers；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><ul>\n<li>遍历所有的 <strong>ApplicationContextInitializer 。调用</strong> <strong>initialize.。来对ioc容器进行初始化扩展功能</strong></li>\n<li>遍历所有的 listener 调用 <strong>contextPrepared。EventPublishRunListenr；通知所有的监听器****contextPrepared</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>所有的监听器 调用</strong> <strong>contextLoaded。通知所有的监听器</strong> <strong>contextLoaded；</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>刷新IOC容器。</strong>refreshContext</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li>创建容器中的所有组件（Spring注解）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li>容器刷新完成后工作？afterRefresh</li>\n<li>所有监听 器 调用 listeners.<strong>started</strong>(context); <strong>通知所有的监听器</strong> <strong>started</strong></li>\n<li><strong>调用所有runners；</strong>callRunners()</li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>获取容器中的</strong> <strong>ApplicationRunner</strong> </li>\n<li><strong>获取容器中的</strong>  <strong>CommandLineRunner</strong></li>\n<li><strong>合并所有runner并且按照@Order进行排序</strong></li>\n<li><strong>遍历所有的runner。调用 run</strong> <strong>方法</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>如果以上有异常，</strong></li>\n</ul>\n</li>\n<li><ul>\n<li><ul>\n<li><strong>调用Listener 的 failed</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>调用所有监听器的 running 方法</strong>  listeners.running(context); <strong>通知所有的监听器</strong> <strong>running</strong> </li>\n<li><strong>running如果有问题。继续通知 failed 。****调用所有 Listener 的</strong> <strong>failed；****通知所有的监听器</strong> <strong>failed</strong></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Maven","date":"2021-08-23T13:11:31.000Z","_content":"\n# Maven\n\n构件和依赖工具\n\n## 工作机制\n\n{% asset_img image-1.png %}\n\n\n## 配置阿里云镜像\n\n```xml\n<mirror>\n    <id>AliRepo-aliyun</id>\n    <mirrorOf>*</mirrorOf>\n    <name>Mirror Name for the Alirepo.</name> \t\n    <url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n```\n\n\n\n## MAVEN使用\n\n### 1. 定位maven\n   - groupId：公司或组织项目的id，域名倒序\n   - artifactId：一个模块id，maven工程的工程名\n   - version：版本号，SHAPSHOT-迭代过程中的快照版本；RELEASE-正式版本\n\n\n\n### 2. 命令\n\n- 创建项目 `mvn archetype:generate`\n- 删除target目录`mvn clean `\n- 编译 `mvn compile` (`mvn test-compile` 测试编译)\n- 测试mvn test\n- 打包mvn package\n- 安装jar包到本地仓库 mvn install\n- \n\n\n\n### 3.pom.xml-项目对象模型\n\n​\tproject object model\n\n- 根标签project，对当前工程进行配置\n- modelVersion:代表pom.xml所采用的的标签结构\n- groupId\n- artifactId\n- version\n- packaging：打包方式\n  - 默认jar包，即Java工程；\n  - war包，即web工程；\n  - pom：用来管理其他工程的工程\n- properties：定义属性值\n- project.build.sourceEncoding：构建过程中读取源码时使用的字符集\n- dependencies：配置多个依赖信息\n- dependency：配置具体依赖信息\n- scope：当前依赖范围\n\n\n\n### 4. 目录结构\n\n   {% asset_img image-2.png %}\n\n\n\n###  5. 依赖范围\n\n可选值\n\n- compile（默认）\n\n  通常使用的第三方框架的jar包，这样在实际运行时主体功能中真正用到的jar包。可以部署到服务器。\n\n- test\n\n  main目录下无效；部署到服务器无效。\n\n- provided\n\n  部署到服务器无效。\n\n- system\n- runtime\n- import\n\n\n\n### 6. 依赖传递\n\n​\tA依赖B，B依赖C，A是否可以使用C，取决于：\n\n- 如果B依赖C是compile就传递过去\n- 如果B依赖C是test/provided就传递不过去\n\n\n\n### 7. 依赖排除\n\n​\tA依赖B，B依赖C，A可以使用C但需要排除掉的时候（解决jar包冲突）\n\n```xml\n<dependency>\n    <exclusions>\n        <exclusion>\n            <groupId></groupId>\n            <artifactId></artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n\n\n### 8. 继承\n\n   A工程继承B工程，则A的pom配置继承B的pom。\n\n\n\n### 9. 聚合\n\n   ```xml\n   <modules>\n   \t<modules></modules>\n   </modules>\n   ```\n\n   ","source":"_posts/maven.md","raw":"---\ntitle: Maven\ndate: 2021-08-23 21:11:31\ntags: JAVA\ncategories: 编程\n---\n\n# Maven\n\n构件和依赖工具\n\n## 工作机制\n\n{% asset_img image-1.png %}\n\n\n## 配置阿里云镜像\n\n```xml\n<mirror>\n    <id>AliRepo-aliyun</id>\n    <mirrorOf>*</mirrorOf>\n    <name>Mirror Name for the Alirepo.</name> \t\n    <url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n```\n\n\n\n## MAVEN使用\n\n### 1. 定位maven\n   - groupId：公司或组织项目的id，域名倒序\n   - artifactId：一个模块id，maven工程的工程名\n   - version：版本号，SHAPSHOT-迭代过程中的快照版本；RELEASE-正式版本\n\n\n\n### 2. 命令\n\n- 创建项目 `mvn archetype:generate`\n- 删除target目录`mvn clean `\n- 编译 `mvn compile` (`mvn test-compile` 测试编译)\n- 测试mvn test\n- 打包mvn package\n- 安装jar包到本地仓库 mvn install\n- \n\n\n\n### 3.pom.xml-项目对象模型\n\n​\tproject object model\n\n- 根标签project，对当前工程进行配置\n- modelVersion:代表pom.xml所采用的的标签结构\n- groupId\n- artifactId\n- version\n- packaging：打包方式\n  - 默认jar包，即Java工程；\n  - war包，即web工程；\n  - pom：用来管理其他工程的工程\n- properties：定义属性值\n- project.build.sourceEncoding：构建过程中读取源码时使用的字符集\n- dependencies：配置多个依赖信息\n- dependency：配置具体依赖信息\n- scope：当前依赖范围\n\n\n\n### 4. 目录结构\n\n   {% asset_img image-2.png %}\n\n\n\n###  5. 依赖范围\n\n可选值\n\n- compile（默认）\n\n  通常使用的第三方框架的jar包，这样在实际运行时主体功能中真正用到的jar包。可以部署到服务器。\n\n- test\n\n  main目录下无效；部署到服务器无效。\n\n- provided\n\n  部署到服务器无效。\n\n- system\n- runtime\n- import\n\n\n\n### 6. 依赖传递\n\n​\tA依赖B，B依赖C，A是否可以使用C，取决于：\n\n- 如果B依赖C是compile就传递过去\n- 如果B依赖C是test/provided就传递不过去\n\n\n\n### 7. 依赖排除\n\n​\tA依赖B，B依赖C，A可以使用C但需要排除掉的时候（解决jar包冲突）\n\n```xml\n<dependency>\n    <exclusions>\n        <exclusion>\n            <groupId></groupId>\n            <artifactId></artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n\n\n### 8. 继承\n\n   A工程继承B工程，则A的pom配置继承B的pom。\n\n\n\n### 9. 聚合\n\n   ```xml\n   <modules>\n   \t<modules></modules>\n   </modules>\n   ```\n\n   ","slug":"maven","published":1,"updated":"2022-08-25T11:45:13.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka0001894wa7c6wgo2d","content":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1><p>构件和依赖工具</p>\n<h2 id=\"工作机制\"><a href=\"#工作机制\" class=\"headerlink\" title=\"工作机制\"></a>工作机制</h2><img src=\"/2021/08/23/maven/image-1.png\" class=\"\">\n\n\n<h2 id=\"配置阿里云镜像\"><a href=\"#配置阿里云镜像\" class=\"headerlink\" title=\"配置阿里云镜像\"></a>配置阿里云镜像</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>AliRepo-aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Mirror Name for the Alirepo.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span> \t\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://maven.aliyun.com/repository/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"MAVEN使用\"><a href=\"#MAVEN使用\" class=\"headerlink\" title=\"MAVEN使用\"></a>MAVEN使用</h2><h3 id=\"1-定位maven\"><a href=\"#1-定位maven\" class=\"headerlink\" title=\"1. 定位maven\"></a>1. 定位maven</h3><ul>\n<li>groupId：公司或组织项目的id，域名倒序</li>\n<li>artifactId：一个模块id，maven工程的工程名</li>\n<li>version：版本号，SHAPSHOT-迭代过程中的快照版本；RELEASE-正式版本</li>\n</ul>\n<h3 id=\"2-命令\"><a href=\"#2-命令\" class=\"headerlink\" title=\"2. 命令\"></a>2. 命令</h3><ul>\n<li>创建项目 <code>mvn archetype:generate</code></li>\n<li>删除target目录<code>mvn clean </code></li>\n<li>编译 <code>mvn compile</code> (<code>mvn test-compile</code> 测试编译)</li>\n<li>测试mvn test</li>\n<li>打包mvn package</li>\n<li>安装jar包到本地仓库 mvn install</li>\n<li></li>\n</ul>\n<h3 id=\"3-pom-xml-项目对象模型\"><a href=\"#3-pom-xml-项目对象模型\" class=\"headerlink\" title=\"3.pom.xml-项目对象模型\"></a>3.pom.xml-项目对象模型</h3><p>​    project object model</p>\n<ul>\n<li>根标签project，对当前工程进行配置</li>\n<li>modelVersion:代表pom.xml所采用的的标签结构</li>\n<li>groupId</li>\n<li>artifactId</li>\n<li>version</li>\n<li>packaging：打包方式<ul>\n<li>默认jar包，即Java工程；</li>\n<li>war包，即web工程；</li>\n<li>pom：用来管理其他工程的工程</li>\n</ul>\n</li>\n<li>properties：定义属性值</li>\n<li>project.build.sourceEncoding：构建过程中读取源码时使用的字符集</li>\n<li>dependencies：配置多个依赖信息</li>\n<li>dependency：配置具体依赖信息</li>\n<li>scope：当前依赖范围</li>\n</ul>\n<h3 id=\"4-目录结构\"><a href=\"#4-目录结构\" class=\"headerlink\" title=\"4. 目录结构\"></a>4. 目录结构</h3>   <img src=\"/2021/08/23/maven/image-2.png\" class=\"\">\n\n\n\n<h3 id=\"5-依赖范围\"><a href=\"#5-依赖范围\" class=\"headerlink\" title=\"5. 依赖范围\"></a>5. 依赖范围</h3><p>可选值</p>\n<ul>\n<li><p>compile（默认）</p>\n<p>通常使用的第三方框架的jar包，这样在实际运行时主体功能中真正用到的jar包。可以部署到服务器。</p>\n</li>\n<li><p>test</p>\n<p>main目录下无效；部署到服务器无效。</p>\n</li>\n<li><p>provided</p>\n<p>部署到服务器无效。</p>\n</li>\n<li><p>system</p>\n</li>\n<li><p>runtime</p>\n</li>\n<li><p>import</p>\n</li>\n</ul>\n<h3 id=\"6-依赖传递\"><a href=\"#6-依赖传递\" class=\"headerlink\" title=\"6. 依赖传递\"></a>6. 依赖传递</h3><p>​    A依赖B，B依赖C，A是否可以使用C，取决于：</p>\n<ul>\n<li>如果B依赖C是compile就传递过去</li>\n<li>如果B依赖C是test/provided就传递不过去</li>\n</ul>\n<h3 id=\"7-依赖排除\"><a href=\"#7-依赖排除\" class=\"headerlink\" title=\"7. 依赖排除\"></a>7. 依赖排除</h3><p>​    A依赖B，B依赖C，A可以使用C但需要排除掉的时候（解决jar包冲突）</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-继承\"><a href=\"#8-继承\" class=\"headerlink\" title=\"8. 继承\"></a>8. 继承</h3><p>   A工程继承B工程，则A的pom配置继承B的pom。</p>\n<h3 id=\"9-聚合\"><a href=\"#9-聚合\" class=\"headerlink\" title=\"9. 聚合\"></a>9. 聚合</h3>   <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h1><p>构件和依赖工具</p>\n<h2 id=\"工作机制\"><a href=\"#工作机制\" class=\"headerlink\" title=\"工作机制\"></a>工作机制</h2><img src=\"/2021/08/23/maven/image-1.png\" class=\"\">\n\n\n<h2 id=\"配置阿里云镜像\"><a href=\"#配置阿里云镜像\" class=\"headerlink\" title=\"配置阿里云镜像\"></a>配置阿里云镜像</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirror</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>AliRepo-aliyun<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mirrorOf</span><span class=\"token punctuation\">></span></span>*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirrorOf</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Mirror Name for the Alirepo.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span> \t\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://maven.aliyun.com/repository/public<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mirror</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"MAVEN使用\"><a href=\"#MAVEN使用\" class=\"headerlink\" title=\"MAVEN使用\"></a>MAVEN使用</h2><h3 id=\"1-定位maven\"><a href=\"#1-定位maven\" class=\"headerlink\" title=\"1. 定位maven\"></a>1. 定位maven</h3><ul>\n<li>groupId：公司或组织项目的id，域名倒序</li>\n<li>artifactId：一个模块id，maven工程的工程名</li>\n<li>version：版本号，SHAPSHOT-迭代过程中的快照版本；RELEASE-正式版本</li>\n</ul>\n<h3 id=\"2-命令\"><a href=\"#2-命令\" class=\"headerlink\" title=\"2. 命令\"></a>2. 命令</h3><ul>\n<li>创建项目 <code>mvn archetype:generate</code></li>\n<li>删除target目录<code>mvn clean </code></li>\n<li>编译 <code>mvn compile</code> (<code>mvn test-compile</code> 测试编译)</li>\n<li>测试mvn test</li>\n<li>打包mvn package</li>\n<li>安装jar包到本地仓库 mvn install</li>\n<li></li>\n</ul>\n<h3 id=\"3-pom-xml-项目对象模型\"><a href=\"#3-pom-xml-项目对象模型\" class=\"headerlink\" title=\"3.pom.xml-项目对象模型\"></a>3.pom.xml-项目对象模型</h3><p>​    project object model</p>\n<ul>\n<li>根标签project，对当前工程进行配置</li>\n<li>modelVersion:代表pom.xml所采用的的标签结构</li>\n<li>groupId</li>\n<li>artifactId</li>\n<li>version</li>\n<li>packaging：打包方式<ul>\n<li>默认jar包，即Java工程；</li>\n<li>war包，即web工程；</li>\n<li>pom：用来管理其他工程的工程</li>\n</ul>\n</li>\n<li>properties：定义属性值</li>\n<li>project.build.sourceEncoding：构建过程中读取源码时使用的字符集</li>\n<li>dependencies：配置多个依赖信息</li>\n<li>dependency：配置具体依赖信息</li>\n<li>scope：当前依赖范围</li>\n</ul>\n<h3 id=\"4-目录结构\"><a href=\"#4-目录结构\" class=\"headerlink\" title=\"4. 目录结构\"></a>4. 目录结构</h3>   <img src=\"/2021/08/23/maven/image-2.png\" class=\"\">\n\n\n\n<h3 id=\"5-依赖范围\"><a href=\"#5-依赖范围\" class=\"headerlink\" title=\"5. 依赖范围\"></a>5. 依赖范围</h3><p>可选值</p>\n<ul>\n<li><p>compile（默认）</p>\n<p>通常使用的第三方框架的jar包，这样在实际运行时主体功能中真正用到的jar包。可以部署到服务器。</p>\n</li>\n<li><p>test</p>\n<p>main目录下无效；部署到服务器无效。</p>\n</li>\n<li><p>provided</p>\n<p>部署到服务器无效。</p>\n</li>\n<li><p>system</p>\n</li>\n<li><p>runtime</p>\n</li>\n<li><p>import</p>\n</li>\n</ul>\n<h3 id=\"6-依赖传递\"><a href=\"#6-依赖传递\" class=\"headerlink\" title=\"6. 依赖传递\"></a>6. 依赖传递</h3><p>​    A依赖B，B依赖C，A是否可以使用C，取决于：</p>\n<ul>\n<li>如果B依赖C是compile就传递过去</li>\n<li>如果B依赖C是test/provided就传递不过去</li>\n</ul>\n<h3 id=\"7-依赖排除\"><a href=\"#7-依赖排除\" class=\"headerlink\" title=\"7. 依赖排除\"></a>7. 依赖排除</h3><p>​    A依赖B，B依赖C，A可以使用C但需要排除掉的时候（解决jar包冲突）</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8-继承\"><a href=\"#8-继承\" class=\"headerlink\" title=\"8. 继承\"></a>8. 继承</h3><p>   A工程继承B工程，则A的pom配置继承B的pom。</p>\n<h3 id=\"9-聚合\"><a href=\"#9-聚合\" class=\"headerlink\" title=\"9. 聚合\"></a>9. 聚合</h3>   <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modules</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modules</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"SSM框架 - MyBatis","date":"2020-05-17T15:42:11.000Z","_content":"\n# SSM框架 - MyBatis\n\n## 1. 描述：\n\n   基于java的持久层框架，包括SQL Maps和Data Access Objects（DAO）\n\n\n\n##  2. MyBatis特性：\n\n   - 支持定制化SQL、存储过程以及高级映射的优秀的持久层框架\n   - 避免了几乎所有的JDBC代码和手动设置参数以及获取结果集\n   - 可以使用简单的XML或注解用于配置和原始映射，将接口和JAVA的pojo映射成数据库中的记录\n   - 半自动的ORM框架\n\n\n\n## 3. 核心配置文件\n\n```xml\n<configuration>\n       <!--\n        MyBatis核心配置文件中，标签的顺序：\n        properties?,settings?,typeAliases?,typeHandlers?,\n        objectFactory?,objectWrapperFactory?,reflectorFactory?,\n        plugins?,environments?,databaseIdProvider?,mappers?\n    -->\n\n    <!--引入properties文件-->\n    <properties resource=\"jdbc.properties\" />\n\n    <!--设置类型别名-->\n    <typeAliases>\n        <!--\n            typeAlias：设置某个类型的别名\n            属性：\n            type：设置需要设置别名的类型\n            alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n            且不区分大小写\n        -->\n        <typeAlias type=\"com.learn.ssm.mybatis.pojo.User\" alias=\"User\"></typeAlias>\n        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->\n        <package name=\"com.learn.ssm.mybatis.pojo\"/>\n    </typeAliases>\n              \n<!--\n    environments：配置多个连接数据库的环境\n    属性：\n    default：设置默认使用的环境的id\n-->\n<environments default=\"development\">\n    <!--\n        environment：配置某个具体的环境\n        属性：\n        id：表示连接数据库的环境的唯一标识，不能重复\n    -->\n    <environment id=\"development\">\n        <!--\n            transactionManager：设置事务管理方式\n            属性：\n            type=\"JDBC|MANAGED\"\n            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事\n            务的提交或回滚需要手动处理\n            MANAGED：被管理，例如Spring\n        -->\n        <transactionManager type=\"JDBC\"/>\n        <!--\n            dataSource：配置数据源\n            属性：\n            type：设置数据源的类型\n            type=\"POOLED|UNPOOLED|JNDI\"\n            POOLED：表示使用数据库连接池缓存数据库连接\n            UNPOOLED：表示不使用数据库连接池\n            JNDI：表示使用上下文中的数据源\n        -->\n        <dataSource type=\"POOLED\">\n            <!--设置连接数据库的驱动-->\n            <property name=\"driver\" value=\"${jdbc.driver}\"/>\n            <!--设置连接数据库的连接地址-->\n            <property name=\"url\" value=\"${jdbc.url}\"/>\n            <!--设置连接数据库的用户名-->\n            <property name=\"username\" value=\"${jdbc.username}\"/>\n            <!--设置连接数据库的密码-->\n            <property name=\"password\" value=\"${jdbc.password}\"/>\n        </dataSource>\n    </environment>\n</environments>\n\n    <!--引入映射文件-->\n    <mappers>\n        <mapper resource=\"mappers/UserMapper.xml\"/>\n        <!--\n            以包为单位引入映射文件\n            要求：\n            1、mapper接口所在的包要和映射文件所在的包一致\n            2、mapper接口要和映射文件的名字一致\n        -->\n        <package name=\"com.learn.mybatis.mapper\"/>\n    </mappers>\n\n</configuration>\n```\n\n\n\n## 4. MyBatis映射文件\n\n   - ORM（Object Relationship  Mapping）：对象关系映射\n\n       - 对象：Java实体类对象\n       - 关系：关系型数据库\n       - 映射：二者对应关系\n\n   - 两个一致：\n\n       - mapper接口的全类名和映射文件的命名空间（namespace）一致\n       - mapper接口中方法名和映射文件中编写SQL的标签的id属性一致\n\n\n\n## 5. SqlSessionFactory\n\n```java\n// 获取核心配置文件的输入流\nInputStream r =  Resources.getResourceAsStream(\"mybatis-config.xml\");\n// 获取SqlSessionFactoryBuilder对象\nSqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n// 获取SqlSessionFactory对象\nSqlSessionFactory sqlSessionFactory =  sqlSessionFactoryBuilder.build(r);\n\n// 获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库对象\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库对象\n// SqlSession sqlSession = sqlSessionFactory.openSession(true);\n// 获取UserMapper的代理实现类对象\nUserMapper mapper = sqlSession.getMapper(UserMapper.class);\n// 调用mapper接口中的方法，实现添加用户信息的功能\nint result = mapper.insertUser();\nSystem.out.println(\"结果：\" + result);\n// 提交事务\nsqlSession.commit();\n// 关闭SqlSession\nsqlSession.close();\n```\n\n\n\n## 6. 结果映射\n   - resultType：设置结果类型，即查询的数据要转换的java对象\n   - resultMap：自定义映射，处理多对一或一对多\n\n\n\n## 7. 获取参数值\n\n- ${}：本质是字符串拼接。若为字符串类型或日期类型，需要手动加单引号（批量删除时用，in (${ids})）\n- #{}：本质是占位符赋值。若为字符串类型或日期类型，自动加单引号。（常用）\n- arg0，arg1...param1,param2\n- 以map集合作为参数，根据key取值\n- 以实体类作为参数，根据字段名取值\n- @Param(\"key\")，根据key取值\n- @MapKey(\"id\")，把查询出的数据放在Map中，以id为键\n\n\n\n## 8. resultMap\n\n```xml\n<resultMap id=\"empAndDeptResultMap\" type=\"Emp\">\n    <id column=\"emp_id\" property=\"empId\"></id>\n    <result column=\"emp_name\" property=\"empName\"></result>\n    <result column=\"age\" property=\"age\"></result>\n    <result column=\"gender\" property=\"gender\"></result>\n    <!--多对一的处理-->\n    <association property=\"dept\" javaType=\"Dept\">\n        <id column=\"dept_id\" property=\"deptId\"></id>\n        <result column=\"dept_name\" property=\"deptName\"></result>\n    </association>\n</resultMap>\n    \n<resultMap id=\"deptAndEmpResultMap\" type=\"Dept\">\n    <id column=\"dept_id\" property=\"deptId\"></id>\n    <result column=\"dept_name\" property=\"deptName\"></result>\n    <!--一对多的处理-->\n    <collection property=\"emps\" ofType=\"Emp\">\n    \t<id column=\"emp_id\" property=\"empId\"></id>\n    \t<result column=\"emp_name\" property=\"empName\"></result>\n    \t<result column=\"age\" property=\"age\"></result>\n    \t<result column=\"gender\" property=\"gender\"></result>\n    </collection>\n</resultMap>\n```\n\n\n\n## 9. 动态SQL\n\n- if\n\n  ```xml\n  <select id=\"getEmpListByMoreTJ\" resultType=\"Emp\">\n      select * from t_emp where 1=1\n      <if test=\"ename != '' and ename != null\">\n      \tand ename = #{ename}\n      </if>\n      <if test=\"age != '' and age != null\">\n      \tand age = #{age}\n      </if>\n      <if test=\"sex != '' and sex != null\">\n      \tand sex = #{sex}\n      </if>\n  </select>\n  ```\n\n- where\n\n  若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字；若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉\n\n  ```xml\n  <select id=\"getEmpListByMoreTJ2\" resultType=\"Emp\">\n      select * from t_emp\n      <where>\n          <if test=\"ename != '' and ename != null\">\n              ename = #{ename}\n          </if>\n          <if test=\"age != '' and age != null\">\n              and age = #{age}\n          </if>\n          <if test=\"sex != '' and sex != null\">\n              and sex = #{sex}\n          </if>\n      </where>\n  </select>\n  ```\n\n- trim\n\n  trim用于去掉或添加标签中的内容 常用属性： prefix：在trim标签中的内容的前面添加某些内容 prefixOverrides：在trim标签中的内容的前面去掉某些内容 suffix：在trim标签中的内容的后面添加某些内容 suffixOverrides：在trim标签中的内容的后面去掉某些内容\n\n  ```xml\n  <select id=\"getEmpListByMoreTJ\" resultType=\"Emp\">\n      select * from t_emp\n      <trim prefix=\"where\" suffixOverrides=\"and\">\n          <if test=\"ename != '' and ename != null\">\n              ename = #{ename} and\n          </if>\n          <if test=\"age != '' and age != null\">\n              age = #{age} and\n          </if>\n          <if test=\"sex != '' and sex != null\">\n              sex = #{sex}\n          </if>\n      </trim>\n  </select>\n  ```\n\n- choose、when、 otherwise\n\n  ```xml\n  <select id=\"getEmpListByChoose\" resultType=\"Emp\">\n      select <include refid=\"empColumns\"></include> from t_emp\n      <where>\n          <choose>\n              <when test=\"ename != '' and ename != null\">\n              ename = #{ename}\n              </when>\n              <when test=\"age != '' and age != null\">\n              age = #{age}\n              </when>\n              <when test=\"sex != '' and sex != null\">\n              sex = #{sex}\n              </when>\n              <when test=\"email != '' and email != null\">\n              email = #{email}\n              </when>\n          </choose>\n      </where>\n  </select>\n  ```\n\n- foreach\n\n  ```xml\n  <insert id=\"insertMoreEmp\">\n  insert into t_emp values\n      <foreach collection=\"emps\" item=\"emp\" separator=\",\">\n      \t(null,#{emp.ename},#{emp.age},#{emp.sex},#{emp.email},null)\n      </foreach>\n  </insert>\n      \n  <delete id=\"deleteMoreByArray\">\n      delete from t_emp where\n      <foreach collection=\"eids\" item=\"eid\" separator=\"or\">\n      \teid = #{eid}\n      </foreach>\n  </delete>\n  \n  <delete id=\"deleteMoreByArray\">\n  \tdelete from t_emp where eid in\n  \t<foreach collection=\"eids\" item=\"eid\" separator=\",\" open=\"(\" close=\")\">\n  \t\t#{eid}\n  \t</foreach>\n  </delete>\n  ```\n\n\n\n## 10. 缓存\n\n1. 一级缓存\n\n   一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问 使一级缓存失效的四种情况： \n\n   - 不同的SqlSession对应不同的一级缓存\n\n   - 同一个SqlSession但是查询条件不同\n\n   - 同一个SqlSession两次查询期间执行了任何一次增删改操作\n\n   - 同一个SqlSession两次查询期间手动清空了缓存`sqlSession.clearCache()`\n\n2. 二级缓存\n\n   二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取 二级缓存开启的条件： \n\n   - 在核心配置文件中，设置全局配置属性cacheEnabled=\"true\"，默认为true，不需要设置\n   - 在映射文件中设置标签\n   - 二级缓存必须在SqlSession关闭或提交之后有效\n   - 查询的数据所转换的实体类类型必须实现序列化的接口 \n\n   使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效\n\n3. 缓存配置\n\n   在mapper配置文件中添加的cache标签可以设置一些属性： \n\n   - eviction属性：缓存回收策略，默认的是 LRU。 \n     - LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 \n     - FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 \n     - SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 \n     - WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 \n   - flushInterval属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新\n   - size属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出\n   - readOnly属性：只读， true/false true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重 要的性能优势。 false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。\n\n4. 缓存顺序\n\n   先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 如果二级缓存没有命中，再查询一级缓存 如果一级缓存也没有命中，则查询数据库。SqlSession关闭之后，一级缓存中的数据会写入二级缓存。\n\n\n\n## 11. 分页\n\n 1. 依赖\n\n    ```xml\n    <dependency>\n        <groupId>com.github.pagehelper</groupId>\n        <artifactId>pagehelper</artifactId>\n        <version>5.2.0</version>\n    </dependency>\n    ```\n\n 2. 配置分页插件\n\n    ```xml\n    <plugins>\n    \t<!--设置分页插件-->\n    \t<plugin interceptor=\"com.github.pagehelper.PageInterceptor\"></plugin>\n    </plugins>\n    ```\n\n 3. 使用分页插件\n\n    1. 在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能 \n\n       - pageNum：当前页的页码 \n       - pageSize：每页显示的条数\n\n    2. 在查询获取list集合之后，使用PageInfo pageInfo = new PageInfo<>(List list, int navigatePages)获取分页相关数据 \n\n       - list：分页之后的数据 \n       - navigatePages：导航分页的页码数\n\n    3. 分页相关数据 \n\n       ```json\n       PageInfo{ pageNum=8, pageSize=4, size=2, startRow=29, endRow=30, total=30, pages=8, list=Page{count=true, pageNum=8, pageSize=4, startRow=28, endRow=32, total=30, pages=8, reasonable=false, pageSizeZero=false}, prePage=7, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=true, hasNextPage=false, navigatePages=5, navigateFirstPage4, navigateLastPage8, navigatepageNums=[4, 5, 6, 7, 8] }\n       ```\n\n       - pageNum：当前页的页码 \n       - pageSize：每页显示的条数\n       - size：当前页显示的真实条数 \n       - total：总记录数 \n       - pages：总页数 \n       - prePage：上一页的页码 \n       - nextPage：下一页的页码 \n       - isFirstPage/isLastPage：是否为第一页/最后一页 \n       - hasPreviousPage/hasNextPage：是否存在上一页/下一页 \n       - navigatePages：导航分页的页码数 \n       - navigatepageNums：导航分页的页码，[1,2,3,4,5]\n","source":"_posts/ssm框架-MyBatis.md","raw":"---\ntitle: SSM框架 - MyBatis\ndate: 2020-05-17 23:42:11\ntags: JAVA\ncategories: 编程\n---\n\n# SSM框架 - MyBatis\n\n## 1. 描述：\n\n   基于java的持久层框架，包括SQL Maps和Data Access Objects（DAO）\n\n\n\n##  2. MyBatis特性：\n\n   - 支持定制化SQL、存储过程以及高级映射的优秀的持久层框架\n   - 避免了几乎所有的JDBC代码和手动设置参数以及获取结果集\n   - 可以使用简单的XML或注解用于配置和原始映射，将接口和JAVA的pojo映射成数据库中的记录\n   - 半自动的ORM框架\n\n\n\n## 3. 核心配置文件\n\n```xml\n<configuration>\n       <!--\n        MyBatis核心配置文件中，标签的顺序：\n        properties?,settings?,typeAliases?,typeHandlers?,\n        objectFactory?,objectWrapperFactory?,reflectorFactory?,\n        plugins?,environments?,databaseIdProvider?,mappers?\n    -->\n\n    <!--引入properties文件-->\n    <properties resource=\"jdbc.properties\" />\n\n    <!--设置类型别名-->\n    <typeAliases>\n        <!--\n            typeAlias：设置某个类型的别名\n            属性：\n            type：设置需要设置别名的类型\n            alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n            且不区分大小写\n        -->\n        <typeAlias type=\"com.learn.ssm.mybatis.pojo.User\" alias=\"User\"></typeAlias>\n        <!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写-->\n        <package name=\"com.learn.ssm.mybatis.pojo\"/>\n    </typeAliases>\n              \n<!--\n    environments：配置多个连接数据库的环境\n    属性：\n    default：设置默认使用的环境的id\n-->\n<environments default=\"development\">\n    <!--\n        environment：配置某个具体的环境\n        属性：\n        id：表示连接数据库的环境的唯一标识，不能重复\n    -->\n    <environment id=\"development\">\n        <!--\n            transactionManager：设置事务管理方式\n            属性：\n            type=\"JDBC|MANAGED\"\n            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事\n            务的提交或回滚需要手动处理\n            MANAGED：被管理，例如Spring\n        -->\n        <transactionManager type=\"JDBC\"/>\n        <!--\n            dataSource：配置数据源\n            属性：\n            type：设置数据源的类型\n            type=\"POOLED|UNPOOLED|JNDI\"\n            POOLED：表示使用数据库连接池缓存数据库连接\n            UNPOOLED：表示不使用数据库连接池\n            JNDI：表示使用上下文中的数据源\n        -->\n        <dataSource type=\"POOLED\">\n            <!--设置连接数据库的驱动-->\n            <property name=\"driver\" value=\"${jdbc.driver}\"/>\n            <!--设置连接数据库的连接地址-->\n            <property name=\"url\" value=\"${jdbc.url}\"/>\n            <!--设置连接数据库的用户名-->\n            <property name=\"username\" value=\"${jdbc.username}\"/>\n            <!--设置连接数据库的密码-->\n            <property name=\"password\" value=\"${jdbc.password}\"/>\n        </dataSource>\n    </environment>\n</environments>\n\n    <!--引入映射文件-->\n    <mappers>\n        <mapper resource=\"mappers/UserMapper.xml\"/>\n        <!--\n            以包为单位引入映射文件\n            要求：\n            1、mapper接口所在的包要和映射文件所在的包一致\n            2、mapper接口要和映射文件的名字一致\n        -->\n        <package name=\"com.learn.mybatis.mapper\"/>\n    </mappers>\n\n</configuration>\n```\n\n\n\n## 4. MyBatis映射文件\n\n   - ORM（Object Relationship  Mapping）：对象关系映射\n\n       - 对象：Java实体类对象\n       - 关系：关系型数据库\n       - 映射：二者对应关系\n\n   - 两个一致：\n\n       - mapper接口的全类名和映射文件的命名空间（namespace）一致\n       - mapper接口中方法名和映射文件中编写SQL的标签的id属性一致\n\n\n\n## 5. SqlSessionFactory\n\n```java\n// 获取核心配置文件的输入流\nInputStream r =  Resources.getResourceAsStream(\"mybatis-config.xml\");\n// 获取SqlSessionFactoryBuilder对象\nSqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n// 获取SqlSessionFactory对象\nSqlSessionFactory sqlSessionFactory =  sqlSessionFactoryBuilder.build(r);\n\n// 获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库对象\nSqlSession sqlSession = sqlSessionFactory.openSession();\n// 获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库对象\n// SqlSession sqlSession = sqlSessionFactory.openSession(true);\n// 获取UserMapper的代理实现类对象\nUserMapper mapper = sqlSession.getMapper(UserMapper.class);\n// 调用mapper接口中的方法，实现添加用户信息的功能\nint result = mapper.insertUser();\nSystem.out.println(\"结果：\" + result);\n// 提交事务\nsqlSession.commit();\n// 关闭SqlSession\nsqlSession.close();\n```\n\n\n\n## 6. 结果映射\n   - resultType：设置结果类型，即查询的数据要转换的java对象\n   - resultMap：自定义映射，处理多对一或一对多\n\n\n\n## 7. 获取参数值\n\n- ${}：本质是字符串拼接。若为字符串类型或日期类型，需要手动加单引号（批量删除时用，in (${ids})）\n- #{}：本质是占位符赋值。若为字符串类型或日期类型，自动加单引号。（常用）\n- arg0，arg1...param1,param2\n- 以map集合作为参数，根据key取值\n- 以实体类作为参数，根据字段名取值\n- @Param(\"key\")，根据key取值\n- @MapKey(\"id\")，把查询出的数据放在Map中，以id为键\n\n\n\n## 8. resultMap\n\n```xml\n<resultMap id=\"empAndDeptResultMap\" type=\"Emp\">\n    <id column=\"emp_id\" property=\"empId\"></id>\n    <result column=\"emp_name\" property=\"empName\"></result>\n    <result column=\"age\" property=\"age\"></result>\n    <result column=\"gender\" property=\"gender\"></result>\n    <!--多对一的处理-->\n    <association property=\"dept\" javaType=\"Dept\">\n        <id column=\"dept_id\" property=\"deptId\"></id>\n        <result column=\"dept_name\" property=\"deptName\"></result>\n    </association>\n</resultMap>\n    \n<resultMap id=\"deptAndEmpResultMap\" type=\"Dept\">\n    <id column=\"dept_id\" property=\"deptId\"></id>\n    <result column=\"dept_name\" property=\"deptName\"></result>\n    <!--一对多的处理-->\n    <collection property=\"emps\" ofType=\"Emp\">\n    \t<id column=\"emp_id\" property=\"empId\"></id>\n    \t<result column=\"emp_name\" property=\"empName\"></result>\n    \t<result column=\"age\" property=\"age\"></result>\n    \t<result column=\"gender\" property=\"gender\"></result>\n    </collection>\n</resultMap>\n```\n\n\n\n## 9. 动态SQL\n\n- if\n\n  ```xml\n  <select id=\"getEmpListByMoreTJ\" resultType=\"Emp\">\n      select * from t_emp where 1=1\n      <if test=\"ename != '' and ename != null\">\n      \tand ename = #{ename}\n      </if>\n      <if test=\"age != '' and age != null\">\n      \tand age = #{age}\n      </if>\n      <if test=\"sex != '' and sex != null\">\n      \tand sex = #{sex}\n      </if>\n  </select>\n  ```\n\n- where\n\n  若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字；若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉\n\n  ```xml\n  <select id=\"getEmpListByMoreTJ2\" resultType=\"Emp\">\n      select * from t_emp\n      <where>\n          <if test=\"ename != '' and ename != null\">\n              ename = #{ename}\n          </if>\n          <if test=\"age != '' and age != null\">\n              and age = #{age}\n          </if>\n          <if test=\"sex != '' and sex != null\">\n              and sex = #{sex}\n          </if>\n      </where>\n  </select>\n  ```\n\n- trim\n\n  trim用于去掉或添加标签中的内容 常用属性： prefix：在trim标签中的内容的前面添加某些内容 prefixOverrides：在trim标签中的内容的前面去掉某些内容 suffix：在trim标签中的内容的后面添加某些内容 suffixOverrides：在trim标签中的内容的后面去掉某些内容\n\n  ```xml\n  <select id=\"getEmpListByMoreTJ\" resultType=\"Emp\">\n      select * from t_emp\n      <trim prefix=\"where\" suffixOverrides=\"and\">\n          <if test=\"ename != '' and ename != null\">\n              ename = #{ename} and\n          </if>\n          <if test=\"age != '' and age != null\">\n              age = #{age} and\n          </if>\n          <if test=\"sex != '' and sex != null\">\n              sex = #{sex}\n          </if>\n      </trim>\n  </select>\n  ```\n\n- choose、when、 otherwise\n\n  ```xml\n  <select id=\"getEmpListByChoose\" resultType=\"Emp\">\n      select <include refid=\"empColumns\"></include> from t_emp\n      <where>\n          <choose>\n              <when test=\"ename != '' and ename != null\">\n              ename = #{ename}\n              </when>\n              <when test=\"age != '' and age != null\">\n              age = #{age}\n              </when>\n              <when test=\"sex != '' and sex != null\">\n              sex = #{sex}\n              </when>\n              <when test=\"email != '' and email != null\">\n              email = #{email}\n              </when>\n          </choose>\n      </where>\n  </select>\n  ```\n\n- foreach\n\n  ```xml\n  <insert id=\"insertMoreEmp\">\n  insert into t_emp values\n      <foreach collection=\"emps\" item=\"emp\" separator=\",\">\n      \t(null,#{emp.ename},#{emp.age},#{emp.sex},#{emp.email},null)\n      </foreach>\n  </insert>\n      \n  <delete id=\"deleteMoreByArray\">\n      delete from t_emp where\n      <foreach collection=\"eids\" item=\"eid\" separator=\"or\">\n      \teid = #{eid}\n      </foreach>\n  </delete>\n  \n  <delete id=\"deleteMoreByArray\">\n  \tdelete from t_emp where eid in\n  \t<foreach collection=\"eids\" item=\"eid\" separator=\",\" open=\"(\" close=\")\">\n  \t\t#{eid}\n  \t</foreach>\n  </delete>\n  ```\n\n\n\n## 10. 缓存\n\n1. 一级缓存\n\n   一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问 使一级缓存失效的四种情况： \n\n   - 不同的SqlSession对应不同的一级缓存\n\n   - 同一个SqlSession但是查询条件不同\n\n   - 同一个SqlSession两次查询期间执行了任何一次增删改操作\n\n   - 同一个SqlSession两次查询期间手动清空了缓存`sqlSession.clearCache()`\n\n2. 二级缓存\n\n   二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取 二级缓存开启的条件： \n\n   - 在核心配置文件中，设置全局配置属性cacheEnabled=\"true\"，默认为true，不需要设置\n   - 在映射文件中设置标签\n   - 二级缓存必须在SqlSession关闭或提交之后有效\n   - 查询的数据所转换的实体类类型必须实现序列化的接口 \n\n   使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效\n\n3. 缓存配置\n\n   在mapper配置文件中添加的cache标签可以设置一些属性： \n\n   - eviction属性：缓存回收策略，默认的是 LRU。 \n     - LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 \n     - FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 \n     - SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 \n     - WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 \n   - flushInterval属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新\n   - size属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出\n   - readOnly属性：只读， true/false true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重 要的性能优势。 false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。\n\n4. 缓存顺序\n\n   先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 如果二级缓存没有命中，再查询一级缓存 如果一级缓存也没有命中，则查询数据库。SqlSession关闭之后，一级缓存中的数据会写入二级缓存。\n\n\n\n## 11. 分页\n\n 1. 依赖\n\n    ```xml\n    <dependency>\n        <groupId>com.github.pagehelper</groupId>\n        <artifactId>pagehelper</artifactId>\n        <version>5.2.0</version>\n    </dependency>\n    ```\n\n 2. 配置分页插件\n\n    ```xml\n    <plugins>\n    \t<!--设置分页插件-->\n    \t<plugin interceptor=\"com.github.pagehelper.PageInterceptor\"></plugin>\n    </plugins>\n    ```\n\n 3. 使用分页插件\n\n    1. 在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能 \n\n       - pageNum：当前页的页码 \n       - pageSize：每页显示的条数\n\n    2. 在查询获取list集合之后，使用PageInfo pageInfo = new PageInfo<>(List list, int navigatePages)获取分页相关数据 \n\n       - list：分页之后的数据 \n       - navigatePages：导航分页的页码数\n\n    3. 分页相关数据 \n\n       ```json\n       PageInfo{ pageNum=8, pageSize=4, size=2, startRow=29, endRow=30, total=30, pages=8, list=Page{count=true, pageNum=8, pageSize=4, startRow=28, endRow=32, total=30, pages=8, reasonable=false, pageSizeZero=false}, prePage=7, nextPage=0, isFirstPage=false, isLastPage=true, hasPreviousPage=true, hasNextPage=false, navigatePages=5, navigateFirstPage4, navigateLastPage8, navigatepageNums=[4, 5, 6, 7, 8] }\n       ```\n\n       - pageNum：当前页的页码 \n       - pageSize：每页显示的条数\n       - size：当前页显示的真实条数 \n       - total：总记录数 \n       - pages：总页数 \n       - prePage：上一页的页码 \n       - nextPage：下一页的页码 \n       - isFirstPage/isLastPage：是否为第一页/最后一页 \n       - hasPreviousPage/hasNextPage：是否存在上一页/下一页 \n       - navigatePages：导航分页的页码数 \n       - navigatepageNums：导航分页的页码，[1,2,3,4,5]\n","slug":"ssm框架-MyBatis","published":1,"updated":"2022-08-25T11:53:31.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka1001b94waa4tsbian","content":"<h1 id=\"SSM框架-MyBatis\"><a href=\"#SSM框架-MyBatis\" class=\"headerlink\" title=\"SSM框架 - MyBatis\"></a>SSM框架 - MyBatis</h1><h2 id=\"1-描述：\"><a href=\"#1-描述：\" class=\"headerlink\" title=\"1. 描述：\"></a>1. 描述：</h2><p>   基于java的持久层框架，包括SQL Maps和Data Access Objects（DAO）</p>\n<h2 id=\"2-MyBatis特性：\"><a href=\"#2-MyBatis特性：\" class=\"headerlink\" title=\"2. MyBatis特性：\"></a>2. MyBatis特性：</h2><ul>\n<li>支持定制化SQL、存储过程以及高级映射的优秀的持久层框架</li>\n<li>避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li>\n<li>可以使用简单的XML或注解用于配置和原始映射，将接口和JAVA的pojo映射成数据库中的记录</li>\n<li>半自动的ORM框架</li>\n</ul>\n<h2 id=\"3-核心配置文件\"><a href=\"#3-核心配置文件\" class=\"headerlink\" title=\"3. 核心配置文件\"></a>3. 核心配置文件</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token comment\">&lt;!--\n        MyBatis核心配置文件中，标签的顺序：\n        properties?,settings?,typeAliases?,typeHandlers?,\n        objectFactory?,objectWrapperFactory?,reflectorFactory?,\n        plugins?,environments?,databaseIdProvider?,mappers?\n    --></span>\n\n    <span class=\"token comment\">&lt;!--引入properties文件--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token comment\">&lt;!--设置类型别名--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--\n            typeAlias：设置某个类型的别名\n            属性：\n            type：设置需要设置别名的类型\n            alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n            且不区分大小写\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.ssm.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAlias</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.ssm.mybatis.pojo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span>\n              \n<span class=\"token comment\">&lt;!--\n    environments：配置多个连接数据库的环境\n    属性：\n    default：设置默认使用的环境的id\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--\n        environment：配置某个具体的环境\n        属性：\n        id：表示连接数据库的环境的唯一标识，不能重复\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--\n            transactionManager：设置事务管理方式\n            属性：\n            type=\"JDBC|MANAGED\"\n            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事\n            务的提交或回滚需要手动处理\n            MANAGED：被管理，例如Spring\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\">&lt;!--\n            dataSource：配置数据源\n            属性：\n            type：设置数据源的类型\n            type=\"POOLED|UNPOOLED|JNDI\"\n            POOLED：表示使用数据库连接池缓存数据库连接\n            UNPOOLED：表示不使用数据库连接池\n            JNDI：表示使用上下文中的数据源\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的驱动--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的连接地址--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的用户名--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的密码--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!--引入映射文件--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mappers/UserMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\">&lt;!--\n            以包为单位引入映射文件\n            要求：\n            1、mapper接口所在的包要和映射文件所在的包一致\n            2、mapper接口要和映射文件的名字一致\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.mybatis.mapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-MyBatis映射文件\"><a href=\"#4-MyBatis映射文件\" class=\"headerlink\" title=\"4. MyBatis映射文件\"></a>4. MyBatis映射文件</h2><ul>\n<li><p>ORM（Object Relationship  Mapping）：对象关系映射</p>\n<ul>\n<li>对象：Java实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者对应关系</li>\n</ul>\n</li>\n<li><p>两个一致：</p>\n<ul>\n<li>mapper接口的全类名和映射文件的命名空间（namespace）一致</li>\n<li>mapper接口中方法名和映射文件中编写SQL的标签的id属性一致</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-SqlSessionFactory\"><a href=\"#5-SqlSessionFactory\" class=\"headerlink\" title=\"5. SqlSessionFactory\"></a>5. SqlSessionFactory</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取核心配置文件的输入流</span>\n<span class=\"token class-name\">InputStream</span> r <span class=\"token operator\">=</span>  <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取SqlSessionFactoryBuilder对象</span>\n<span class=\"token class-name\">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取SqlSessionFactory对象</span>\n<span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span>  sqlSessionFactoryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库对象</span>\n<span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库对象</span>\n<span class=\"token comment\">// SqlSession sqlSession = sqlSessionFactory.openSession(true);</span>\n<span class=\"token comment\">// 获取UserMapper的代理实现类对象</span>\n<span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 调用mapper接口中的方法，实现添加用户信息的功能</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 提交事务</span>\nsqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 关闭SqlSession</span>\nsqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"6-结果映射\"><a href=\"#6-结果映射\" class=\"headerlink\" title=\"6. 结果映射\"></a>6. 结果映射</h2><ul>\n<li>resultType：设置结果类型，即查询的数据要转换的java对象</li>\n<li>resultMap：自定义映射，处理多对一或一对多</li>\n</ul>\n<h2 id=\"7-获取参数值\"><a href=\"#7-获取参数值\" class=\"headerlink\" title=\"7. 获取参数值\"></a>7. 获取参数值</h2><ul>\n<li>${}：本质是字符串拼接。若为字符串类型或日期类型，需要手动加单引号（批量删除时用，in (${ids})）</li>\n<li>#{}：本质是占位符赋值。若为字符串类型或日期类型，自动加单引号。（常用）</li>\n<li>arg0，arg1…param1,param2</li>\n<li>以map集合作为参数，根据key取值</li>\n<li>以实体类作为参数，根据字段名取值</li>\n<li>@Param(“key”)，根据key取值</li>\n<li>@MapKey(“id”)，把查询出的数据放在Map中，以id为键</li>\n</ul>\n<h2 id=\"8-resultMap\"><a href=\"#8-resultMap\" class=\"headerlink\" title=\"8. resultMap\"></a>8. resultMap</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empAndDeptResultMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--多对一的处理--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>association</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dept<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>association</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptAndEmpResultMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dept<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--一对多的处理--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emps<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ofType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collection</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"9-动态SQL\"><a href=\"#9-动态SQL\" class=\"headerlink\" title=\"9. 动态SQL\"></a>9. 动态SQL</h2><ul>\n<li><p>if</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByMoreTJ<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select * from t_emp where 1=1\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \tand ename = #&#123;ename&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \tand age = #&#123;age&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \tand sex = #&#123;sex&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>where</p>\n<p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字；若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByMoreTJ2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select * from t_emp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            ename = #&#123;ename&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            and age = #&#123;age&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            and sex = #&#123;sex&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>trim</p>\n<p>trim用于去掉或添加标签中的内容 常用属性： prefix：在trim标签中的内容的前面添加某些内容 prefixOverrides：在trim标签中的内容的前面去掉某些内容 suffix：在trim标签中的内容的后面添加某些内容 suffixOverrides：在trim标签中的内容的后面去掉某些内容</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByMoreTJ<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select * from t_emp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>trim</span> <span class=\"token attr-name\">prefix</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>where<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">suffixOverrides</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>and<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            ename = #&#123;ename&#125; and\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            age = #&#123;age&#125; and\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            sex = #&#123;sex&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>trim</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>choose、when、 otherwise</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByChoose<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span> <span class=\"token attr-name\">refid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empColumns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">></span></span> from t_emp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>choose</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            ename = #&#123;ename&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            age = #&#123;age&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            sex = #&#123;sex&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and email != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            email = #&#123;email&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>choose</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>foreach</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertMoreEmp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\ninsert into t_emp values\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreach</span> <span class=\"token attr-name\">collection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emps<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">separator</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>,<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \t(null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreach</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteMoreByArray<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    delete from t_emp where\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreach</span> <span class=\"token attr-name\">collection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eids<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">separator</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>or<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \teid = #&#123;eid&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreach</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteMoreByArray<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\tdelete from t_emp where eid in\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreach</span> <span class=\"token attr-name\">collection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eids<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">separator</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>,<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">open</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">close</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t#&#123;eid&#125;\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreach</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"10-缓存\"><a href=\"#10-缓存\" class=\"headerlink\" title=\"10. 缓存\"></a>10. 缓存</h2><ol>\n<li><p>一级缓存</p>\n<p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问 使一级缓存失效的四种情况： </p>\n<ul>\n<li><p>不同的SqlSession对应不同的一级缓存</p>\n</li>\n<li><p>同一个SqlSession但是查询条件不同</p>\n</li>\n<li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p>\n</li>\n<li><p>同一个SqlSession两次查询期间手动清空了缓存<code>sqlSession.clearCache()</code></p>\n</li>\n</ul>\n</li>\n<li><p>二级缓存</p>\n<p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取 二级缓存开启的条件： </p>\n<ul>\n<li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li>\n<li>在映射文件中设置标签</li>\n<li>二级缓存必须在SqlSession关闭或提交之后有效</li>\n<li>查询的数据所转换的实体类类型必须实现序列化的接口 </li>\n</ul>\n<p>使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>\n</li>\n<li><p>缓存配置</p>\n<p>在mapper配置文件中添加的cache标签可以设置一些属性： </p>\n<ul>\n<li>eviction属性：缓存回收策略，默认的是 LRU。 <ul>\n<li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 </li>\n<li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 </li>\n<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 </li>\n<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 </li>\n</ul>\n</li>\n<li>flushInterval属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li>\n<li>size属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>\n<li>readOnly属性：只读， true/false true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重 要的性能优势。 false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li>\n</ul>\n</li>\n<li><p>缓存顺序</p>\n<p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 如果二级缓存没有命中，再查询一级缓存 如果一级缓存也没有命中，则查询数据库。SqlSession关闭之后，一级缓存中的数据会写入二级缓存。</p>\n</li>\n</ol>\n<h2 id=\"11-分页\"><a href=\"#11-分页\" class=\"headerlink\" title=\"11. 分页\"></a>11. 分页</h2><ol>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置分页插件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--设置分页插件--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span> <span class=\"token attr-name\">interceptor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.github.pagehelper.PageInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用分页插件</p>\n<ol>\n<li><p>在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能 </p>\n<ul>\n<li>pageNum：当前页的页码 </li>\n<li>pageSize：每页显示的条数</li>\n</ul>\n</li>\n<li><p>在查询获取list集合之后，使用PageInfo pageInfo = new PageInfo&lt;&gt;(List list, int navigatePages)获取分页相关数据 </p>\n<ul>\n<li>list：分页之后的数据 </li>\n<li>navigatePages：导航分页的页码数</li>\n</ul>\n</li>\n<li><p>分页相关数据 </p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PageInfo<span class=\"token punctuation\">&#123;</span> pageNum=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> pageSize=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> size=<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> startRow=<span class=\"token number\">29</span><span class=\"token punctuation\">,</span> endRow=<span class=\"token number\">30</span><span class=\"token punctuation\">,</span> total=<span class=\"token number\">30</span><span class=\"token punctuation\">,</span> pages=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> list=Page<span class=\"token punctuation\">&#123;</span>count=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> pageNum=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> pageSize=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> startRow=<span class=\"token number\">28</span><span class=\"token punctuation\">,</span> endRow=<span class=\"token number\">32</span><span class=\"token punctuation\">,</span> total=<span class=\"token number\">30</span><span class=\"token punctuation\">,</span> pages=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> reasonable=<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> pageSizeZero=<span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> prePage=<span class=\"token number\">7</span><span class=\"token punctuation\">,</span> nextPage=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isFirstPage=<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isLastPage=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> hasPreviousPage=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> hasNextPage=<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> navigatePages=<span class=\"token number\">5</span><span class=\"token punctuation\">,</span> navigateFirstPage4<span class=\"token punctuation\">,</span> navigateLastPage8<span class=\"token punctuation\">,</span> navigatepageNums=<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>pageNum：当前页的页码 </li>\n<li>pageSize：每页显示的条数</li>\n<li>size：当前页显示的真实条数 </li>\n<li>total：总记录数 </li>\n<li>pages：总页数 </li>\n<li>prePage：上一页的页码 </li>\n<li>nextPage：下一页的页码 </li>\n<li>isFirstPage/isLastPage：是否为第一页/最后一页 </li>\n<li>hasPreviousPage/hasNextPage：是否存在上一页/下一页 </li>\n<li>navigatePages：导航分页的页码数 </li>\n<li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SSM框架-MyBatis\"><a href=\"#SSM框架-MyBatis\" class=\"headerlink\" title=\"SSM框架 - MyBatis\"></a>SSM框架 - MyBatis</h1><h2 id=\"1-描述：\"><a href=\"#1-描述：\" class=\"headerlink\" title=\"1. 描述：\"></a>1. 描述：</h2><p>   基于java的持久层框架，包括SQL Maps和Data Access Objects（DAO）</p>\n<h2 id=\"2-MyBatis特性：\"><a href=\"#2-MyBatis特性：\" class=\"headerlink\" title=\"2. MyBatis特性：\"></a>2. MyBatis特性：</h2><ul>\n<li>支持定制化SQL、存储过程以及高级映射的优秀的持久层框架</li>\n<li>避免了几乎所有的JDBC代码和手动设置参数以及获取结果集</li>\n<li>可以使用简单的XML或注解用于配置和原始映射，将接口和JAVA的pojo映射成数据库中的记录</li>\n<li>半自动的ORM框架</li>\n</ul>\n<h2 id=\"3-核心配置文件\"><a href=\"#3-核心配置文件\" class=\"headerlink\" title=\"3. 核心配置文件\"></a>3. 核心配置文件</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token comment\">&lt;!--\n        MyBatis核心配置文件中，标签的顺序：\n        properties?,settings?,typeAliases?,typeHandlers?,\n        objectFactory?,objectWrapperFactory?,reflectorFactory?,\n        plugins?,environments?,databaseIdProvider?,mappers?\n    --></span>\n\n    <span class=\"token comment\">&lt;!--引入properties文件--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token comment\">&lt;!--设置类型别名--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--\n            typeAlias：设置某个类型的别名\n            属性：\n            type：设置需要设置别名的类型\n            alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名\n            且不区分大小写\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.ssm.mybatis.pojo.User<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAlias</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.ssm.mybatis.pojo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span>\n              \n<span class=\"token comment\">&lt;!--\n    environments：配置多个连接数据库的环境\n    属性：\n    default：设置默认使用的环境的id\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--\n        environment：配置某个具体的环境\n        属性：\n        id：表示连接数据库的环境的唯一标识，不能重复\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!--\n            transactionManager：设置事务管理方式\n            属性：\n            type=\"JDBC|MANAGED\"\n            JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事\n            务的提交或回滚需要手动处理\n            MANAGED：被管理，例如Spring\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\">&lt;!--\n            dataSource：配置数据源\n            属性：\n            type：设置数据源的类型\n            type=\"POOLED|UNPOOLED|JNDI\"\n            POOLED：表示使用数据库连接池缓存数据库连接\n            UNPOOLED：表示不使用数据库连接池\n            JNDI：表示使用上下文中的数据源\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的驱动--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的连接地址--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的用户名--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token comment\">&lt;!--设置连接数据库的密码--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!--引入映射文件--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mappers/UserMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\">&lt;!--\n            以包为单位引入映射文件\n            要求：\n            1、mapper接口所在的包要和映射文件所在的包一致\n            2、mapper接口要和映射文件的名字一致\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.mybatis.mapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-MyBatis映射文件\"><a href=\"#4-MyBatis映射文件\" class=\"headerlink\" title=\"4. MyBatis映射文件\"></a>4. MyBatis映射文件</h2><ul>\n<li><p>ORM（Object Relationship  Mapping）：对象关系映射</p>\n<ul>\n<li>对象：Java实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者对应关系</li>\n</ul>\n</li>\n<li><p>两个一致：</p>\n<ul>\n<li>mapper接口的全类名和映射文件的命名空间（namespace）一致</li>\n<li>mapper接口中方法名和映射文件中编写SQL的标签的id属性一致</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-SqlSessionFactory\"><a href=\"#5-SqlSessionFactory\" class=\"headerlink\" title=\"5. SqlSessionFactory\"></a>5. SqlSessionFactory</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取核心配置文件的输入流</span>\n<span class=\"token class-name\">InputStream</span> r <span class=\"token operator\">=</span>  <span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取SqlSessionFactoryBuilder对象</span>\n<span class=\"token class-name\">SqlSessionFactoryBuilder</span> sqlSessionFactoryBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取SqlSessionFactory对象</span>\n<span class=\"token class-name\">SqlSessionFactory</span> sqlSessionFactory <span class=\"token operator\">=</span>  sqlSessionFactoryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取sql的会话对象SqlSession(不会自动提交事务)，是MyBatis提供的操作数据库对象</span>\n<span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> sqlSessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取sql的会话对象SqlSession(会自动提交事务)，是MyBatis提供的操作数据库对象</span>\n<span class=\"token comment\">// SqlSession sqlSession = sqlSessionFactory.openSession(true);</span>\n<span class=\"token comment\">// 获取UserMapper的代理实现类对象</span>\n<span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 调用mapper接口中的方法，实现添加用户信息的功能</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 提交事务</span>\nsqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 关闭SqlSession</span>\nsqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"6-结果映射\"><a href=\"#6-结果映射\" class=\"headerlink\" title=\"6. 结果映射\"></a>6. 结果映射</h2><ul>\n<li>resultType：设置结果类型，即查询的数据要转换的java对象</li>\n<li>resultMap：自定义映射，处理多对一或一对多</li>\n</ul>\n<h2 id=\"7-获取参数值\"><a href=\"#7-获取参数值\" class=\"headerlink\" title=\"7. 获取参数值\"></a>7. 获取参数值</h2><ul>\n<li>${}：本质是字符串拼接。若为字符串类型或日期类型，需要手动加单引号（批量删除时用，in (${ids})）</li>\n<li>#{}：本质是占位符赋值。若为字符串类型或日期类型，自动加单引号。（常用）</li>\n<li>arg0，arg1…param1,param2</li>\n<li>以map集合作为参数，根据key取值</li>\n<li>以实体类作为参数，根据字段名取值</li>\n<li>@Param(“key”)，根据key取值</li>\n<li>@MapKey(“id”)，把查询出的数据放在Map中，以id为键</li>\n</ul>\n<h2 id=\"8-resultMap\"><a href=\"#8-resultMap\" class=\"headerlink\" title=\"8. resultMap\"></a>8. resultMap</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empAndDeptResultMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--多对一的处理--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>association</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dept<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>association</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptAndEmpResultMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Dept<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dept_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deptName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--一对多的处理--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emps<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ofType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>result</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collection</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"9-动态SQL\"><a href=\"#9-动态SQL\" class=\"headerlink\" title=\"9. 动态SQL\"></a>9. 动态SQL</h2><ul>\n<li><p>if</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByMoreTJ<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select * from t_emp where 1=1\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \tand ename = #&#123;ename&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \tand age = #&#123;age&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \tand sex = #&#123;sex&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>where</p>\n<p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字；若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByMoreTJ2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select * from t_emp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            ename = #&#123;ename&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            and age = #&#123;age&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            and sex = #&#123;sex&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>trim</p>\n<p>trim用于去掉或添加标签中的内容 常用属性： prefix：在trim标签中的内容的前面添加某些内容 prefixOverrides：在trim标签中的内容的前面去掉某些内容 suffix：在trim标签中的内容的后面添加某些内容 suffixOverrides：在trim标签中的内容的后面去掉某些内容</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByMoreTJ<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select * from t_emp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>trim</span> <span class=\"token attr-name\">prefix</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>where<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">suffixOverrides</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>and<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            ename = #&#123;ename&#125; and\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            age = #&#123;age&#125; and\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>if</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            sex = #&#123;sex&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>if</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>trim</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>choose、when、 otherwise</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getEmpListByChoose<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Emp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    select <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>include</span> <span class=\"token attr-name\">refid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>empColumns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>include</span><span class=\"token punctuation\">></span></span> from t_emp\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>where</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>choose</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ename != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and ename != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            ename = #&#123;ename&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and age != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            age = #&#123;age&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and sex != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            sex = #&#123;sex&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>when</span> <span class=\"token attr-name\">test</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email != <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> and email != null<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            email = #&#123;email&#125;\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>when</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>choose</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>where</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>foreach</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>insertMoreEmp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\ninsert into t_emp values\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreach</span> <span class=\"token attr-name\">collection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emps<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">separator</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>,<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \t(null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreach</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteMoreByArray<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    delete from t_emp where\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreach</span> <span class=\"token attr-name\">collection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eids<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">separator</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>or<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \teid = #&#123;eid&#125;\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreach</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>delete</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteMoreByArray<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\tdelete from t_emp where eid in\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreach</span> <span class=\"token attr-name\">collection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eids<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">item</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">separator</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>,<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">open</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">close</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t#&#123;eid&#125;\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreach</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>delete</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"10-缓存\"><a href=\"#10-缓存\" class=\"headerlink\" title=\"10. 缓存\"></a>10. 缓存</h2><ol>\n<li><p>一级缓存</p>\n<p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问 使一级缓存失效的四种情况： </p>\n<ul>\n<li><p>不同的SqlSession对应不同的一级缓存</p>\n</li>\n<li><p>同一个SqlSession但是查询条件不同</p>\n</li>\n<li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p>\n</li>\n<li><p>同一个SqlSession两次查询期间手动清空了缓存<code>sqlSession.clearCache()</code></p>\n</li>\n</ul>\n</li>\n<li><p>二级缓存</p>\n<p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取 二级缓存开启的条件： </p>\n<ul>\n<li>在核心配置文件中，设置全局配置属性cacheEnabled=”true”，默认为true，不需要设置</li>\n<li>在映射文件中设置标签</li>\n<li>二级缓存必须在SqlSession关闭或提交之后有效</li>\n<li>查询的数据所转换的实体类类型必须实现序列化的接口 </li>\n</ul>\n<p>使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>\n</li>\n<li><p>缓存配置</p>\n<p>在mapper配置文件中添加的cache标签可以设置一些属性： </p>\n<ul>\n<li>eviction属性：缓存回收策略，默认的是 LRU。 <ul>\n<li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 </li>\n<li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 </li>\n<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 </li>\n<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 </li>\n</ul>\n</li>\n<li>flushInterval属性：刷新间隔，单位毫秒 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li>\n<li>size属性：引用数目，正整数 代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>\n<li>readOnly属性：只读， true/false true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重 要的性能优势。 false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</li>\n</ul>\n</li>\n<li><p>缓存顺序</p>\n<p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 如果二级缓存没有命中，再查询一级缓存 如果一级缓存也没有命中，则查询数据库。SqlSession关闭之后，一级缓存中的数据会写入二级缓存。</p>\n</li>\n</ol>\n<h2 id=\"11-分页\"><a href=\"#11-分页\" class=\"headerlink\" title=\"11. 分页\"></a>11. 分页</h2><ol>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>pagehelper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置分页插件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--设置分页插件--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span> <span class=\"token attr-name\">interceptor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.github.pagehelper.PageInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用分页插件</p>\n<ol>\n<li><p>在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能 </p>\n<ul>\n<li>pageNum：当前页的页码 </li>\n<li>pageSize：每页显示的条数</li>\n</ul>\n</li>\n<li><p>在查询获取list集合之后，使用PageInfo pageInfo = new PageInfo&lt;&gt;(List list, int navigatePages)获取分页相关数据 </p>\n<ul>\n<li>list：分页之后的数据 </li>\n<li>navigatePages：导航分页的页码数</li>\n</ul>\n</li>\n<li><p>分页相关数据 </p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">PageInfo<span class=\"token punctuation\">&#123;</span> pageNum=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> pageSize=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> size=<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> startRow=<span class=\"token number\">29</span><span class=\"token punctuation\">,</span> endRow=<span class=\"token number\">30</span><span class=\"token punctuation\">,</span> total=<span class=\"token number\">30</span><span class=\"token punctuation\">,</span> pages=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> list=Page<span class=\"token punctuation\">&#123;</span>count=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> pageNum=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> pageSize=<span class=\"token number\">4</span><span class=\"token punctuation\">,</span> startRow=<span class=\"token number\">28</span><span class=\"token punctuation\">,</span> endRow=<span class=\"token number\">32</span><span class=\"token punctuation\">,</span> total=<span class=\"token number\">30</span><span class=\"token punctuation\">,</span> pages=<span class=\"token number\">8</span><span class=\"token punctuation\">,</span> reasonable=<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> pageSizeZero=<span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> prePage=<span class=\"token number\">7</span><span class=\"token punctuation\">,</span> nextPage=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> isFirstPage=<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> isLastPage=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> hasPreviousPage=<span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> hasNextPage=<span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> navigatePages=<span class=\"token number\">5</span><span class=\"token punctuation\">,</span> navigateFirstPage4<span class=\"token punctuation\">,</span> navigateLastPage8<span class=\"token punctuation\">,</span> navigatepageNums=<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>pageNum：当前页的页码 </li>\n<li>pageSize：每页显示的条数</li>\n<li>size：当前页显示的真实条数 </li>\n<li>total：总记录数 </li>\n<li>pages：总页数 </li>\n<li>prePage：上一页的页码 </li>\n<li>nextPage：下一页的页码 </li>\n<li>isFirstPage/isLastPage：是否为第一页/最后一页 </li>\n<li>hasPreviousPage/hasNextPage：是否存在上一页/下一页 </li>\n<li>navigatePages：导航分页的页码数 </li>\n<li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"linux shell脚本报错","date":"2019-01-08T03:26:57.000Z","_content":"shell脚本报错 “syntax error near unexpected token `fi'”\n\n1.cat -v mysqlmonitor.sh命令查看代码\n2.linux里面查看后自动在换行符后面带上了^M的标识\n3.用vim打开文件，在命令行模式下输入:set ff=unix\n","source":"_posts/shell脚本报错.md","raw":"---\ntitle: linux shell脚本报错\ndate: 2019-01-08 11:26:57\ntags: Linux\ncategories: 问题记录\n---\nshell脚本报错 “syntax error near unexpected token `fi'”\n\n1.cat -v mysqlmonitor.sh命令查看代码\n2.linux里面查看后自动在换行符后面带上了^M的标识\n3.用vim打开文件，在命令行模式下输入:set ff=unix\n","slug":"shell脚本报错","published":1,"updated":"2022-07-28T03:25:51.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka1001e94wa9qhdeuei","content":"<p>shell脚本报错 “syntax error near unexpected token `fi’”</p>\n<p>1.cat -v mysqlmonitor.sh命令查看代码<br>2.linux里面查看后自动在换行符后面带上了^M的标识<br>3.用vim打开文件，在命令行模式下输入:set ff=unix</p>\n","site":{"data":{}},"excerpt":"","more":"<p>shell脚本报错 “syntax error near unexpected token `fi’”</p>\n<p>1.cat -v mysqlmonitor.sh命令查看代码<br>2.linux里面查看后自动在换行符后面带上了^M的标识<br>3.用vim打开文件，在命令行模式下输入:set ff=unix</p>\n"},{"title":"SSM框架 - Spring","date":"2020-10-02T08:56:33.000Z","_content":"\n# Spring\n\n## 1. 描述\n\n   轻量级框架。创建性能良好、易于测试、可重用的代码\n\n\n\n## 2. Spring Framework\n\n 1. 特性：\n\n    - 非侵入性\n\n      对应用程序本身的结构侵入性较小\n\n    - 控制反转IOC（Invension Of Control）\n\n      翻转资源获取方向。把自己创建资源、向环境索取资源转变为环境将资源准备好，我们享受资源注入\n\n    - 面向切面编程AOP （Aspect Oriented Programming）\n\n      在不修改源代码的基础下增强代码功能\n\n    - 容器\n\n      Spring IOC是一个容器，包含并且管理组件对象的生命周期。组件享受容器的管理，屏蔽了组件创建过程中的大量细节，降低了使用门槛，提高开发效率\n\n    - 组件化\n\n      使用简单的组件配置组合成一个最复杂的应用。在Spring中可以使用XML和Java注解组合这些对象\n\n    - 声明式\n\n      声明需求即可由框架实现\n\n    - 一站式\n\n      在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库\n\n 2. 功能模块\n\n    - Core Container\n\n      核心容器。在Spring环境下使用任何功能必须基于IOC容器\n\n    - AOP Aspects\n\n      面向切面编程\n\n    - Testing\n\n      提供了对junit或TestNG测试框架的整合\n\n    - Data Access/Integration\n\n      提供了对数据访问/集成的功能\n\n    - Spring MVC\n\n      提供了面向Web应用程序的集成功能\n\n\n\n## 3. IOC\n\n1. 思想：\n\n   反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。\n\n2. DI （Dependency Injection）：依赖注入\n\n   组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。DI 是对 IOC 的一种具体实现。\n\n\n\n## 4. 两种实现方式\n\n- BeanFactory： 这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。\n\n- ApplicationContext： BeanFactory的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。\n\n  - ApplicationContext的主要实现类：\n\n    - ClassPathXmlApplicationContext \n\n      通过读取类路径下的 XML 格式的配置文件创建 IOC 容器 对象\n\n    - FileSystemXmlApplicationContext\n\n      通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象\n\n    - ConfigurableApplicationContext\n\n      ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力\n\n    - WebApplicationContext\n\n      专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中\n\n\n\n## 5. 管理Bean\n\n 1. Bean作用域（scope属性）\n\n    - singleton（默认） 单例，IOC容器初始化时创建对象\n    - prototype 多例，获取bean时创建对象\n\n    WebApplicationContext环境下额外的作用域（不常用）：\n\n    - request 在一个请求范围内有效\n    - session 在一个会话范围内有效\n\n 2. 生命周期\n\n    1. bean对象创建，实例化（调用无参构造器）\n\n    2. 给bean对象设置属性，依赖注入\n\n    3. bean对象初始化之前操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）\n\n       bean后置处理器不是单独针对某一个bean生效，而是针对IOC容 器中所有bean都会执行\n\n       ```xml\n       <!-- bean的后置处理器要放入IOC容器才能生效 -->\n       <bean id=\"myBeanProcessor\" class=\"com.atguigu.spring.process.MyBeanProcessor\"/>\n       ```\n\n       ```java\n       public class MyBeanProcessor implements BeanPostProcessor {\n           @Override\n           public Object postProcessBeforeInitialization(Object bean, String beanName)\n           throws BeansException {\n               System.out.println(\"☆☆☆\" + beanName + \" = \" + bean);\n               return bean;\n           }\n           @Override\n           public Object postProcessAfterInitialization(Object bean, String beanName)\n           throws BeansException {\n               System.out.println(\"★★★\" + beanName + \" = \" + bean);\n               return bean;\n           }\n       }\n       ```\n\n    4. bean对象初始化（需在配置bean时指定初始化方法 init-method=\"initMethod\"）\n\n    5. bean对象初始化之后操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）\n\n    6. bean对象就绪可以使用\n\n    7. bean对象销毁（需在配置bean时指定销毁方法 destroy-method=\"destroyMethod\"）\n\n    8. IOC容器关闭\n\n 3. 基于xml\n\n    - 依赖\n\n      {% asset_img image-1.png %}\n\n    - resources/applicationContext.xml\n\n      ```xml\n      <beans xmlns=\"http://www.springframework.org/schema/beans\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n      \n          <!--\n              配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理\n              通过bean标签配置IOC容器所管理的bean\n              属性：\n              id：设置bean的唯一标识\n              class：设置bean所对应类型的全类名，默认无参构造\n          -->\n          <bean id=\"helloworld\" class=\"com.learn.ssm.pojo.HelloWorld\"></bean>\n      </beans>\n      ```\n\n    - 获取ioc及bean对象\n\n      ```java\n      // 获取ioc容器\n      ApplicationContext ioc = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n      // 获取ioc容器的bean（方式1）\n      HelloWorld bean = (HelloWorld) ioc.getBean(\"helloworld\");\n      // 【常用】获取ioc容器的bean（方式2）要求IOC容器中指定类型的bean有且只能有一个\n      HelloWorld bean = ac.getBean(HelloWorld.class);\n      // 获取ioc容器的bean（方式3）\n      HelloWorld bean = ac.getBean(\"helloworld\", HelloWorld.class);\n      bean.learnSpring();\n      ```\n\n    - 创建对象（利用反射及工厂模式）\n\n      一个bean对应一个对象（单例），接口不能\n\n      {% asset_img image-2.png %}\n\n      \n\n      {% asset_img image-3.png %}\n\n    - 依赖注入\n\n      - setter注入\n\n        ```xml\n        <bean id=\"peopleOne\" class=\"com.learn.spring.pojo.People\">\n            <!--通过成员变量的set方法赋值-->\n            <property name=\"id\" value=\"1\"></property>\n            <property name=\"name\" value=\"Tom\"></property>\n            <property name=\"age\"><null/></property>\n            <!--类类型方法一：引用外部bean-->\n            <property name=\"clazz\" ref=\"clazzOne\"></property>\n            <!--类类型方法二：级联-->\n            <property name=\"clazz.name\" value=\"clazzTwo\"></property>\n            <!--类类型方法三：内部bean-->\n            <property name=\"clazz\">\n                <bean id=\"clazzThree\" class=\"com.learn.spring.pojo.Clazz\">\n                    <!--通过成员变量的set方法赋值-->\n                    <property name=\"id\" value=\"1\"></property>\n                    <property name=\"name\" value=\"clazzOne\"></property>\n                </bean>\n            </property>\n            <property name=\"array\">\n                <array>1</array>\n                <array>2</array>\n            </property>\n        </bean>\n        <bean id=\"clazzOne\" class=\"com.learn.spring.pojo.Clazz\">\n            <!--通过成员变量的set方法赋值-->\n            <property name=\"id\" value=\"1\"></property>\n            <property name=\"name\" value=\"clazzOne\"></property>\n            <!--List类型方法一-->\n            <property name=\"People\">\n                <list>\n                    <!--<value></value> -->\n                    <ref bean=\"peopleOne\"></ref>\n                    <ref bean=\"peopleTwo\"></ref>\n                </list>\n            </property>\n            <!--List类型方法二-->\n        \t<property name=\"People\" ref=\"listBean\"></property>\n            <!--Map类型方法一-->\n            <property name=\"People\">\n                <map>\n                    <entry key=\"key1\" value-ref=\"peopleOne\"></entry>\n                    <entry key=\"key2\" value-ref=\"peopleTwo\"></entry>\n                </map>\n            </property>\n            <!--List类型方法二-->\n        \t<property name=\"People\" ref=\"listBean\"></property>\n            <!--Map类型方法二-->\n        \t<property name=\"People\" ref=\"mapBean\"></property>\n        </bean>\n        \n        <!--配置集合类型的bean，需要util约束-->\n        <util:list id=\"listBean\">\n            <ref bean=\"peopleOne\"></ref>\n            <ref bean=\"peopleTwo\"></ref>\n        </util:list>\n        \n        <!--配置集合类型的bean，需要util约束-->\n        <util:list id=\"mapBean\">\n            <entry key=\"key1\" value-ref=\"peopleOne\"></entry>\n            <entry key=\"key2\" value-ref=\"peopleTwo\"></entry>\n        </util:list>\n        \n        <!--命名空间赋值-->\n        <bean id=\"peopleOne\" class=\"com.learn.spring.pojo.People\" p:id=\"2\" p:name=\"Sam\" p:mapBean-ref=\"mapBean\">\n        ```\n\n      - 构造器注入\n\n        ```xml\n        <bean id=\"peopleTwo\" class=\"com.learn.spring.pojo.People\">\n            <!--通过有参构造器赋值，只有一个构造器按顺序填参数-->\n            <constructor-arg value=\"2\"></constructor-arg>\n            <constructor-arg value=\"&lt;Jerry&gt;\"></constructor-arg>\n            <constructor-arg value=\"10\" name=\"age\"></constructor-arg>\n        </bean>\n        ```\n\n      - 管理数据源\n\n        ```xml\n        <!-- MySQL驱动 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.16</version>\n        </dependency>\n        <!-- 数据源 -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.31</version>\n        </dependency>\n        ```\n\n        ```xml\n        <!-- 引入外部属性文件 -->\n        <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n        \n        <bean id=\"druidDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n            <property name=\"url\" value=\"${jdbc.url}\"/>\n            <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n            <property name=\"username\" value=\"${jdbc.user}\"/>\n            <property name=\"password\" value=\"${jdbc.password}\"/>\n        </bean>\n        ```\n\n    - FactoryBean\n\n      配置一个 FactoryBean类型的实现类bean，在获取bean的时候得到的并不是class属性中配置的实现类的对象，而是 getObject()方法的返回值（交给ioc管理）。通过这种机制，Spring可以把复杂组件创建的详细过程和繁琐细节都屏蔽起来\n      \n      ```java\n      public class UserFactoryBean implements FactoryBean<User> {\n          @Override\n          public User getObject() throws Exception {\n              return new User();\n          }\n          @Override\n          public Class<?> getObjectType() {\n          \treturn User.class;\n          }\n      }\n      \n      @Test\n      public void testUserFactoryBean(){\n      \t//获取IOC容器\n      \tApplicationContext ac = new ClassPathXmlApplicationContext(\"spring-factorybean.xml\");\n          User user = (User) ac.getBean(\"user\");\n          System.out.println(user);\n      }\n      ```\n      \n      ```xml\n      <bean id=\"user\" class=\"com.atguigu.bean.UserFactoryBean\"></bean>\n      ```\n\n    - 基于xml的自动装配\n\n      autowire，根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的**类类型或接口类型**属性赋值\n\n      - byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值 若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null 若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException\n      - byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值\n\n 4. 基于注解\n\n    类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。 自定义bean的id 可通过标识组件的注解的value属性设置自定义的bean的id\n\n    - @Component：将类标识为普通组件 \n\n    - @Controller：将类标识为控制层组件 \n\n    - @Service：将类标识为业务层组件 \n\n    - @Repository：将类标识为持久层组件\n\n    ```xml\n    <context:component-scan base-package=\"包名\" use-default-filters=\"false\">\n    <!-- context:exclude-filter标签：指定排除规则 -->\n    <!--\n    type：设置排除或包含的依据\n    type=\"annotation\"，根据注解排除，expression中设置要排除的注解的全类名\n    type=\"assignable\"，根据类型排除，expression中设置要排除的类型的全类名\n    -->\n    <context:exclude-filter type=\"annotation\"\n    expression=\"org.springframework.stereotype.Controller\"/>\n    <!--<context:exclude-filter type=\"assignable\"\n    expression=\"全类名\"/>-->\n    \n        \n    <!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 -->\n    <!-- use-default-filters属性：取值false表示关闭默认扫描规则 -->\n    <!-- 此时必须设置use-default-filters=\"false\"，因为默认规则即扫描指定包下所有类 -->\n    <!--\n        type：设置排除或包含的依据\n        type=\"annotation\"，根据注解指定，expression中设置要指定的注解的全类名\n        type=\"assignable\"，根据类型指定，expression中设置要指定的类型的全类名\n    -->\n    <context:include-filter type=\"annotation\"\n    expression=\"org.springframework.stereotype.Controller\"/>\n        <!--<context:include-filter type=\"assignable\"\n        expression=\"全类名\"/>-->\n    </context:component-scan>\n    ```\n\n- 自动装配\n\n  - @Autowired，不需要提供setXxx()方法，可以标记在成员变量、构造器和set方法上\n\n  - 工作流程\n\n    首先根据所需要的组件类型到IOC容器中查找 \n\n    - 能够找到唯一的bean：直接执行装配 \n    - 如果完全找不到匹配这个类型的bean：装配失败 \n    - 和所需类型匹配的bean不止一个 \n    - 没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配 \n      - 能够找到：执行装配 \n      - 找不到：装配失败 \n    - 使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配 \n      - 能够找到：执行装配 \n      - 找不到：装配失败\n\n\n\n## 6. AOP\n\n 1. 描述：\n\n    AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术。本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。\n\n 2. 相关概念\n\n    - Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；封装通知方法的类。\n    - Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；向目标对象应用通知之后创建的代理对象。\n    - Pointcut：切入点，即一组连接点的集合；每个类的方法中都包含多个连接点，\n    - Advice：增强，指特定连接点上执行的动作；\n    - Introduction：引介，指为一个已有的Java对象动态地增加新的接口；\n    - Weaving：织入，指将切面整合到程序的执行流程中；\n    - Interceptor：拦截器，是一种实现增强的方式；\n    - Target Object：目标对象，即真正执行业务的核心逻辑对象；被代理的目标对象。\n    - AOP Proxy：AOP代理，是客户端持有的增强后的对象引用；向目标对象应用通知之后创建的代理对象。\n\n 3. 作用：\n\n    - 简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。 \n    - 代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。\n\n 4. 基于注解的AOP\n\n    1. 说明\n\n       - 动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口。 \n\n       - cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口。 \n\n       - AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。\n         - @Aspect 将当前组件表示为切面\n         - @Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；\n         - @After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；\n         - @AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；\n         - @AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；\n         - @Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。\n\n    2. 依赖\n\n       ```xml\n       <dependency>\n           <groupId>org.springframework</groupId>\n           <artifactId>spring-aspects</artifactId>\n           <version>${spring.version}</version>\n       </dependency>\n       ```\n\n    3. 配置文件\n\n       ```xml\n       <!--\n           基于注解的AOP的实现：\n           1、将目标对象和切面交给IOC容器管理（注解+扫描）\n           2、开启AspectJ的自动代理，为目标对象自动生成代理\n           3、将切面类通过注解@Aspect标识\n       -->\n       <context:component-scan base-package=\"包名\">\n       </context:component-scan>\n       <aop:aspectj-autoproxy />\n       ```\n\n    4. 切入点执行语法\n\n       {% asset_img image-4.png %}\n\n    5. 获取信息\n\n       - 获取连接点信息\n\n         ```java\n         @Before(\"execution(public int com.aop.annotation.TestImpl.*(..))\") \n         public void beforeMethod(JoinPoint joinPoint){ \n             //获取连接点的声明信息 \n             String methodName = joinPoint.getSignature().getName(); \n             //获取目标方法到的实参信息 \n             String args = Arrays.toString(joinPoint.getArgs()); \n             System.out.println(\"Logger-->前置通知，方法名：\"+methodName+\"，参数：\"+args); \n         }\n         ```\n\n       - 获取目标方法返回值\n\n         ```java\n         @AfterReturning(value = \"execution(* com.aop.annotation.TestImpl.*(..))\", returning = \"result\")\n         public void afterReturningMethod(JoinPoint joinPoint, Object result){\n             String methodName = joinPoint.getSignature().getName();\n             System.out.println(\"Logger-->返回通知，方法名：\"+methodName+\"，结果：\"+result);\n         }\n         ```\n\n       - 获取目标方法的异常\n\n         ```java\n         @AfterThrowing(value = \"execution(* com.aop.annotation.TestImpl.*(..))\", throwing = \"ex\")\n         public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex){\n             String methodName = joinPoint.getSignature().getName();\n             System.out.println(\"Logger-->异常通知，方法名：\"+methodName+\"，异常：\"+ex);\n         }\n         ```\n\n    6. @Around\n\n       ```java\n       @Around(\"execution(* com.aop.annotation.TestImpl.*(..))\")\n       public Object aroundMethod(ProceedingJoinPoint joinPoint){\n           String methodName = joinPoint.getSignature().getName();\n           String args = Arrays.toString(joinPoint.getArgs());\n           Object result = null;\n           try {\n           \tSystem.out.println(\"环绕通知-->目标对象方法执行之前\");\n           \t//目标方法的执行，目标方法的返回值一定要返回给外界调用者\n           \tresult = joinPoint.proceed();\n           \tSystem.out.println(\"环绕通知-->目标对象方法返回值之后\");\n           } catch (Throwable throwable) {\n           \tthrowable.printStackTrace();\n           \tSystem.out.println(\"环绕通知-->目标对象方法出现异常时\");\n           } finally {\n           \tSystem.out.println(\"环绕通知-->目标对象方法执行完毕\");\n           }\n           return result;\n       }\n       ```\n\n    7. 切面的优先级\n       相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。 \n\n       - 外部切面的优先级比内部切面的优先级高\n\n       - 使用@Order注解可以控制切面的优先级： @Order(较小的数)：优先级高 @Order(较大的数)：优先级低\n\n\n\n## 7. 声明式事务\n\n 1. JdbcTemplate\n\n    1. 依赖\n\n       ```xml\n       <dependencies>\n           <!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 -->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-context</artifactId>\n               <version>5.3.1</version>\n           </dependency>\n           <!-- Spring 持久化层支持jar包 -->\n           <!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个\n           jar包 -->\n           <!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 -->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-orm</artifactId>\n               <version>5.3.1</version>\n           </dependency>\n           <!-- Spring 测试相关 -->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-test</artifactId>\n               <version>5.3.1</version>\n           </dependency>\n           <!-- junit测试 -->\n           <dependency>\n               <groupId>junit</groupId>\n               <artifactId>junit</artifactId>\n               <version>4.12</version>\n               <scope>test</scope>\n           </dependency>\n           <!-- MySQL驱动 -->\n           <dependency>\n               <groupId>mysql</groupId>\n               <artifactId>mysql-connector-java</artifactId>\n               <version>8.0.16</version>\n           </dependency>\n           <!-- 数据源 -->\n           <dependency>\n               <groupId>com.alibaba</groupId>\n               <artifactId>druid</artifactId>\n               <version>1.0.31</version>\n           </dependency>\n       </dependencies>\n       ```\n\n    2. 配置文件\n\n       ```xml\n       <!--扫描组件-->\n       <context:component-scan base-package=\"com.atguigu.spring.tx.annotation\">\n       </context:component-scan>\n       <!-- 导入外部属性文件 -->\n       <context:property-placeholder location=\"classpath:jdbc.properties\" />\n       <!-- 配置数据源 -->\n       <bean id=\"druidDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n           <property name=\"url\" value=\"${jdbc.url}\"/>\n           <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n           <property name=\"username\" value=\"${jdbc.username}\"/>\n           <property name=\"password\" value=\"${jdbc.password}\"/>\n       </bean>\n       <!-- 配置 JdbcTemplate -->\n       <bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n           <!-- 装配数据源 -->\n           <property name=\"dataSource\" ref=\"druidDataSource\"/>\n       </bean>\n       ```\n\n    3. 测试类\n\n       ```java\n       @RunWith(SpringJUnit4ClassRunner.class)\n       @ContextConfiguration(\"classpath:spring-jdbc.xml\")\n       public class JDBCTemplateTest {\n           @Autowired\n           private JdbcTemplate jdbcTemplate;\n       }\n       ```\n\n       \n\n    4. 基于注解\n\n       1. 添加事务配置\n\n        ```xml\n        <!-- 配置事务管理器 -->\n        <bean id=\"transactionManager\"\n        class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n        </bean>\n        <!--\n        开启事务的注解驱动\n        通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务\n        -->\n        <!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就\n        是这个默认值，则可以省略这个属性 -->\n        <tx:annotation-driven transaction-manager=\"transactionManager\" />\n        ```\n       \n       2. 回滚策略\n          - rollbackFor属性：需要设置一个Class类型的对象 \n          - rollbackForClassName属性：需要设置一个字符串类型的全类名 \n          - noRollbackFor属性：需要设置一个Class类型的对象 \n          - rollbackFor属性：需要设置一个字符串类型的全类名\n       3. 事务隔离级别\n          - 读未提交：READ UNCOMMITTED 允许Transaction01读取Transaction02未提交的修改。 \n          - 读已提交：READ COMMITTED、 要求Transaction01只能读取Transaction02已提交的修改。 \n          - 可重复读：REPEATABLE READ 确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。 \n          - 串行化：SERIALIZABLE 确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。\n       4. 事务传播行为\n          - @Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开 启的事务可用，那么就在这个事务中运行。\n          - @Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启 的事务，都要开启新事务。\n    \n    5. 基于xml\n    \n       ```xml\n       <aop:config>\n           <!-- 配置事务通知和切入点表达式 -->\n           <aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(*\n           com.learn.spring.tx.xml.service.impl.*.*(..))\"></aop:advisor>\n       </aop:config>\n       <!-- tx:advice标签：配置事务通知 -->\n       <!-- id属性：给事务通知标签设置唯一标识，便于引用 -->\n       <!-- transaction-manager属性：关联事务管理器 -->\n       <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n           <tx:attributes>\n               <!-- tx:method标签：配置具体的事务方法 -->\n               <!-- name属性：指定方法名，可以使用星号代表多个字符 -->\n               <tx:method name=\"get*\" read-only=\"true\"/>\n               <tx:method name=\"query*\" read-only=\"true\"/>\n               <tx:method name=\"find*\" read-only=\"true\"/>\n               <!-- read-only属性：设置只读属性 -->\n               <!-- rollback-for属性：设置回滚的异常 -->\n               <!-- no-rollback-for属性：设置不回滚的异常 -->\n               <!-- isolation属性：设置事务的隔离级别 -->\n               <!-- timeout属性：设置事务的超时属性 -->\n               <!-- propagation属性：设置事务的传播行为 -->\n               <tx:method name=\"save*\" read-only=\"false\" rollback\u0002for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\"/>\n               <tx:method name=\"update*\" read-only=\"false\" rollback\u0002for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\"/>\n               <tx:method name=\"delete*\" read-only=\"false\" rollback\u0002for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\"/>\n           </tx:attributes>\n       </tx:advice>\n       ```\n    \n       ```xml\n       <dependency>\n           <groupId>org.springframework</groupId>\n           <artifactId>spring-aspects</artifactId>\n           <version>5.3.1</version>\n       </dependency>\n       ```","source":"_posts/ssm框架-Spring.md","raw":"---\ntitle: SSM框架 - Spring\ndate: 2020-10-02 16:56:33\ntags: JAVA\ncategories: 编程\n---\n\n# Spring\n\n## 1. 描述\n\n   轻量级框架。创建性能良好、易于测试、可重用的代码\n\n\n\n## 2. Spring Framework\n\n 1. 特性：\n\n    - 非侵入性\n\n      对应用程序本身的结构侵入性较小\n\n    - 控制反转IOC（Invension Of Control）\n\n      翻转资源获取方向。把自己创建资源、向环境索取资源转变为环境将资源准备好，我们享受资源注入\n\n    - 面向切面编程AOP （Aspect Oriented Programming）\n\n      在不修改源代码的基础下增强代码功能\n\n    - 容器\n\n      Spring IOC是一个容器，包含并且管理组件对象的生命周期。组件享受容器的管理，屏蔽了组件创建过程中的大量细节，降低了使用门槛，提高开发效率\n\n    - 组件化\n\n      使用简单的组件配置组合成一个最复杂的应用。在Spring中可以使用XML和Java注解组合这些对象\n\n    - 声明式\n\n      声明需求即可由框架实现\n\n    - 一站式\n\n      在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库\n\n 2. 功能模块\n\n    - Core Container\n\n      核心容器。在Spring环境下使用任何功能必须基于IOC容器\n\n    - AOP Aspects\n\n      面向切面编程\n\n    - Testing\n\n      提供了对junit或TestNG测试框架的整合\n\n    - Data Access/Integration\n\n      提供了对数据访问/集成的功能\n\n    - Spring MVC\n\n      提供了面向Web应用程序的集成功能\n\n\n\n## 3. IOC\n\n1. 思想：\n\n   反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。\n\n2. DI （Dependency Injection）：依赖注入\n\n   组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。DI 是对 IOC 的一种具体实现。\n\n\n\n## 4. 两种实现方式\n\n- BeanFactory： 这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。\n\n- ApplicationContext： BeanFactory的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。\n\n  - ApplicationContext的主要实现类：\n\n    - ClassPathXmlApplicationContext \n\n      通过读取类路径下的 XML 格式的配置文件创建 IOC 容器 对象\n\n    - FileSystemXmlApplicationContext\n\n      通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象\n\n    - ConfigurableApplicationContext\n\n      ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力\n\n    - WebApplicationContext\n\n      专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中\n\n\n\n## 5. 管理Bean\n\n 1. Bean作用域（scope属性）\n\n    - singleton（默认） 单例，IOC容器初始化时创建对象\n    - prototype 多例，获取bean时创建对象\n\n    WebApplicationContext环境下额外的作用域（不常用）：\n\n    - request 在一个请求范围内有效\n    - session 在一个会话范围内有效\n\n 2. 生命周期\n\n    1. bean对象创建，实例化（调用无参构造器）\n\n    2. 给bean对象设置属性，依赖注入\n\n    3. bean对象初始化之前操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）\n\n       bean后置处理器不是单独针对某一个bean生效，而是针对IOC容 器中所有bean都会执行\n\n       ```xml\n       <!-- bean的后置处理器要放入IOC容器才能生效 -->\n       <bean id=\"myBeanProcessor\" class=\"com.atguigu.spring.process.MyBeanProcessor\"/>\n       ```\n\n       ```java\n       public class MyBeanProcessor implements BeanPostProcessor {\n           @Override\n           public Object postProcessBeforeInitialization(Object bean, String beanName)\n           throws BeansException {\n               System.out.println(\"☆☆☆\" + beanName + \" = \" + bean);\n               return bean;\n           }\n           @Override\n           public Object postProcessAfterInitialization(Object bean, String beanName)\n           throws BeansException {\n               System.out.println(\"★★★\" + beanName + \" = \" + bean);\n               return bean;\n           }\n       }\n       ```\n\n    4. bean对象初始化（需在配置bean时指定初始化方法 init-method=\"initMethod\"）\n\n    5. bean对象初始化之后操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）\n\n    6. bean对象就绪可以使用\n\n    7. bean对象销毁（需在配置bean时指定销毁方法 destroy-method=\"destroyMethod\"）\n\n    8. IOC容器关闭\n\n 3. 基于xml\n\n    - 依赖\n\n      {% asset_img image-1.png %}\n\n    - resources/applicationContext.xml\n\n      ```xml\n      <beans xmlns=\"http://www.springframework.org/schema/beans\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n      \n          <!--\n              配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理\n              通过bean标签配置IOC容器所管理的bean\n              属性：\n              id：设置bean的唯一标识\n              class：设置bean所对应类型的全类名，默认无参构造\n          -->\n          <bean id=\"helloworld\" class=\"com.learn.ssm.pojo.HelloWorld\"></bean>\n      </beans>\n      ```\n\n    - 获取ioc及bean对象\n\n      ```java\n      // 获取ioc容器\n      ApplicationContext ioc = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n      // 获取ioc容器的bean（方式1）\n      HelloWorld bean = (HelloWorld) ioc.getBean(\"helloworld\");\n      // 【常用】获取ioc容器的bean（方式2）要求IOC容器中指定类型的bean有且只能有一个\n      HelloWorld bean = ac.getBean(HelloWorld.class);\n      // 获取ioc容器的bean（方式3）\n      HelloWorld bean = ac.getBean(\"helloworld\", HelloWorld.class);\n      bean.learnSpring();\n      ```\n\n    - 创建对象（利用反射及工厂模式）\n\n      一个bean对应一个对象（单例），接口不能\n\n      {% asset_img image-2.png %}\n\n      \n\n      {% asset_img image-3.png %}\n\n    - 依赖注入\n\n      - setter注入\n\n        ```xml\n        <bean id=\"peopleOne\" class=\"com.learn.spring.pojo.People\">\n            <!--通过成员变量的set方法赋值-->\n            <property name=\"id\" value=\"1\"></property>\n            <property name=\"name\" value=\"Tom\"></property>\n            <property name=\"age\"><null/></property>\n            <!--类类型方法一：引用外部bean-->\n            <property name=\"clazz\" ref=\"clazzOne\"></property>\n            <!--类类型方法二：级联-->\n            <property name=\"clazz.name\" value=\"clazzTwo\"></property>\n            <!--类类型方法三：内部bean-->\n            <property name=\"clazz\">\n                <bean id=\"clazzThree\" class=\"com.learn.spring.pojo.Clazz\">\n                    <!--通过成员变量的set方法赋值-->\n                    <property name=\"id\" value=\"1\"></property>\n                    <property name=\"name\" value=\"clazzOne\"></property>\n                </bean>\n            </property>\n            <property name=\"array\">\n                <array>1</array>\n                <array>2</array>\n            </property>\n        </bean>\n        <bean id=\"clazzOne\" class=\"com.learn.spring.pojo.Clazz\">\n            <!--通过成员变量的set方法赋值-->\n            <property name=\"id\" value=\"1\"></property>\n            <property name=\"name\" value=\"clazzOne\"></property>\n            <!--List类型方法一-->\n            <property name=\"People\">\n                <list>\n                    <!--<value></value> -->\n                    <ref bean=\"peopleOne\"></ref>\n                    <ref bean=\"peopleTwo\"></ref>\n                </list>\n            </property>\n            <!--List类型方法二-->\n        \t<property name=\"People\" ref=\"listBean\"></property>\n            <!--Map类型方法一-->\n            <property name=\"People\">\n                <map>\n                    <entry key=\"key1\" value-ref=\"peopleOne\"></entry>\n                    <entry key=\"key2\" value-ref=\"peopleTwo\"></entry>\n                </map>\n            </property>\n            <!--List类型方法二-->\n        \t<property name=\"People\" ref=\"listBean\"></property>\n            <!--Map类型方法二-->\n        \t<property name=\"People\" ref=\"mapBean\"></property>\n        </bean>\n        \n        <!--配置集合类型的bean，需要util约束-->\n        <util:list id=\"listBean\">\n            <ref bean=\"peopleOne\"></ref>\n            <ref bean=\"peopleTwo\"></ref>\n        </util:list>\n        \n        <!--配置集合类型的bean，需要util约束-->\n        <util:list id=\"mapBean\">\n            <entry key=\"key1\" value-ref=\"peopleOne\"></entry>\n            <entry key=\"key2\" value-ref=\"peopleTwo\"></entry>\n        </util:list>\n        \n        <!--命名空间赋值-->\n        <bean id=\"peopleOne\" class=\"com.learn.spring.pojo.People\" p:id=\"2\" p:name=\"Sam\" p:mapBean-ref=\"mapBean\">\n        ```\n\n      - 构造器注入\n\n        ```xml\n        <bean id=\"peopleTwo\" class=\"com.learn.spring.pojo.People\">\n            <!--通过有参构造器赋值，只有一个构造器按顺序填参数-->\n            <constructor-arg value=\"2\"></constructor-arg>\n            <constructor-arg value=\"&lt;Jerry&gt;\"></constructor-arg>\n            <constructor-arg value=\"10\" name=\"age\"></constructor-arg>\n        </bean>\n        ```\n\n      - 管理数据源\n\n        ```xml\n        <!-- MySQL驱动 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.16</version>\n        </dependency>\n        <!-- 数据源 -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.31</version>\n        </dependency>\n        ```\n\n        ```xml\n        <!-- 引入外部属性文件 -->\n        <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n        \n        <bean id=\"druidDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n            <property name=\"url\" value=\"${jdbc.url}\"/>\n            <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n            <property name=\"username\" value=\"${jdbc.user}\"/>\n            <property name=\"password\" value=\"${jdbc.password}\"/>\n        </bean>\n        ```\n\n    - FactoryBean\n\n      配置一个 FactoryBean类型的实现类bean，在获取bean的时候得到的并不是class属性中配置的实现类的对象，而是 getObject()方法的返回值（交给ioc管理）。通过这种机制，Spring可以把复杂组件创建的详细过程和繁琐细节都屏蔽起来\n      \n      ```java\n      public class UserFactoryBean implements FactoryBean<User> {\n          @Override\n          public User getObject() throws Exception {\n              return new User();\n          }\n          @Override\n          public Class<?> getObjectType() {\n          \treturn User.class;\n          }\n      }\n      \n      @Test\n      public void testUserFactoryBean(){\n      \t//获取IOC容器\n      \tApplicationContext ac = new ClassPathXmlApplicationContext(\"spring-factorybean.xml\");\n          User user = (User) ac.getBean(\"user\");\n          System.out.println(user);\n      }\n      ```\n      \n      ```xml\n      <bean id=\"user\" class=\"com.atguigu.bean.UserFactoryBean\"></bean>\n      ```\n\n    - 基于xml的自动装配\n\n      autowire，根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的**类类型或接口类型**属性赋值\n\n      - byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值 若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null 若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException\n      - byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值\n\n 4. 基于注解\n\n    类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。 自定义bean的id 可通过标识组件的注解的value属性设置自定义的bean的id\n\n    - @Component：将类标识为普通组件 \n\n    - @Controller：将类标识为控制层组件 \n\n    - @Service：将类标识为业务层组件 \n\n    - @Repository：将类标识为持久层组件\n\n    ```xml\n    <context:component-scan base-package=\"包名\" use-default-filters=\"false\">\n    <!-- context:exclude-filter标签：指定排除规则 -->\n    <!--\n    type：设置排除或包含的依据\n    type=\"annotation\"，根据注解排除，expression中设置要排除的注解的全类名\n    type=\"assignable\"，根据类型排除，expression中设置要排除的类型的全类名\n    -->\n    <context:exclude-filter type=\"annotation\"\n    expression=\"org.springframework.stereotype.Controller\"/>\n    <!--<context:exclude-filter type=\"assignable\"\n    expression=\"全类名\"/>-->\n    \n        \n    <!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 -->\n    <!-- use-default-filters属性：取值false表示关闭默认扫描规则 -->\n    <!-- 此时必须设置use-default-filters=\"false\"，因为默认规则即扫描指定包下所有类 -->\n    <!--\n        type：设置排除或包含的依据\n        type=\"annotation\"，根据注解指定，expression中设置要指定的注解的全类名\n        type=\"assignable\"，根据类型指定，expression中设置要指定的类型的全类名\n    -->\n    <context:include-filter type=\"annotation\"\n    expression=\"org.springframework.stereotype.Controller\"/>\n        <!--<context:include-filter type=\"assignable\"\n        expression=\"全类名\"/>-->\n    </context:component-scan>\n    ```\n\n- 自动装配\n\n  - @Autowired，不需要提供setXxx()方法，可以标记在成员变量、构造器和set方法上\n\n  - 工作流程\n\n    首先根据所需要的组件类型到IOC容器中查找 \n\n    - 能够找到唯一的bean：直接执行装配 \n    - 如果完全找不到匹配这个类型的bean：装配失败 \n    - 和所需类型匹配的bean不止一个 \n    - 没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配 \n      - 能够找到：执行装配 \n      - 找不到：装配失败 \n    - 使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配 \n      - 能够找到：执行装配 \n      - 找不到：装配失败\n\n\n\n## 6. AOP\n\n 1. 描述：\n\n    AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术。本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。\n\n 2. 相关概念\n\n    - Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；封装通知方法的类。\n    - Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；向目标对象应用通知之后创建的代理对象。\n    - Pointcut：切入点，即一组连接点的集合；每个类的方法中都包含多个连接点，\n    - Advice：增强，指特定连接点上执行的动作；\n    - Introduction：引介，指为一个已有的Java对象动态地增加新的接口；\n    - Weaving：织入，指将切面整合到程序的执行流程中；\n    - Interceptor：拦截器，是一种实现增强的方式；\n    - Target Object：目标对象，即真正执行业务的核心逻辑对象；被代理的目标对象。\n    - AOP Proxy：AOP代理，是客户端持有的增强后的对象引用；向目标对象应用通知之后创建的代理对象。\n\n 3. 作用：\n\n    - 简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。 \n    - 代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。\n\n 4. 基于注解的AOP\n\n    1. 说明\n\n       - 动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口。 \n\n       - cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口。 \n\n       - AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。\n         - @Aspect 将当前组件表示为切面\n         - @Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；\n         - @After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；\n         - @AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；\n         - @AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；\n         - @Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。\n\n    2. 依赖\n\n       ```xml\n       <dependency>\n           <groupId>org.springframework</groupId>\n           <artifactId>spring-aspects</artifactId>\n           <version>${spring.version}</version>\n       </dependency>\n       ```\n\n    3. 配置文件\n\n       ```xml\n       <!--\n           基于注解的AOP的实现：\n           1、将目标对象和切面交给IOC容器管理（注解+扫描）\n           2、开启AspectJ的自动代理，为目标对象自动生成代理\n           3、将切面类通过注解@Aspect标识\n       -->\n       <context:component-scan base-package=\"包名\">\n       </context:component-scan>\n       <aop:aspectj-autoproxy />\n       ```\n\n    4. 切入点执行语法\n\n       {% asset_img image-4.png %}\n\n    5. 获取信息\n\n       - 获取连接点信息\n\n         ```java\n         @Before(\"execution(public int com.aop.annotation.TestImpl.*(..))\") \n         public void beforeMethod(JoinPoint joinPoint){ \n             //获取连接点的声明信息 \n             String methodName = joinPoint.getSignature().getName(); \n             //获取目标方法到的实参信息 \n             String args = Arrays.toString(joinPoint.getArgs()); \n             System.out.println(\"Logger-->前置通知，方法名：\"+methodName+\"，参数：\"+args); \n         }\n         ```\n\n       - 获取目标方法返回值\n\n         ```java\n         @AfterReturning(value = \"execution(* com.aop.annotation.TestImpl.*(..))\", returning = \"result\")\n         public void afterReturningMethod(JoinPoint joinPoint, Object result){\n             String methodName = joinPoint.getSignature().getName();\n             System.out.println(\"Logger-->返回通知，方法名：\"+methodName+\"，结果：\"+result);\n         }\n         ```\n\n       - 获取目标方法的异常\n\n         ```java\n         @AfterThrowing(value = \"execution(* com.aop.annotation.TestImpl.*(..))\", throwing = \"ex\")\n         public void afterThrowingMethod(JoinPoint joinPoint, Throwable ex){\n             String methodName = joinPoint.getSignature().getName();\n             System.out.println(\"Logger-->异常通知，方法名：\"+methodName+\"，异常：\"+ex);\n         }\n         ```\n\n    6. @Around\n\n       ```java\n       @Around(\"execution(* com.aop.annotation.TestImpl.*(..))\")\n       public Object aroundMethod(ProceedingJoinPoint joinPoint){\n           String methodName = joinPoint.getSignature().getName();\n           String args = Arrays.toString(joinPoint.getArgs());\n           Object result = null;\n           try {\n           \tSystem.out.println(\"环绕通知-->目标对象方法执行之前\");\n           \t//目标方法的执行，目标方法的返回值一定要返回给外界调用者\n           \tresult = joinPoint.proceed();\n           \tSystem.out.println(\"环绕通知-->目标对象方法返回值之后\");\n           } catch (Throwable throwable) {\n           \tthrowable.printStackTrace();\n           \tSystem.out.println(\"环绕通知-->目标对象方法出现异常时\");\n           } finally {\n           \tSystem.out.println(\"环绕通知-->目标对象方法执行完毕\");\n           }\n           return result;\n       }\n       ```\n\n    7. 切面的优先级\n       相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。 \n\n       - 外部切面的优先级比内部切面的优先级高\n\n       - 使用@Order注解可以控制切面的优先级： @Order(较小的数)：优先级高 @Order(较大的数)：优先级低\n\n\n\n## 7. 声明式事务\n\n 1. JdbcTemplate\n\n    1. 依赖\n\n       ```xml\n       <dependencies>\n           <!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 -->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-context</artifactId>\n               <version>5.3.1</version>\n           </dependency>\n           <!-- Spring 持久化层支持jar包 -->\n           <!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个\n           jar包 -->\n           <!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 -->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-orm</artifactId>\n               <version>5.3.1</version>\n           </dependency>\n           <!-- Spring 测试相关 -->\n           <dependency>\n               <groupId>org.springframework</groupId>\n               <artifactId>spring-test</artifactId>\n               <version>5.3.1</version>\n           </dependency>\n           <!-- junit测试 -->\n           <dependency>\n               <groupId>junit</groupId>\n               <artifactId>junit</artifactId>\n               <version>4.12</version>\n               <scope>test</scope>\n           </dependency>\n           <!-- MySQL驱动 -->\n           <dependency>\n               <groupId>mysql</groupId>\n               <artifactId>mysql-connector-java</artifactId>\n               <version>8.0.16</version>\n           </dependency>\n           <!-- 数据源 -->\n           <dependency>\n               <groupId>com.alibaba</groupId>\n               <artifactId>druid</artifactId>\n               <version>1.0.31</version>\n           </dependency>\n       </dependencies>\n       ```\n\n    2. 配置文件\n\n       ```xml\n       <!--扫描组件-->\n       <context:component-scan base-package=\"com.atguigu.spring.tx.annotation\">\n       </context:component-scan>\n       <!-- 导入外部属性文件 -->\n       <context:property-placeholder location=\"classpath:jdbc.properties\" />\n       <!-- 配置数据源 -->\n       <bean id=\"druidDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n           <property name=\"url\" value=\"${jdbc.url}\"/>\n           <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n           <property name=\"username\" value=\"${jdbc.username}\"/>\n           <property name=\"password\" value=\"${jdbc.password}\"/>\n       </bean>\n       <!-- 配置 JdbcTemplate -->\n       <bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n           <!-- 装配数据源 -->\n           <property name=\"dataSource\" ref=\"druidDataSource\"/>\n       </bean>\n       ```\n\n    3. 测试类\n\n       ```java\n       @RunWith(SpringJUnit4ClassRunner.class)\n       @ContextConfiguration(\"classpath:spring-jdbc.xml\")\n       public class JDBCTemplateTest {\n           @Autowired\n           private JdbcTemplate jdbcTemplate;\n       }\n       ```\n\n       \n\n    4. 基于注解\n\n       1. 添加事务配置\n\n        ```xml\n        <!-- 配置事务管理器 -->\n        <bean id=\"transactionManager\"\n        class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n        </bean>\n        <!--\n        开启事务的注解驱动\n        通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务\n        -->\n        <!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就\n        是这个默认值，则可以省略这个属性 -->\n        <tx:annotation-driven transaction-manager=\"transactionManager\" />\n        ```\n       \n       2. 回滚策略\n          - rollbackFor属性：需要设置一个Class类型的对象 \n          - rollbackForClassName属性：需要设置一个字符串类型的全类名 \n          - noRollbackFor属性：需要设置一个Class类型的对象 \n          - rollbackFor属性：需要设置一个字符串类型的全类名\n       3. 事务隔离级别\n          - 读未提交：READ UNCOMMITTED 允许Transaction01读取Transaction02未提交的修改。 \n          - 读已提交：READ COMMITTED、 要求Transaction01只能读取Transaction02已提交的修改。 \n          - 可重复读：REPEATABLE READ 确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。 \n          - 串行化：SERIALIZABLE 确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。\n       4. 事务传播行为\n          - @Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开 启的事务可用，那么就在这个事务中运行。\n          - @Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启 的事务，都要开启新事务。\n    \n    5. 基于xml\n    \n       ```xml\n       <aop:config>\n           <!-- 配置事务通知和切入点表达式 -->\n           <aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(*\n           com.learn.spring.tx.xml.service.impl.*.*(..))\"></aop:advisor>\n       </aop:config>\n       <!-- tx:advice标签：配置事务通知 -->\n       <!-- id属性：给事务通知标签设置唯一标识，便于引用 -->\n       <!-- transaction-manager属性：关联事务管理器 -->\n       <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n           <tx:attributes>\n               <!-- tx:method标签：配置具体的事务方法 -->\n               <!-- name属性：指定方法名，可以使用星号代表多个字符 -->\n               <tx:method name=\"get*\" read-only=\"true\"/>\n               <tx:method name=\"query*\" read-only=\"true\"/>\n               <tx:method name=\"find*\" read-only=\"true\"/>\n               <!-- read-only属性：设置只读属性 -->\n               <!-- rollback-for属性：设置回滚的异常 -->\n               <!-- no-rollback-for属性：设置不回滚的异常 -->\n               <!-- isolation属性：设置事务的隔离级别 -->\n               <!-- timeout属性：设置事务的超时属性 -->\n               <!-- propagation属性：设置事务的传播行为 -->\n               <tx:method name=\"save*\" read-only=\"false\" rollback\u0002for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\"/>\n               <tx:method name=\"update*\" read-only=\"false\" rollback\u0002for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\"/>\n               <tx:method name=\"delete*\" read-only=\"false\" rollback\u0002for=\"java.lang.Exception\" propagation=\"REQUIRES_NEW\"/>\n           </tx:attributes>\n       </tx:advice>\n       ```\n    \n       ```xml\n       <dependency>\n           <groupId>org.springframework</groupId>\n           <artifactId>spring-aspects</artifactId>\n           <version>5.3.1</version>\n       </dependency>\n       ```","slug":"ssm框架-Spring","published":1,"updated":"2022-08-25T11:54:10.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka2001h94wa2kvx47dz","content":"<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h2><p>   轻量级框架。创建性能良好、易于测试、可重用的代码</p>\n<h2 id=\"2-Spring-Framework\"><a href=\"#2-Spring-Framework\" class=\"headerlink\" title=\"2. Spring Framework\"></a>2. Spring Framework</h2><ol>\n<li><p>特性：</p>\n<ul>\n<li><p>非侵入性</p>\n<p>对应用程序本身的结构侵入性较小</p>\n</li>\n<li><p>控制反转IOC（Invension Of Control）</p>\n<p>翻转资源获取方向。把自己创建资源、向环境索取资源转变为环境将资源准备好，我们享受资源注入</p>\n</li>\n<li><p>面向切面编程AOP （Aspect Oriented Programming）</p>\n<p>在不修改源代码的基础下增强代码功能</p>\n</li>\n<li><p>容器</p>\n<p>Spring IOC是一个容器，包含并且管理组件对象的生命周期。组件享受容器的管理，屏蔽了组件创建过程中的大量细节，降低了使用门槛，提高开发效率</p>\n</li>\n<li><p>组件化</p>\n<p>使用简单的组件配置组合成一个最复杂的应用。在Spring中可以使用XML和Java注解组合这些对象</p>\n</li>\n<li><p>声明式</p>\n<p>声明需求即可由框架实现</p>\n</li>\n<li><p>一站式</p>\n<p>在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库</p>\n</li>\n</ul>\n</li>\n<li><p>功能模块</p>\n<ul>\n<li><p>Core Container</p>\n<p>核心容器。在Spring环境下使用任何功能必须基于IOC容器</p>\n</li>\n<li><p>AOP Aspects</p>\n<p>面向切面编程</p>\n</li>\n<li><p>Testing</p>\n<p>提供了对junit或TestNG测试框架的整合</p>\n</li>\n<li><p>Data Access/Integration</p>\n<p>提供了对数据访问/集成的功能</p>\n</li>\n<li><p>Spring MVC</p>\n<p>提供了面向Web应用程序的集成功能</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-IOC\"><a href=\"#3-IOC\" class=\"headerlink\" title=\"3. IOC\"></a>3. IOC</h2><ol>\n<li><p>思想：</p>\n<p>反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。</p>\n</li>\n<li><p>DI （Dependency Injection）：依赖注入</p>\n<p>组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。DI 是对 IOC 的一种具体实现。</p>\n</li>\n</ol>\n<h2 id=\"4-两种实现方式\"><a href=\"#4-两种实现方式\" class=\"headerlink\" title=\"4. 两种实现方式\"></a>4. 两种实现方式</h2><ul>\n<li><p>BeanFactory： 这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p>\n</li>\n<li><p>ApplicationContext： BeanFactory的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p>\n<ul>\n<li><p>ApplicationContext的主要实现类：</p>\n<ul>\n<li><p>ClassPathXmlApplicationContext </p>\n<p>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器 对象</p>\n</li>\n<li><p>FileSystemXmlApplicationContext</p>\n<p>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</p>\n</li>\n<li><p>ConfigurableApplicationContext</p>\n<p>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力</p>\n</li>\n<li><p>WebApplicationContext</p>\n<p>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-管理Bean\"><a href=\"#5-管理Bean\" class=\"headerlink\" title=\"5. 管理Bean\"></a>5. 管理Bean</h2><ol>\n<li><p>Bean作用域（scope属性）</p>\n<ul>\n<li>singleton（默认） 单例，IOC容器初始化时创建对象</li>\n<li>prototype 多例，获取bean时创建对象</li>\n</ul>\n<p>WebApplicationContext环境下额外的作用域（不常用）：</p>\n<ul>\n<li>request 在一个请求范围内有效</li>\n<li>session 在一个会话范围内有效</li>\n</ul>\n</li>\n<li><p>生命周期</p>\n<ol>\n<li><p>bean对象创建，实例化（调用无参构造器）</p>\n</li>\n<li><p>给bean对象设置属性，依赖注入</p>\n</li>\n<li><p>bean对象初始化之前操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）</p>\n<p>bean后置处理器不是单独针对某一个bean生效，而是针对IOC容 器中所有bean都会执行</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBeanProcessor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.spring.process.MyBeanProcessor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"☆☆☆\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"★★★\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>bean对象初始化（需在配置bean时指定初始化方法 init-method=”initMethod”）</p>\n</li>\n<li><p>bean对象初始化之后操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）</p>\n</li>\n<li><p>bean对象就绪可以使用</p>\n</li>\n<li><p>bean对象销毁（需在配置bean时指定销毁方法 destroy-method=”destroyMethod”）</p>\n</li>\n<li><p>IOC容器关闭</p>\n</li>\n</ol>\n</li>\n<li><p>基于xml</p>\n<ul>\n<li><p>依赖</p>\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-1.png\" class=\"\"></li>\n<li><p>resources/applicationContext.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!--\n        配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理\n        通过bean标签配置IOC容器所管理的bean\n        属性：\n        id：设置bean的唯一标识\n        class：设置bean所对应类型的全类名，默认无参构造\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloworld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.ssm.pojo.HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取ioc及bean对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取ioc容器</span>\n<span class=\"token class-name\">ApplicationContext</span> ioc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取ioc容器的bean（方式1）</span>\n<span class=\"token class-name\">HelloWorld</span> bean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 【常用】获取ioc容器的bean（方式2）要求IOC容器中指定类型的bean有且只能有一个</span>\n<span class=\"token class-name\">HelloWorld</span> bean <span class=\"token operator\">=</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取ioc容器的bean（方式3）</span>\n<span class=\"token class-name\">HelloWorld</span> bean <span class=\"token operator\">=</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbean<span class=\"token punctuation\">.</span><span class=\"token function\">learnSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建对象（利用反射及工厂模式）</p>\n<p>一个bean对应一个对象（单例），接口不能</p>\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-2.png\" class=\"\">\n\n\n\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-3.png\" class=\"\"></li>\n<li><p>依赖注入</p>\n<ul>\n<li><p>setter注入</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--通过成员变量的set方法赋值--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Tom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>null</span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--类类型方法一：引用外部bean--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--类类型方法二：级联--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazz.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--类类型方法三：内部bean--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzThree<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.Clazz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!--通过成员变量的set方法赋值--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>array<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>array</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>array</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>array</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>array</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.Clazz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--通过成员变量的set方法赋值--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--List类型方法一--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!--&lt;value>&lt;/value> --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--List类型方法二--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--Map类型方法一--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--List类型方法二--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--Map类型方法二--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--配置集合类型的bean，需要util约束--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">util:</span>list</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">util:</span>list</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--配置集合类型的bean，需要util约束--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">util:</span>list</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">util:</span>list</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--命名空间赋值--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">p:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">p:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sam<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">p:</span>mapBean-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>构造器注入</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--通过有参构造器赋值，只有一个构造器按顺序填参数--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>Jerry<span class=\"token entity named-entity\" title=\"&gt;\">&amp;gt;</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>管理数据源</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- MySQL驱动 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 数据源 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.31<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 引入外部属性文件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>druidDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.user&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>FactoryBean</p>\n<p>配置一个 FactoryBean类型的实现类bean，在获取bean的时候得到的并不是class属性中配置的实现类的对象，而是 getObject()方法的返回值（交给ioc管理）。通过这种机制，Spring可以把复杂组件创建的详细过程和繁琐细节都屏蔽起来</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFactoryBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FactoryBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//获取IOC容器</span>\n\t<span class=\"token class-name\">ApplicationContext</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-factorybean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.bean.UserFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>基于xml的自动装配</p>\n<p>autowire，根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的<strong>类类型或接口类型</strong>属性赋值</p>\n<ul>\n<li>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值 若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null 若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</li>\n<li>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于注解</p>\n<p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。 自定义bean的id 可通过标识组件的注解的value属性设置自定义的bean的id</p>\n<ul>\n<li><p>@Component：将类标识为普通组件 </p>\n</li>\n<li><p>@Controller：将类标识为控制层组件 </p>\n</li>\n<li><p>@Service：将类标识为业务层组件 </p>\n</li>\n<li><p>@Repository：将类标识为持久层组件</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>包名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">use-default-filters</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- context:exclude-filter标签：指定排除规则 --></span>\n<span class=\"token comment\">&lt;!--\ntype：设置排除或包含的依据\ntype=\"annotation\"，根据注解排除，expression中设置要排除的注解的全类名\ntype=\"assignable\"，根据类型排除，expression中设置要排除的类型的全类名\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>exclude-filter</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>annotation<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.stereotype.Controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!--&lt;context:exclude-filter type=\"assignable\"\nexpression=\"全类名\"/>--></span>\n\n    \n<span class=\"token comment\">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --></span>\n<span class=\"token comment\">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --></span>\n<span class=\"token comment\">&lt;!-- 此时必须设置use-default-filters=\"false\"，因为默认规则即扫描指定包下所有类 --></span>\n<span class=\"token comment\">&lt;!--\n    type：设置排除或包含的依据\n    type=\"annotation\"，根据注解指定，expression中设置要指定的注解的全类名\n    type=\"assignable\"，根据类型指定，expression中设置要指定的类型的全类名\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>include-filter</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>annotation<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.stereotype.Controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token comment\">&lt;!--&lt;context:include-filter type=\"assignable\"\n    expression=\"全类名\"/>--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li><p>自动装配</p>\n<ul>\n<li><p>@Autowired，不需要提供setXxx()方法，可以标记在成员变量、构造器和set方法上</p>\n</li>\n<li><p>工作流程</p>\n<p>首先根据所需要的组件类型到IOC容器中查找 </p>\n<ul>\n<li>能够找到唯一的bean：直接执行装配 </li>\n<li>如果完全找不到匹配这个类型的bean：装配失败 </li>\n<li>和所需类型匹配的bean不止一个 </li>\n<li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配 <ul>\n<li>能够找到：执行装配 </li>\n<li>找不到：装配失败 </li>\n</ul>\n</li>\n<li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配 <ul>\n<li>能够找到：执行装配 </li>\n<li>找不到：装配失败</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-AOP\"><a href=\"#6-AOP\" class=\"headerlink\" title=\"6. AOP\"></a>6. AOP</h2><ol>\n<li><p>描述：</p>\n<p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术。本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p>\n</li>\n<li><p>相关概念</p>\n<ul>\n<li>Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；封装通知方法的类。</li>\n<li>Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；向目标对象应用通知之后创建的代理对象。</li>\n<li>Pointcut：切入点，即一组连接点的集合；每个类的方法中都包含多个连接点，</li>\n<li>Advice：增强，指特定连接点上执行的动作；</li>\n<li>Introduction：引介，指为一个已有的Java对象动态地增加新的接口；</li>\n<li>Weaving：织入，指将切面整合到程序的执行流程中；</li>\n<li>Interceptor：拦截器，是一种实现增强的方式；</li>\n<li>Target Object：目标对象，即真正执行业务的核心逻辑对象；被代理的目标对象。</li>\n<li>AOP Proxy：AOP代理，是客户端持有的增强后的对象引用；向目标对象应用通知之后创建的代理对象。</li>\n</ul>\n</li>\n<li><p>作用：</p>\n<ul>\n<li>简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。 </li>\n<li>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。</li>\n</ul>\n</li>\n<li><p>基于注解的AOP</p>\n<ol>\n<li><p>说明</p>\n<ul>\n<li><p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口。 </p>\n</li>\n<li><p>cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口。 </p>\n</li>\n<li><p>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p>\n<ul>\n<li>@Aspect 将当前组件表示为切面</li>\n<li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li>\n<li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li>\n<li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li>\n<li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li>\n<li>@Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aspects<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--\n    基于注解的AOP的实现：\n    1、将目标对象和切面交给IOC容器管理（注解+扫描）\n    2、开启AspectJ的自动代理，为目标对象自动生成代理\n    3、将切面类通过注解@Aspect标识\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>包名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspectj-autoproxy</span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>切入点执行语法</p>\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-4.png\" class=\"\"></li>\n<li><p>获取信息</p>\n<ul>\n<li><p>获取连接点信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public int com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">//获取连接点的声明信息 </span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">//获取目标方法到的实参信息 </span>\n    <span class=\"token class-name\">String</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logger-->前置通知，方法名：\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"，参数：\"</span><span class=\"token operator\">+</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取目标方法返回值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logger-->返回通知，方法名：\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"，结果：\"</span><span class=\"token operator\">+</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取目标方法的异常</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowingMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logger-->异常通知，方法名：\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"，异常：\"</span><span class=\"token operator\">+</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>@Around</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">aroundMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法执行之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span>\n    \tresult <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法返回值之后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \tthrowable<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法出现异常时\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法执行完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>切面的优先级<br>相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。 </p>\n<ul>\n<li><p>外部切面的优先级比内部切面的优先级高</p>\n</li>\n<li><p>使用@Order注解可以控制切面的优先级： @Order(较小的数)：优先级高 @Order(较大的数)：优先级低</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"7-声明式事务\"><a href=\"#7-声明式事务\" class=\"headerlink\" title=\"7. 声明式事务\"></a>7. 声明式事务</h2><ol>\n<li><p>JdbcTemplate</p>\n<ol>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring 持久化层支持jar包 --></span>\n    <span class=\"token comment\">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个\n    jar包 --></span>\n    <span class=\"token comment\">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-orm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring 测试相关 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- junit测试 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- MySQL驱动 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 数据源 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.31<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--扫描组件--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.spring.tx.annotation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 导入外部属性文件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:jdbc.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- 配置数据源 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>druidDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置 JdbcTemplate --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.core.JdbcTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 装配数据源 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>druidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:spring-jdbc.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCTemplateTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>基于注解</p>\n<ol>\n<li>添加事务配置</li>\n</ol>\n <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 配置事务管理器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--\n开启事务的注解驱动\n通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务\n--></span>\n<span class=\"token comment\">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就\n是这个默认值，则可以省略这个属性 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>annotation-driven</span> <span class=\"token attr-name\">transaction-manager</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>回滚策略<ul>\n<li>rollbackFor属性：需要设置一个Class类型的对象 </li>\n<li>rollbackForClassName属性：需要设置一个字符串类型的全类名 </li>\n<li>noRollbackFor属性：需要设置一个Class类型的对象 </li>\n<li>rollbackFor属性：需要设置一个字符串类型的全类名</li>\n</ul>\n</li>\n<li>事务隔离级别<ul>\n<li>读未提交：READ UNCOMMITTED 允许Transaction01读取Transaction02未提交的修改。 </li>\n<li>读已提交：READ COMMITTED、 要求Transaction01只能读取Transaction02已提交的修改。 </li>\n<li>可重复读：REPEATABLE READ 确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。 </li>\n<li>串行化：SERIALIZABLE 确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</li>\n</ul>\n</li>\n<li>事务传播行为<ul>\n<li>@Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开 启的事务可用，那么就在这个事务中运行。</li>\n<li>@Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启 的事务，都要开启新事务。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>基于xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 配置事务通知和切入点表达式 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>advisor</span> <span class=\"token attr-name\">advice-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>execution(*\n    com.learn.spring.tx.xml.service.impl.*.*(..))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>advisor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- tx:advice标签：配置事务通知 --></span>\n<span class=\"token comment\">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --></span>\n<span class=\"token comment\">&lt;!-- transaction-manager属性：关联事务管理器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>advice</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transaction-manager</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- tx:method标签：配置具体的事务方法 --></span>\n        <span class=\"token comment\">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>query*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>find*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\">&lt;!-- read-only属性：设置只读属性 --></span>\n        <span class=\"token comment\">&lt;!-- rollback-for属性：设置回滚的异常 --></span>\n        <span class=\"token comment\">&lt;!-- no-rollback-for属性：设置不回滚的异常 --></span>\n        <span class=\"token comment\">&lt;!-- isolation属性：设置事务的隔离级别 --></span>\n        <span class=\"token comment\">&lt;!-- timeout属性：设置事务的超时属性 --></span>\n        <span class=\"token comment\">&lt;!-- propagation属性：设置事务的传播行为 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rollback\u0002for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Exception<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>update*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rollback\u0002for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Exception<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rollback\u0002for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Exception<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>advice</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aspects<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h2><p>   轻量级框架。创建性能良好、易于测试、可重用的代码</p>\n<h2 id=\"2-Spring-Framework\"><a href=\"#2-Spring-Framework\" class=\"headerlink\" title=\"2. Spring Framework\"></a>2. Spring Framework</h2><ol>\n<li><p>特性：</p>\n<ul>\n<li><p>非侵入性</p>\n<p>对应用程序本身的结构侵入性较小</p>\n</li>\n<li><p>控制反转IOC（Invension Of Control）</p>\n<p>翻转资源获取方向。把自己创建资源、向环境索取资源转变为环境将资源准备好，我们享受资源注入</p>\n</li>\n<li><p>面向切面编程AOP （Aspect Oriented Programming）</p>\n<p>在不修改源代码的基础下增强代码功能</p>\n</li>\n<li><p>容器</p>\n<p>Spring IOC是一个容器，包含并且管理组件对象的生命周期。组件享受容器的管理，屏蔽了组件创建过程中的大量细节，降低了使用门槛，提高开发效率</p>\n</li>\n<li><p>组件化</p>\n<p>使用简单的组件配置组合成一个最复杂的应用。在Spring中可以使用XML和Java注解组合这些对象</p>\n</li>\n<li><p>声明式</p>\n<p>声明需求即可由框架实现</p>\n</li>\n<li><p>一站式</p>\n<p>在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库</p>\n</li>\n</ul>\n</li>\n<li><p>功能模块</p>\n<ul>\n<li><p>Core Container</p>\n<p>核心容器。在Spring环境下使用任何功能必须基于IOC容器</p>\n</li>\n<li><p>AOP Aspects</p>\n<p>面向切面编程</p>\n</li>\n<li><p>Testing</p>\n<p>提供了对junit或TestNG测试框架的整合</p>\n</li>\n<li><p>Data Access/Integration</p>\n<p>提供了对数据访问/集成的功能</p>\n</li>\n<li><p>Spring MVC</p>\n<p>提供了面向Web应用程序的集成功能</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-IOC\"><a href=\"#3-IOC\" class=\"headerlink\" title=\"3. IOC\"></a>3. IOC</h2><ol>\n<li><p>思想：</p>\n<p>反转了资源的获取方向——改由容器主 动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式。</p>\n</li>\n<li><p>DI （Dependency Injection）：依赖注入</p>\n<p>组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器 的资源注入。DI 是对 IOC 的一种具体实现。</p>\n</li>\n</ol>\n<h2 id=\"4-两种实现方式\"><a href=\"#4-两种实现方式\" class=\"headerlink\" title=\"4. 两种实现方式\"></a>4. 两种实现方式</h2><ul>\n<li><p>BeanFactory： 这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p>\n</li>\n<li><p>ApplicationContext： BeanFactory的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p>\n<ul>\n<li><p>ApplicationContext的主要实现类：</p>\n<ul>\n<li><p>ClassPathXmlApplicationContext </p>\n<p>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器 对象</p>\n</li>\n<li><p>FileSystemXmlApplicationContext</p>\n<p>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</p>\n</li>\n<li><p>ConfigurableApplicationContext</p>\n<p>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、 关闭和刷新上下文的能力</p>\n</li>\n<li><p>WebApplicationContext</p>\n<p>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-管理Bean\"><a href=\"#5-管理Bean\" class=\"headerlink\" title=\"5. 管理Bean\"></a>5. 管理Bean</h2><ol>\n<li><p>Bean作用域（scope属性）</p>\n<ul>\n<li>singleton（默认） 单例，IOC容器初始化时创建对象</li>\n<li>prototype 多例，获取bean时创建对象</li>\n</ul>\n<p>WebApplicationContext环境下额外的作用域（不常用）：</p>\n<ul>\n<li>request 在一个请求范围内有效</li>\n<li>session 在一个会话范围内有效</li>\n</ul>\n</li>\n<li><p>生命周期</p>\n<ol>\n<li><p>bean对象创建，实例化（调用无参构造器）</p>\n</li>\n<li><p>给bean对象设置属性，依赖注入</p>\n</li>\n<li><p>bean对象初始化之前操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）</p>\n<p>bean后置处理器不是单独针对某一个bean生效，而是针对IOC容 器中所有bean都会执行</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBeanProcessor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.spring.process.MyBeanProcessor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanProcessor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BeanPostProcessor</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessBeforeInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"☆☆☆\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">postProcessAfterInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> bean<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> beanName<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"★★★\"</span> <span class=\"token operator\">+</span> beanName <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> bean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> bean<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>bean对象初始化（需在配置bean时指定初始化方法 init-method=”initMethod”）</p>\n</li>\n<li><p>bean对象初始化之后操作（由bean的后置处理器负责，实现BeanPostProcessor接口， 且配置到IOC容器中）</p>\n</li>\n<li><p>bean对象就绪可以使用</p>\n</li>\n<li><p>bean对象销毁（需在配置bean时指定销毁方法 destroy-method=”destroyMethod”）</p>\n</li>\n<li><p>IOC容器关闭</p>\n</li>\n</ol>\n</li>\n<li><p>基于xml</p>\n<ul>\n<li><p>依赖</p>\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-1.png\" class=\"\"></li>\n<li><p>resources/applicationContext.xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!--\n        配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理\n        通过bean标签配置IOC容器所管理的bean\n        属性：\n        id：设置bean的唯一标识\n        class：设置bean所对应类型的全类名，默认无参构造\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helloworld<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.ssm.pojo.HelloWorld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取ioc及bean对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 获取ioc容器</span>\n<span class=\"token class-name\">ApplicationContext</span> ioc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取ioc容器的bean（方式1）</span>\n<span class=\"token class-name\">HelloWorld</span> bean <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">)</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 【常用】获取ioc容器的bean（方式2）要求IOC容器中指定类型的bean有且只能有一个</span>\n<span class=\"token class-name\">HelloWorld</span> bean <span class=\"token operator\">=</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取ioc容器的bean（方式3）</span>\n<span class=\"token class-name\">HelloWorld</span> bean <span class=\"token operator\">=</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbean<span class=\"token punctuation\">.</span><span class=\"token function\">learnSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建对象（利用反射及工厂模式）</p>\n<p>一个bean对应一个对象（单例），接口不能</p>\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-2.png\" class=\"\">\n\n\n\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-3.png\" class=\"\"></li>\n<li><p>依赖注入</p>\n<ul>\n<li><p>setter注入</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--通过成员变量的set方法赋值--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Tom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>null</span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--类类型方法一：引用外部bean--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazz<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--类类型方法二：级联--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazz.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--类类型方法三：内部bean--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzThree<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.Clazz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!--通过成员变量的set方法赋值--></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>array<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>array</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>array</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>array</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>array</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.Clazz<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--通过成员变量的set方法赋值--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clazzOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--List类型方法一--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&lt;!--&lt;value>&lt;/value> --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--List类型方法二--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--Map类型方法一--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--List类型方法二--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--Map类型方法二--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--配置集合类型的bean，需要util约束--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">util:</span>list</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">util:</span>list</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--配置集合类型的bean，需要util约束--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">util:</span>list</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>entry</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">util:</span>list</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!--命名空间赋值--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleOne<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.People<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">p:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">p:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sam<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">p:</span>mapBean-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>构造器注入</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>peopleTwo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.spring.pojo.People<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--通过有参构造器赋值，只有一个构造器按顺序填参数--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>Jerry<span class=\"token entity named-entity\" title=\"&gt;\">&amp;gt;</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor-arg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>管理数据源</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- MySQL驱动 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 数据源 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.31<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 引入外部属性文件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>druidDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.user&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>FactoryBean</p>\n<p>配置一个 FactoryBean类型的实现类bean，在获取bean的时候得到的并不是class属性中配置的实现类的对象，而是 getObject()方法的返回值（交给ioc管理）。通过这种机制，Spring可以把复杂组件创建的详细过程和繁琐细节都屏蔽起来</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserFactoryBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FactoryBean</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//获取IOC容器</span>\n\t<span class=\"token class-name\">ApplicationContext</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring-factorybean.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.bean.UserFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>基于xml的自动装配</p>\n<p>autowire，根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的<strong>类类型或接口类型</strong>属性赋值</p>\n<ul>\n<li>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值 若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值 null 若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常 NoUniqueBeanDefinitionException</li>\n<li>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于注解</p>\n<p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。 自定义bean的id 可通过标识组件的注解的value属性设置自定义的bean的id</p>\n<ul>\n<li><p>@Component：将类标识为普通组件 </p>\n</li>\n<li><p>@Controller：将类标识为控制层组件 </p>\n</li>\n<li><p>@Service：将类标识为业务层组件 </p>\n</li>\n<li><p>@Repository：将类标识为持久层组件</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>包名<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">use-default-filters</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- context:exclude-filter标签：指定排除规则 --></span>\n<span class=\"token comment\">&lt;!--\ntype：设置排除或包含的依据\ntype=\"annotation\"，根据注解排除，expression中设置要排除的注解的全类名\ntype=\"assignable\"，根据类型排除，expression中设置要排除的类型的全类名\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>exclude-filter</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>annotation<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.stereotype.Controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!--&lt;context:exclude-filter type=\"assignable\"\nexpression=\"全类名\"/>--></span>\n\n    \n<span class=\"token comment\">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --></span>\n<span class=\"token comment\">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --></span>\n<span class=\"token comment\">&lt;!-- 此时必须设置use-default-filters=\"false\"，因为默认规则即扫描指定包下所有类 --></span>\n<span class=\"token comment\">&lt;!--\n    type：设置排除或包含的依据\n    type=\"annotation\"，根据注解指定，expression中设置要指定的注解的全类名\n    type=\"assignable\"，根据类型指定，expression中设置要指定的类型的全类名\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>include-filter</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>annotation<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.stereotype.Controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token comment\">&lt;!--&lt;context:include-filter type=\"assignable\"\n    expression=\"全类名\"/>--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<ul>\n<li><p>自动装配</p>\n<ul>\n<li><p>@Autowired，不需要提供setXxx()方法，可以标记在成员变量、构造器和set方法上</p>\n</li>\n<li><p>工作流程</p>\n<p>首先根据所需要的组件类型到IOC容器中查找 </p>\n<ul>\n<li>能够找到唯一的bean：直接执行装配 </li>\n<li>如果完全找不到匹配这个类型的bean：装配失败 </li>\n<li>和所需类型匹配的bean不止一个 </li>\n<li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配 <ul>\n<li>能够找到：执行装配 </li>\n<li>找不到：装配失败 </li>\n</ul>\n</li>\n<li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配 <ul>\n<li>能够找到：执行装配 </li>\n<li>找不到：装配失败</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-AOP\"><a href=\"#6-AOP\" class=\"headerlink\" title=\"6. AOP\"></a>6. AOP</h2><ol>\n<li><p>描述：</p>\n<p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面 向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况 下给程序动态统一添加额外功能的一种技术。本质就是一个动态代理，让我们把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。</p>\n</li>\n<li><p>相关概念</p>\n<ul>\n<li>Aspect：切面，即一个横跨多个核心逻辑的功能，或者称之为系统关注点；封装通知方法的类。</li>\n<li>Joinpoint：连接点，即定义在应用程序流程的何处插入切面的执行；向目标对象应用通知之后创建的代理对象。</li>\n<li>Pointcut：切入点，即一组连接点的集合；每个类的方法中都包含多个连接点，</li>\n<li>Advice：增强，指特定连接点上执行的动作；</li>\n<li>Introduction：引介，指为一个已有的Java对象动态地增加新的接口；</li>\n<li>Weaving：织入，指将切面整合到程序的执行流程中；</li>\n<li>Interceptor：拦截器，是一种实现增强的方式；</li>\n<li>Target Object：目标对象，即真正执行业务的核心逻辑对象；被代理的目标对象。</li>\n<li>AOP Proxy：AOP代理，是客户端持有的增强后的对象引用；向目标对象应用通知之后创建的代理对象。</li>\n</ul>\n</li>\n<li><p>作用：</p>\n<ul>\n<li>简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性。 </li>\n<li>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就 被切面给增强了。</li>\n</ul>\n</li>\n<li><p>基于注解的AOP</p>\n<ol>\n<li><p>说明</p>\n<ul>\n<li><p>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因 为这个技术要求代理对象和目标对象实现同样的接口。 </p>\n</li>\n<li><p>cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口。 </p>\n</li>\n<li><p>AspectJ：本质上是静态代理，将代理逻辑“织入”被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p>\n<ul>\n<li>@Aspect 将当前组件表示为切面</li>\n<li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li>\n<li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li>\n<li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li>\n<li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li>\n<li>@Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aspects<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--\n    基于注解的AOP的实现：\n    1、将目标对象和切面交给IOC容器管理（注解+扫描）\n    2、开启AspectJ的自动代理，为目标对象自动生成代理\n    3、将切面类通过注解@Aspect标识\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>包名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspectj-autoproxy</span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>切入点执行语法</p>\n<img src=\"/2020/10/02/ssm-kuang-jia-spring/image-4.png\" class=\"\"></li>\n<li><p>获取信息</p>\n<ul>\n<li><p>获取连接点信息</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public int com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">//获取连接点的声明信息 </span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">//获取目标方法到的实参信息 </span>\n    <span class=\"token class-name\">String</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logger-->前置通知，方法名：\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"，参数：\"</span><span class=\"token operator\">+</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取目标方法返回值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logger-->返回通知，方法名：\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"，结果：\"</span><span class=\"token operator\">+</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>获取目标方法的异常</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowingMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logger-->异常通知，方法名：\"</span><span class=\"token operator\">+</span>methodName<span class=\"token operator\">+</span><span class=\"token string\">\"，异常：\"</span><span class=\"token operator\">+</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>@Around</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.aop.annotation.TestImpl.*(..))\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">aroundMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法执行之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token comment\">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span>\n    \tresult <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法返回值之后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \tthrowable<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法出现异常时\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知-->目标对象方法执行完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>切面的优先级<br>相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。 </p>\n<ul>\n<li><p>外部切面的优先级比内部切面的优先级高</p>\n</li>\n<li><p>使用@Order注解可以控制切面的优先级： @Order(较小的数)：优先级高 @Order(较大的数)：优先级低</p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"7-声明式事务\"><a href=\"#7-声明式事务\" class=\"headerlink\" title=\"7. 声明式事务\"></a>7. 声明式事务</h2><ol>\n<li><p>JdbcTemplate</p>\n<ol>\n<li><p>依赖</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring 持久化层支持jar包 --></span>\n    <span class=\"token comment\">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个\n    jar包 --></span>\n    <span class=\"token comment\">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-orm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring 测试相关 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- junit测试 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- MySQL驱动 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.16<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 数据源 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.31<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--扫描组件--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.spring.tx.annotation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 导入外部属性文件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>property-placeholder</span> <span class=\"token attr-name\">location</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>classpath:jdbc.properties<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- 配置数据源 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>druidDataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.alibaba.druid.pool.DruidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置 JdbcTemplate --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbcTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.core.JdbcTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 装配数据源 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>druidDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>测试类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:spring-jdbc.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCTemplateTest</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>基于注解</p>\n<ol>\n<li>添加事务配置</li>\n</ol>\n <pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 配置事务管理器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--\n开启事务的注解驱动\n通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务\n--></span>\n<span class=\"token comment\">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就\n是这个默认值，则可以省略这个属性 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>annotation-driven</span> <span class=\"token attr-name\">transaction-manager</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>回滚策略<ul>\n<li>rollbackFor属性：需要设置一个Class类型的对象 </li>\n<li>rollbackForClassName属性：需要设置一个字符串类型的全类名 </li>\n<li>noRollbackFor属性：需要设置一个Class类型的对象 </li>\n<li>rollbackFor属性：需要设置一个字符串类型的全类名</li>\n</ul>\n</li>\n<li>事务隔离级别<ul>\n<li>读未提交：READ UNCOMMITTED 允许Transaction01读取Transaction02未提交的修改。 </li>\n<li>读已提交：READ COMMITTED、 要求Transaction01只能读取Transaction02已提交的修改。 </li>\n<li>可重复读：REPEATABLE READ 确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。 </li>\n<li>串行化：SERIALIZABLE 确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它 事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</li>\n</ul>\n</li>\n<li>事务传播行为<ul>\n<li>@Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开 启的事务可用，那么就在这个事务中运行。</li>\n<li>@Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启 的事务，都要开启新事务。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>基于xml</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 配置事务通知和切入点表达式 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>advisor</span> <span class=\"token attr-name\">advice-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>execution(*\n    com.learn.spring.tx.xml.service.impl.*.*(..))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>advisor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- tx:advice标签：配置事务通知 --></span>\n<span class=\"token comment\">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --></span>\n<span class=\"token comment\">&lt;!-- transaction-manager属性：关联事务管理器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>advice</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txAdvice<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transaction-manager</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transactionManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- tx:method标签：配置具体的事务方法 --></span>\n        <span class=\"token comment\">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>query*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>find*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\">&lt;!-- read-only属性：设置只读属性 --></span>\n        <span class=\"token comment\">&lt;!-- rollback-for属性：设置回滚的异常 --></span>\n        <span class=\"token comment\">&lt;!-- no-rollback-for属性：设置不回滚的异常 --></span>\n        <span class=\"token comment\">&lt;!-- isolation属性：设置事务的隔离级别 --></span>\n        <span class=\"token comment\">&lt;!-- timeout属性：设置事务的超时属性 --></span>\n        <span class=\"token comment\">&lt;!-- propagation属性：设置事务的传播行为 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>save*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rollback\u0002for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Exception<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>update*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rollback\u0002for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Exception<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">tx:</span>method</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>delete*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">read-only</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rollback\u0002for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.Exception<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">propagation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>REQUIRES_NEW<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>attributes</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">tx:</span>advice</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aspects<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n</li>\n</ol>\n"},{"title":"SSM框架 - SpringMVC","date":"2021-02-11T12:27:18.000Z","_content":"\n# SpringMVC\n\n## \t1. 描述\n\n​\tMVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分，SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、 WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目 表述层开发的首选方案。\n\n- M：Model，模型层，指工程中的JavaBean，作用是处理数据 JavaBean分为两类：\n\n  -  一类称为实体类Bean：专门存储业务数据的，如 Student、User 等 \n\n  - 一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。 \n- V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据\n- C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器 MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器。\n\n\n\n## 2. 特点\n\n\t- Spring 家族原生产品，与 IOC 容器等基础设施无缝对接 \n\t- 基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理 \n\t- 表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案 \n\t- 代码清新简洁，大幅度提升开发效率 \n\t- 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可 \n\t- 性能卓著，尤其适合现代大型、超大型互联网项目要求\n\n\n\n## 3. 配置\n\n```xml\n<dependencies>\n    <!-- SpringMVC -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>5.3.1</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n        <groupId>ch.qos.logback</groupId>\n        <artifactId>logback-classic</artifactId>\n        <version>1.2.3</version>\n    </dependency>\n    <!-- ServletAPI -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>3.1.0</version>\n        <scope>provided</scope>\n    </dependency>\n    <!-- Spring5和Thymeleaf整合包 -->\n    <dependency>\n        <groupId>org.thymeleaf</groupId>\n        <artifactId>thymeleaf-spring5</artifactId>\n        <version>3.0.12.RELEASE</version>\n    </dependency>\n</dependencies>\n```\n\n```xml\n<!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 -->\n<servlet>\n    <servlet-name>springMVC</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 -->\n    <init-param>\n        <!-- contextConfigLocation为固定值 -->\n        <param-name>contextConfigLocation</param-name>\n        <!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的\n        src/main/resources -->\n        <param-value>classpath:springMVC.xml</param-value>\n    </init-param>\n    <!--\n    作为框架的核心组件，在启动过程中有大量的初始化操作要做\n    而这些操作放在第一次请求时才执行会严重影响访问速度\n    因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时\n    -->\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springMVC</servlet-name>\n    <!--\n    设置springMVC的核心控制器所能处理的请求的请求路径\n    /所匹配的请求可以是/login或.html或.js或.css方式的请求路径\n    但是/不能匹配.jsp请求路径的请求\n    -->\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n```xml\n<!-- 自动扫描包 -->\n<context:component-scan base-package=\"com.atguigu.mvc.controller\"/>\n<!-- 配置Thymeleaf视图解析器 -->\n<bean id=\"viewResolver\"\nclass=\"org.thymeleaf.spring5.view.ThymeleafViewResolver\">\n    <property name=\"order\" value=\"1\"/>\n    <property name=\"characterEncoding\" value=\"UTF-8\"/>\n    <property name=\"templateEngine\">\n        <bean class=\"org.thymeleaf.spring5.SpringTemplateEngine\">\n        \t<property name=\"templateResolver\">\n                <bean\n                class=\"org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver\">\n                    <!-- 视图前缀 -->\n                    <property name=\"prefix\" value=\"/WEB-INF/templates/\"/>\n                    <!-- 视图后缀 -->\n                    <property name=\"suffix\" value=\".html\"/>\n                    <property name=\"templateMode\" value=\"HTML5\"/>\n                    <property name=\"characterEncoding\" value=\"UTF-8\" />\n                </bean>\n            </property>\n         </bean>\n    </property>\n</bean>\n<!--\n处理静态资源，例如html、js、css、jpg\n若只设置该标签，则只能访问静态资源，其他请求则无法访问\n此时必须设置<mvc:annotation-driven/>解决问题\n-->\n<mvc:default-servlet-handler/>\n<!-- 开启mvc注解驱动 -->\n<mvc:annotation-driven>\n    <mvc:message-converters>\n    <!-- 处理响应中文内容乱码 -->\n        <bean\n        class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n            <property name=\"defaultCharset\" value=\"UTF-8\" />\n            <property name=\"supportedMediaTypes\">\n                <list>\n                    <value>text/html</value>\n                    <value>application/json</value>\n                </list>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n\n\n## 4. @RequestMapping\n\n1. 作用：\n\n   就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。\n\n2. 位置：\n\n   - @RequestMapping标识一个类：设置映射请求的请求路径的初始信息 \n\n   - @RequestMapping标识一个方法：设置映射请求请求路径的具体信息\n\n3. value属性：\n\n   - @RequestMapping注解的value属性通过请求的请求地址匹配请求映射 \n\n   - @RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求\n\n   - @RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射\n\n4. method属性：\n\n   - @RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射 \n\n   - @RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求\n\n5. params属性：\n\n   - @RequestMapping注解的params属性通过请求的请求参数匹配请求映射 \n   - @RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系 \n     - \"param\"：要求请求映射所匹配的请求必须携带param请求参数\n     - \"!param\"：要求请求映射所匹配的请求必须不能携带param请求参数 \n     - \"param=value\"：要求请求映射所匹配的请求必须携带param请求参数且param=value \n     - \"param!=value\"：要求请求映射所匹配的请求必须携带param请求参数但是param!=value\n\n6. headers属性：\n\n   - @RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射 \n   - @RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系\n     - \"header\"：要求请求映射所匹配的请求必须携带header请求头信息 \n     - \"!header\"：要求请求映射所匹配的请求必须不能携带header请求头信息 \n     - \"header=value\"：要求请求映射所匹配的请求必须携带header请求头信息且header=value \n     - \"header!=value\"：要求请求映射所匹配的请求必须携带header请求头信息且header!=value\n\n7. SpringMVC支持ant风格的路径：\n\n   - ？：表示任意的单个字符 \n\n   - *：表示任意的0个或多个字符 \n\n   - **：表示任意层数的任意目录\n\n8. 支持路径中的占位符\n\n   SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。\n\n\n\n## 5. SpringMVC获取请求参数\n\n 1. 通过ServletAPI获取\n\n    ```java\n    @RequestMapping(\"/testParam\")\n    public String testParam(HttpServletRequest request){\n        String username = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        System.out.println(\"username:\"+username+\",password:\"+password);\n        return \"success\";\n    }\n    ```\n\n2. 通过控制器方法的形参获取\n\n   ```java\n   @RequestMapping(\"/testParam\")\n   public String testParam(String username, String password){\n       System.out.println(\"username:\"+username+\",password:\"+password);\n       return \"success\";\n   }\n   ```\n\n3. @RequestParam\n\n   - @RequestParam是将请求参数和控制器方法的形参创建映射关系 \n   - @RequestParam注解一共有三个属性： \n     - value：指定为形参赋值的请求参数的参数名 \n     - required：设置是否必须传输此请求参数，默认值为true \n       - 若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue属性，则页面报错400：Required String parameter 'xxx' is not present；\n       - 若设置为 false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为 null \n     - defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为\"\"时，则使用默认值为形参赋值\n\n4. @RequestHeader\n\n   - @RequestHeader是将请求头信息和控制器方法的形参创建映射关系 \n\n   - @RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam\n\n5. @CookieValue\n\n   - @CookieValue是将cookie数据和控制器方法的形参创建映射关系 \n   - @CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam\n\n6. 通过POJO获取\n\n   可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实 体类中的属性名一致，那么请求参数就会为此属性赋值\n\n   ```java\n   @RequestMapping(\"/testpojo\")\n   public String testPOJO(User user){\n       System.out.println(user);\n       return \"success\";\n   }\n   ```\n\n\n\n## 6. @RequestBody\n\n 1. @RequestBody\n\n    可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值\n\n    ```java\n    @RequestMapping(\"/test/RequestBody\")\n    public String testRequestBody(@RequestBody String requestBody){\n        System.out.println(\"requestBody:\"+requestBody);\n        return \"success\";\n    }\n    ```\n\n 2. @RequestBody获取json格式的请求参数\n\n    ```xml\n    <!-- 导入jackson的依赖 -->\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.12.1</version>\n    </dependency>\n    ```\n\n    ```java\n    //将json格式的数据转换为map集合\n    @RequestMapping(\"/test/RequestBody/json\")\n    public void testRequestBody(@RequestBody Map<String, Object> map,\n    HttpServletResponse response) throws IOException {\n        System.out.println(map);\n        //{username=admin, password=123456}\n        response.getWriter().print(\"hello,axios\");\n    }\n    \n    //将json格式的数据转换为实体类对象\n    @RequestMapping(\"/test/RequestBody/json\")\n    public void testRequestBody(@RequestBody User user, HttpServletResponse\n    response) throws IOException {\n        System.out.println(user);\n        //User{id=null, username='admin', password='123456', age=null,\n        gender='null'}\n        response.getWriter().print(\"hello,axios\");\n    }\n    ```\n\n\n\n\n## 7. @ResponseBody\n\n1. @ResponseBody\n\n   @ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器\n\n2. @ResponseBody响应浏览器json数据\n\n   服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为 json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为 json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能\n\n   ```xml\n   <!-- 导入jackson的依赖 -->\n   <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-databind</artifactId>\n       <version>2.12.1</version>\n   </dependency>\n   ```\n\n   ```java\n   //响应浏览器list集合\n   @RequestMapping(\"/test/ResponseBody/json\")\n   @ResponseBody\n   public List<User> testResponseBody(){\n       User user1 = new User(1001,\"admin1\",\"123456\",23,\"男\");\n       User user2 = new User(1002,\"admin2\",\"123456\",23,\"男\");\n       User user3 = new User(1003,\"admin3\",\"123456\",23,\"男\");\n       List<User> list = Arrays.asList(user1, user2, user3);\n       return list;\n   }\n   //响应浏览器map集合\n   @RequestMapping(\"/test/ResponseBody/json\")\n   @ResponseBody\n   public Map<String, Object> testResponseBody(){\n       User user1 = new User(1001,\"admin1\",\"123456\",23,\"男\");\n       User user2 = new User(1002,\"admin2\",\"123456\",23,\"男\");\n       User user3 = new User(1003,\"admin3\",\"123456\",23,\"男\");\n       Map<String, Object> map = new HashMap<>();\n       map.put(\"1001\", user1);\n       map.put(\"1002\", user2);\n       map.put(\"1003\", user3);\n       return map;\n   }\n   //响应浏览器实体类对象\n   @RequestMapping(\"/test/ResponseBody/json\")\n   @ResponseBody\n   public User testResponseBody(){\n   \treturn user;\n   }\n   ```\n\n\n\n## 8. @RestController注解\n\n​\t@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller注解，并且为其中的每个方法添加了@ResponseBody注解\n\n\n\n## 9. 拦截器\n\n1. 拦截器配置\n\n   - SpringMVC中的拦截器用于拦截控制器方法的执行 \n\n   - SpringMVC中的拦截器需要实现HandlerInterceptor \n\n   - SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：\n\n     ```xml\n     <bean class=\"com.learn.interceptor.MyInterceptor\"></bean>\n     <ref bean=\"MyInterceptor\"></ref>\n     <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->\n     <mvc:interceptor>\n         <mvc:mapping path=\"/**\"/>\n         <mvc:exclude-mapping path=\"/testRequestEntity\"/>\n         <ref bean=\"MyInterceptor\"></ref>\n     </mvc:interceptor>\n     <!--\n     以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过\n     mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求\n     -->\n     ```\n\n2. 三个抽象方法\n\n   - preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法 \n   - postHandle：控制器方法执行之后执行postHandle() \n   - afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()\n\n3. 执行顺序\n   1. 若每个拦截器的preHandle()都返回true 此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关： preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行 \n   2. 若某个拦截器的preHandle()返回了false preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false 的拦截器之前的拦截器的afterCompletion()会执行\n\n\n\n## 10. 注解配置MVC\n\n 1. 创建初始化类，代替web.xml\n\n    在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类， 如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配 置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自 动发现它，并用它来配置Servlet上下文。\n\n    ```java\n    public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n        \n        /**\n        * 指定spring的配置类\n        * @return\n        */\n        @Override\n        protected Class<?>[] getRootConfigClasses() {\n        \treturn new Class[]{SpringConfig.class};\n        }\n        \n        /**\n        * 指定SpringMVC的配置类\n        * @return\n        */\n        \n        @Override\n        protected Class<?>[] getServletConfigClasses() {\n        \treturn new Class[]{WebConfig.class};\n        }\n        /**\n        * 指定DispatcherServlet的映射规则，即url-pattern\n        * @return\n        */\n        \n        @Override\n        protected String[] getServletMappings() {\n        \treturn new String[]{\"/\"};\n        }\n        \n        /**\n        * 添加过滤器\n        * @return\n        */\n        @Override\n        protected Filter[] getServletFilters() {\n            CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter();\n            encodingFilter.setEncoding(\"UTF-8\");\n            encodingFilter.setForceRequestEncoding(true);\n            HiddenHttpMethodFilter hiddenHttpMethodFilter = new\n            HiddenHttpMethodFilter();\n            return new Filter[]{encodingFilter, hiddenHttpMethodFilter};\n        }\n    }\n    ```\n\n 2. 创建SpringConfig配置类，代替spring的配置文件\n\n    ```java\n    @Configuration\n    public class SpringConfig {\n    \t//ssm整合之后，spring的配置信息写在此类中\n    }\n    ```\n\n 3. 创建WebConfig配置类，代替SpringMVC的配置文件\n\n    ```java\n    @Configuration\n    //扫描组件\n    @ComponentScan(\"com.atguigu.mvc.controller\")\n    //开启MVC注解驱动\n    @EnableWebMvc\n    public class WebConfig implements WebMvcConfigurer {\n        \n        //使用默认的servlet处理静态资源\n        @Override\n        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer\n        configurer) {\n        \tconfigurer.enable();\n        }\n        \n        //配置文件上传解析器\n        @Bean\n        public CommonsMultipartResolver multipartResolver(){\n        \treturn new CommonsMultipartResolver();\n        }\n        \n        //配置拦截器\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n        \tMyInterceptor MyInterceptor = new MyInterceptor();\n        \tregistry.addInterceptor(MyInterceptor).addPathPatterns(\"/**\");\n        }\n        \n        //配置生成模板解析器\n        @Bean\n        public ITemplateResolver templateResolver() {\n            WebApplicationContext webApplicationContext =\n            ContextLoader.getCurrentWebApplicationContext();\n            // ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过\n            WebApplicationContext 的方法获得\n            ServletContextTemplateResolver templateResolver = new\n            ServletContextTemplateResolver(\n            webApplicationContext.getServletContext());\n            templateResolver.setPrefix(\"/WEB-INF/templates/\");\n            templateResolver.setSuffix(\".html\");\n            templateResolver.setCharacterEncoding(\"UTF-8\");\n            templateResolver.setTemplateMode(TemplateMode.HTML);\n            return templateResolver;\n        }\n        \n        //生成模板引擎并为模板引擎注入模板解析器\n        @Bean\n        public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {\n            SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n            templateEngine.setTemplateResolver(templateResolver);\n            return templateEngine;\n        }\n        \n        //生成视图解析器并为解析器注入模板引擎\n        @Bean\n        public ViewResolver viewResolver(SpringTemplateEngine templateEngine) {\n        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();\n        viewResolver.setCharacterEncoding(\"UTF-8\");\n        viewResolver.setTemplateEngine(templateEngine);\n        return viewResolver;\n        }\n    }\n    ```\n\n\n\n## 11. SpringMVC执行流程\n\n 1. SpringMVC常用组件\n\n    - DispatcherServlet：前端控制器，不需要工程师开发，由框架提供。\n\n      作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求 \n\n    - HandlerMapping：处理器映射器，不需要工程师开发，由框架提供。\n\n      作用：根据请求的url、method等信息查找Handler，即控制器方法 \n\n    - Handler：处理器，需要工程师开发。\n\n      作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理\n\n    - HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供。\n\n      作用：通过HandlerAdapter对处理器（控制器方法）进行执行 \n\n    - ViewResolver：视图解析器，不需要工程师开发，由框架提供。\n\n      作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView \n\n    - View：视图 \n\n      作用：将模型数据通过页面展示给用户\n\n","source":"_posts/ssm框架-SpringMVC.md","raw":"---\ntitle: SSM框架 - SpringMVC\ndate: 2021-02-11 20:27:18\ntags: JAVA\ncategories: 编程\n---\n\n# SpringMVC\n\n## \t1. 描述\n\n​\tMVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分，SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、 WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目 表述层开发的首选方案。\n\n- M：Model，模型层，指工程中的JavaBean，作用是处理数据 JavaBean分为两类：\n\n  -  一类称为实体类Bean：专门存储业务数据的，如 Student、User 等 \n\n  - 一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。 \n- V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据\n- C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器 MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器。\n\n\n\n## 2. 特点\n\n\t- Spring 家族原生产品，与 IOC 容器等基础设施无缝对接 \n\t- 基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理 \n\t- 表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案 \n\t- 代码清新简洁，大幅度提升开发效率 \n\t- 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可 \n\t- 性能卓著，尤其适合现代大型、超大型互联网项目要求\n\n\n\n## 3. 配置\n\n```xml\n<dependencies>\n    <!-- SpringMVC -->\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-webmvc</artifactId>\n        <version>5.3.1</version>\n    </dependency>\n    <!-- 日志 -->\n    <dependency>\n        <groupId>ch.qos.logback</groupId>\n        <artifactId>logback-classic</artifactId>\n        <version>1.2.3</version>\n    </dependency>\n    <!-- ServletAPI -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>3.1.0</version>\n        <scope>provided</scope>\n    </dependency>\n    <!-- Spring5和Thymeleaf整合包 -->\n    <dependency>\n        <groupId>org.thymeleaf</groupId>\n        <artifactId>thymeleaf-spring5</artifactId>\n        <version>3.0.12.RELEASE</version>\n    </dependency>\n</dependencies>\n```\n\n```xml\n<!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 -->\n<servlet>\n    <servlet-name>springMVC</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 -->\n    <init-param>\n        <!-- contextConfigLocation为固定值 -->\n        <param-name>contextConfigLocation</param-name>\n        <!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的\n        src/main/resources -->\n        <param-value>classpath:springMVC.xml</param-value>\n    </init-param>\n    <!--\n    作为框架的核心组件，在启动过程中有大量的初始化操作要做\n    而这些操作放在第一次请求时才执行会严重影响访问速度\n    因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时\n    -->\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springMVC</servlet-name>\n    <!--\n    设置springMVC的核心控制器所能处理的请求的请求路径\n    /所匹配的请求可以是/login或.html或.js或.css方式的请求路径\n    但是/不能匹配.jsp请求路径的请求\n    -->\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n```xml\n<!-- 自动扫描包 -->\n<context:component-scan base-package=\"com.atguigu.mvc.controller\"/>\n<!-- 配置Thymeleaf视图解析器 -->\n<bean id=\"viewResolver\"\nclass=\"org.thymeleaf.spring5.view.ThymeleafViewResolver\">\n    <property name=\"order\" value=\"1\"/>\n    <property name=\"characterEncoding\" value=\"UTF-8\"/>\n    <property name=\"templateEngine\">\n        <bean class=\"org.thymeleaf.spring5.SpringTemplateEngine\">\n        \t<property name=\"templateResolver\">\n                <bean\n                class=\"org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver\">\n                    <!-- 视图前缀 -->\n                    <property name=\"prefix\" value=\"/WEB-INF/templates/\"/>\n                    <!-- 视图后缀 -->\n                    <property name=\"suffix\" value=\".html\"/>\n                    <property name=\"templateMode\" value=\"HTML5\"/>\n                    <property name=\"characterEncoding\" value=\"UTF-8\" />\n                </bean>\n            </property>\n         </bean>\n    </property>\n</bean>\n<!--\n处理静态资源，例如html、js、css、jpg\n若只设置该标签，则只能访问静态资源，其他请求则无法访问\n此时必须设置<mvc:annotation-driven/>解决问题\n-->\n<mvc:default-servlet-handler/>\n<!-- 开启mvc注解驱动 -->\n<mvc:annotation-driven>\n    <mvc:message-converters>\n    <!-- 处理响应中文内容乱码 -->\n        <bean\n        class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n            <property name=\"defaultCharset\" value=\"UTF-8\" />\n            <property name=\"supportedMediaTypes\">\n                <list>\n                    <value>text/html</value>\n                    <value>application/json</value>\n                </list>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n\n\n## 4. @RequestMapping\n\n1. 作用：\n\n   就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。\n\n2. 位置：\n\n   - @RequestMapping标识一个类：设置映射请求的请求路径的初始信息 \n\n   - @RequestMapping标识一个方法：设置映射请求请求路径的具体信息\n\n3. value属性：\n\n   - @RequestMapping注解的value属性通过请求的请求地址匹配请求映射 \n\n   - @RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求\n\n   - @RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射\n\n4. method属性：\n\n   - @RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射 \n\n   - @RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求\n\n5. params属性：\n\n   - @RequestMapping注解的params属性通过请求的请求参数匹配请求映射 \n   - @RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系 \n     - \"param\"：要求请求映射所匹配的请求必须携带param请求参数\n     - \"!param\"：要求请求映射所匹配的请求必须不能携带param请求参数 \n     - \"param=value\"：要求请求映射所匹配的请求必须携带param请求参数且param=value \n     - \"param!=value\"：要求请求映射所匹配的请求必须携带param请求参数但是param!=value\n\n6. headers属性：\n\n   - @RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射 \n   - @RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系\n     - \"header\"：要求请求映射所匹配的请求必须携带header请求头信息 \n     - \"!header\"：要求请求映射所匹配的请求必须不能携带header请求头信息 \n     - \"header=value\"：要求请求映射所匹配的请求必须携带header请求头信息且header=value \n     - \"header!=value\"：要求请求映射所匹配的请求必须携带header请求头信息且header!=value\n\n7. SpringMVC支持ant风格的路径：\n\n   - ？：表示任意的单个字符 \n\n   - *：表示任意的0个或多个字符 \n\n   - **：表示任意层数的任意目录\n\n8. 支持路径中的占位符\n\n   SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。\n\n\n\n## 5. SpringMVC获取请求参数\n\n 1. 通过ServletAPI获取\n\n    ```java\n    @RequestMapping(\"/testParam\")\n    public String testParam(HttpServletRequest request){\n        String username = request.getParameter(\"username\");\n        String password = request.getParameter(\"password\");\n        System.out.println(\"username:\"+username+\",password:\"+password);\n        return \"success\";\n    }\n    ```\n\n2. 通过控制器方法的形参获取\n\n   ```java\n   @RequestMapping(\"/testParam\")\n   public String testParam(String username, String password){\n       System.out.println(\"username:\"+username+\",password:\"+password);\n       return \"success\";\n   }\n   ```\n\n3. @RequestParam\n\n   - @RequestParam是将请求参数和控制器方法的形参创建映射关系 \n   - @RequestParam注解一共有三个属性： \n     - value：指定为形参赋值的请求参数的参数名 \n     - required：设置是否必须传输此请求参数，默认值为true \n       - 若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue属性，则页面报错400：Required String parameter 'xxx' is not present；\n       - 若设置为 false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为 null \n     - defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为\"\"时，则使用默认值为形参赋值\n\n4. @RequestHeader\n\n   - @RequestHeader是将请求头信息和控制器方法的形参创建映射关系 \n\n   - @RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam\n\n5. @CookieValue\n\n   - @CookieValue是将cookie数据和控制器方法的形参创建映射关系 \n   - @CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam\n\n6. 通过POJO获取\n\n   可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实 体类中的属性名一致，那么请求参数就会为此属性赋值\n\n   ```java\n   @RequestMapping(\"/testpojo\")\n   public String testPOJO(User user){\n       System.out.println(user);\n       return \"success\";\n   }\n   ```\n\n\n\n## 6. @RequestBody\n\n 1. @RequestBody\n\n    可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值\n\n    ```java\n    @RequestMapping(\"/test/RequestBody\")\n    public String testRequestBody(@RequestBody String requestBody){\n        System.out.println(\"requestBody:\"+requestBody);\n        return \"success\";\n    }\n    ```\n\n 2. @RequestBody获取json格式的请求参数\n\n    ```xml\n    <!-- 导入jackson的依赖 -->\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.12.1</version>\n    </dependency>\n    ```\n\n    ```java\n    //将json格式的数据转换为map集合\n    @RequestMapping(\"/test/RequestBody/json\")\n    public void testRequestBody(@RequestBody Map<String, Object> map,\n    HttpServletResponse response) throws IOException {\n        System.out.println(map);\n        //{username=admin, password=123456}\n        response.getWriter().print(\"hello,axios\");\n    }\n    \n    //将json格式的数据转换为实体类对象\n    @RequestMapping(\"/test/RequestBody/json\")\n    public void testRequestBody(@RequestBody User user, HttpServletResponse\n    response) throws IOException {\n        System.out.println(user);\n        //User{id=null, username='admin', password='123456', age=null,\n        gender='null'}\n        response.getWriter().print(\"hello,axios\");\n    }\n    ```\n\n\n\n\n## 7. @ResponseBody\n\n1. @ResponseBody\n\n   @ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器\n\n2. @ResponseBody响应浏览器json数据\n\n   服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为 json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为 json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能\n\n   ```xml\n   <!-- 导入jackson的依赖 -->\n   <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-databind</artifactId>\n       <version>2.12.1</version>\n   </dependency>\n   ```\n\n   ```java\n   //响应浏览器list集合\n   @RequestMapping(\"/test/ResponseBody/json\")\n   @ResponseBody\n   public List<User> testResponseBody(){\n       User user1 = new User(1001,\"admin1\",\"123456\",23,\"男\");\n       User user2 = new User(1002,\"admin2\",\"123456\",23,\"男\");\n       User user3 = new User(1003,\"admin3\",\"123456\",23,\"男\");\n       List<User> list = Arrays.asList(user1, user2, user3);\n       return list;\n   }\n   //响应浏览器map集合\n   @RequestMapping(\"/test/ResponseBody/json\")\n   @ResponseBody\n   public Map<String, Object> testResponseBody(){\n       User user1 = new User(1001,\"admin1\",\"123456\",23,\"男\");\n       User user2 = new User(1002,\"admin2\",\"123456\",23,\"男\");\n       User user3 = new User(1003,\"admin3\",\"123456\",23,\"男\");\n       Map<String, Object> map = new HashMap<>();\n       map.put(\"1001\", user1);\n       map.put(\"1002\", user2);\n       map.put(\"1003\", user3);\n       return map;\n   }\n   //响应浏览器实体类对象\n   @RequestMapping(\"/test/ResponseBody/json\")\n   @ResponseBody\n   public User testResponseBody(){\n   \treturn user;\n   }\n   ```\n\n\n\n## 8. @RestController注解\n\n​\t@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller注解，并且为其中的每个方法添加了@ResponseBody注解\n\n\n\n## 9. 拦截器\n\n1. 拦截器配置\n\n   - SpringMVC中的拦截器用于拦截控制器方法的执行 \n\n   - SpringMVC中的拦截器需要实现HandlerInterceptor \n\n   - SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：\n\n     ```xml\n     <bean class=\"com.learn.interceptor.MyInterceptor\"></bean>\n     <ref bean=\"MyInterceptor\"></ref>\n     <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->\n     <mvc:interceptor>\n         <mvc:mapping path=\"/**\"/>\n         <mvc:exclude-mapping path=\"/testRequestEntity\"/>\n         <ref bean=\"MyInterceptor\"></ref>\n     </mvc:interceptor>\n     <!--\n     以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过\n     mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求\n     -->\n     ```\n\n2. 三个抽象方法\n\n   - preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法 \n   - postHandle：控制器方法执行之后执行postHandle() \n   - afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()\n\n3. 执行顺序\n   1. 若每个拦截器的preHandle()都返回true 此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关： preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行 \n   2. 若某个拦截器的preHandle()返回了false preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false 的拦截器之前的拦截器的afterCompletion()会执行\n\n\n\n## 10. 注解配置MVC\n\n 1. 创建初始化类，代替web.xml\n\n    在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类， 如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配 置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自 动发现它，并用它来配置Servlet上下文。\n\n    ```java\n    public class WebInit extends AbstractAnnotationConfigDispatcherServletInitializer {\n        \n        /**\n        * 指定spring的配置类\n        * @return\n        */\n        @Override\n        protected Class<?>[] getRootConfigClasses() {\n        \treturn new Class[]{SpringConfig.class};\n        }\n        \n        /**\n        * 指定SpringMVC的配置类\n        * @return\n        */\n        \n        @Override\n        protected Class<?>[] getServletConfigClasses() {\n        \treturn new Class[]{WebConfig.class};\n        }\n        /**\n        * 指定DispatcherServlet的映射规则，即url-pattern\n        * @return\n        */\n        \n        @Override\n        protected String[] getServletMappings() {\n        \treturn new String[]{\"/\"};\n        }\n        \n        /**\n        * 添加过滤器\n        * @return\n        */\n        @Override\n        protected Filter[] getServletFilters() {\n            CharacterEncodingFilter encodingFilter = new CharacterEncodingFilter();\n            encodingFilter.setEncoding(\"UTF-8\");\n            encodingFilter.setForceRequestEncoding(true);\n            HiddenHttpMethodFilter hiddenHttpMethodFilter = new\n            HiddenHttpMethodFilter();\n            return new Filter[]{encodingFilter, hiddenHttpMethodFilter};\n        }\n    }\n    ```\n\n 2. 创建SpringConfig配置类，代替spring的配置文件\n\n    ```java\n    @Configuration\n    public class SpringConfig {\n    \t//ssm整合之后，spring的配置信息写在此类中\n    }\n    ```\n\n 3. 创建WebConfig配置类，代替SpringMVC的配置文件\n\n    ```java\n    @Configuration\n    //扫描组件\n    @ComponentScan(\"com.atguigu.mvc.controller\")\n    //开启MVC注解驱动\n    @EnableWebMvc\n    public class WebConfig implements WebMvcConfigurer {\n        \n        //使用默认的servlet处理静态资源\n        @Override\n        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer\n        configurer) {\n        \tconfigurer.enable();\n        }\n        \n        //配置文件上传解析器\n        @Bean\n        public CommonsMultipartResolver multipartResolver(){\n        \treturn new CommonsMultipartResolver();\n        }\n        \n        //配置拦截器\n        @Override\n        public void addInterceptors(InterceptorRegistry registry) {\n        \tMyInterceptor MyInterceptor = new MyInterceptor();\n        \tregistry.addInterceptor(MyInterceptor).addPathPatterns(\"/**\");\n        }\n        \n        //配置生成模板解析器\n        @Bean\n        public ITemplateResolver templateResolver() {\n            WebApplicationContext webApplicationContext =\n            ContextLoader.getCurrentWebApplicationContext();\n            // ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过\n            WebApplicationContext 的方法获得\n            ServletContextTemplateResolver templateResolver = new\n            ServletContextTemplateResolver(\n            webApplicationContext.getServletContext());\n            templateResolver.setPrefix(\"/WEB-INF/templates/\");\n            templateResolver.setSuffix(\".html\");\n            templateResolver.setCharacterEncoding(\"UTF-8\");\n            templateResolver.setTemplateMode(TemplateMode.HTML);\n            return templateResolver;\n        }\n        \n        //生成模板引擎并为模板引擎注入模板解析器\n        @Bean\n        public SpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {\n            SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n            templateEngine.setTemplateResolver(templateResolver);\n            return templateEngine;\n        }\n        \n        //生成视图解析器并为解析器注入模板引擎\n        @Bean\n        public ViewResolver viewResolver(SpringTemplateEngine templateEngine) {\n        ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();\n        viewResolver.setCharacterEncoding(\"UTF-8\");\n        viewResolver.setTemplateEngine(templateEngine);\n        return viewResolver;\n        }\n    }\n    ```\n\n\n\n## 11. SpringMVC执行流程\n\n 1. SpringMVC常用组件\n\n    - DispatcherServlet：前端控制器，不需要工程师开发，由框架提供。\n\n      作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求 \n\n    - HandlerMapping：处理器映射器，不需要工程师开发，由框架提供。\n\n      作用：根据请求的url、method等信息查找Handler，即控制器方法 \n\n    - Handler：处理器，需要工程师开发。\n\n      作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理\n\n    - HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供。\n\n      作用：通过HandlerAdapter对处理器（控制器方法）进行执行 \n\n    - ViewResolver：视图解析器，不需要工程师开发，由框架提供。\n\n      作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView \n\n    - View：视图 \n\n      作用：将模型数据通过页面展示给用户\n\n","slug":"ssm框架-SpringMVC","published":1,"updated":"2022-08-25T11:54:46.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka3001m94wa7pzj19p7","content":"<h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><h2 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h2><p>​    MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分，SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、 WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目 表述层开发的首选方案。</p>\n<ul>\n<li><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据 JavaBean分为两类：</p>\n<ul>\n<li><p> 一类称为实体类Bean：专门存储业务数据的，如 Student、User 等 </p>\n</li>\n<li><p>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。 </p>\n</li>\n</ul>\n</li>\n<li><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>\n</li>\n<li><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器 MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器。</p>\n</li>\n</ul>\n<h2 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2. 特点\"></a>2. 特点</h2><pre><code>- Spring 家族原生产品，与 IOC 容器等基础设施无缝对接 \n- 基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理 \n- 表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案 \n- 代码清新简洁，大幅度提升开发效率 \n- 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可 \n- 性能卓著，尤其适合现代大型、超大型互联网项目要求\n</code></pre>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- SpringMVC --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 日志 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>ch.qos.logback<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>logback-classic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- ServletAPI --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring5和Thymeleaf整合包 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.thymeleaf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-spring5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.12.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>springMVC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- contextConfigLocation为固定值 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的\n        src/main/resources --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:springMVC.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--\n    作为框架的核心组件，在启动过程中有大量的初始化操作要做\n    而这些操作放在第一次请求时才执行会严重影响访问速度\n    因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>springMVC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--\n    设置springMVC的核心控制器所能处理的请求的请求路径\n    /所匹配的请求可以是/login或.html或.js或.css方式的请求路径\n    但是/不能匹配.jsp请求路径的请求\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 自动扫描包 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.mvc.controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- 配置Thymeleaf视图解析器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewResolver<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>order<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>characterEncoding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateEngine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span>\n                <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token comment\">&lt;!-- 视图前缀 --></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/templates/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n                    <span class=\"token comment\">&lt;!-- 视图后缀 --></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateMode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTML5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>characterEncoding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--\n处理静态资源，例如html、js、css、jpg\n若只设置该标签，则只能访问静态资源，其他请求则无法访问\n此时必须设置&lt;mvc:annotation-driven/>解决问题\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>default-servlet-handler</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- 开启mvc注解驱动 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>message-converters</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 处理响应中文内容乱码 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.http.converter.StringHttpMessageConverter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultCharset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>supportedMediaTypes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>text/html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>application/json<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>message-converters</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-RequestMapping\"><a href=\"#4-RequestMapping\" class=\"headerlink\" title=\"4. @RequestMapping\"></a>4. @RequestMapping</h2><ol>\n<li><p>作用：</p>\n<p>就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>\n</li>\n<li><p>位置：</p>\n<ul>\n<li><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息 </p>\n</li>\n<li><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>\n</li>\n</ul>\n</li>\n<li><p>value属性：</p>\n<ul>\n<li><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射 </p>\n</li>\n<li><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>\n</li>\n<li><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>\n</li>\n</ul>\n</li>\n<li><p>method属性：</p>\n<ul>\n<li><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射 </p>\n</li>\n<li><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>\n</li>\n</ul>\n</li>\n<li><p>params属性：</p>\n<ul>\n<li>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射 </li>\n<li>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系 <ul>\n<li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li>\n<li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数 </li>\n<li>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value </li>\n<li>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>headers属性：</p>\n<ul>\n<li>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射 </li>\n<li>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系<ul>\n<li>“header”：要求请求映射所匹配的请求必须携带header请求头信息 </li>\n<li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息 </li>\n<li>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value </li>\n<li>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>SpringMVC支持ant风格的路径：</p>\n<ul>\n<li><p>？：表示任意的单个字符 </p>\n</li>\n<li><p>*：表示任意的0个或多个字符 </p>\n</li>\n<li><p>**：表示任意层数的任意目录</p>\n</li>\n</ul>\n</li>\n<li><p>支持路径中的占位符</p>\n<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。</p>\n</li>\n</ol>\n<h2 id=\"5-SpringMVC获取请求参数\"><a href=\"#5-SpringMVC获取请求参数\" class=\"headerlink\" title=\"5. SpringMVC获取请求参数\"></a>5. SpringMVC获取请求参数</h2><ol>\n<li><p>通过ServletAPI获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testParam\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token operator\">+</span><span class=\"token string\">\",password:\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过控制器方法的形参获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testParam\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token operator\">+</span><span class=\"token string\">\",password:\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@RequestParam</p>\n<ul>\n<li>@RequestParam是将请求参数和控制器方法的形参创建映射关系 </li>\n<li>@RequestParam注解一共有三个属性： <ul>\n<li>value：指定为形参赋值的请求参数的参数名 </li>\n<li>required：设置是否必须传输此请求参数，默认值为true <ul>\n<li>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；</li>\n<li>若设置为 false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为 null </li>\n</ul>\n</li>\n<li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>@RequestHeader</p>\n<ul>\n<li><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系 </p>\n</li>\n<li><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>\n</li>\n</ul>\n</li>\n<li><p>@CookieValue</p>\n<ul>\n<li>@CookieValue是将cookie数据和控制器方法的形参创建映射关系 </li>\n<li>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</li>\n</ul>\n</li>\n<li><p>通过POJO获取</p>\n<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实 体类中的属性名一致，那么请求参数就会为此属性赋值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpojo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testPOJO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"6-RequestBody\"><a href=\"#6-RequestBody\" class=\"headerlink\" title=\"6. @RequestBody\"></a>6. @RequestBody</h2><ol>\n<li><p>@RequestBody</p>\n<p>可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/RequestBody\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">String</span> requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requestBody:\"</span><span class=\"token operator\">+</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@RequestBody获取json格式的请求参数</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 导入jackson的依赖 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.12.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//将json格式的数据转换为map集合</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/RequestBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//&#123;username=admin, password=123456&#125;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将json格式的数据转换为实体类对象</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/RequestBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span>\nresponse<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//User&#123;id=null, username='admin', password='123456', age=null,</span>\n    gender<span class=\"token operator\">=</span><span class=\"token char\">'null'</span><span class=\"token punctuation\">&#125;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"7-ResponseBody\"><a href=\"#7-ResponseBody\" class=\"headerlink\" title=\"7. @ResponseBody\"></a>7. @ResponseBody</h2><ol>\n<li><p>@ResponseBody</p>\n<p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>\n</li>\n<li><p>@ResponseBody响应浏览器json数据</p>\n<p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为 json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为 json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 导入jackson的依赖 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.12.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//响应浏览器list集合</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/ResponseBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//响应浏览器map集合</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/ResponseBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1002\"</span><span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//响应浏览器实体类对象</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/ResponseBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"8-RestController注解\"><a href=\"#8-RestController注解\" class=\"headerlink\" title=\"8. @RestController注解\"></a>8. @RestController注解</h2><p>​    @RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>\n<h2 id=\"9-拦截器\"><a href=\"#9-拦截器\" class=\"headerlink\" title=\"9. 拦截器\"></a>9. 拦截器</h2><ol>\n<li><p>拦截器配置</p>\n<ul>\n<li><p>SpringMVC中的拦截器用于拦截控制器方法的执行 </p>\n</li>\n<li><p>SpringMVC中的拦截器需要实现HandlerInterceptor </p>\n</li>\n<li><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.interceptor.MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>interceptor</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>mapping</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/**<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>exclude-mapping</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/testRequestEntity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>interceptor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--\n以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过\nmvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求\n--></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>三个抽象方法</p>\n<ul>\n<li>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法 </li>\n<li>postHandle：控制器方法执行之后执行postHandle() </li>\n<li>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</li>\n</ul>\n</li>\n<li><p>执行顺序</p>\n<ol>\n<li>若每个拦截器的preHandle()都返回true 此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关： preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行 </li>\n<li>若某个拦截器的preHandle()返回了false preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false 的拦截器之前的拦截器的afterCompletion()会执行</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"10-注解配置MVC\"><a href=\"#10-注解配置MVC\" class=\"headerlink\" title=\"10. 注解配置MVC\"></a>10. 注解配置MVC</h2><ol>\n<li><p>创建初始化类，代替web.xml</p>\n<p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类， 如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配 置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自 动发现它，并用它来配置Servlet上下文。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebInit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">/**\n    * 指定spring的配置类\n    * @return\n    */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">/**\n    * 指定SpringMVC的配置类\n    * @return\n    */</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">WebConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n    * 指定DispatcherServlet的映射规则，即url-pattern\n    * @return\n    */</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">/**\n    * 添加过滤器\n    * @return\n    */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">CharacterEncodingFilter</span> encodingFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        encodingFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        encodingFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setForceRequestEncoding</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HiddenHttpMethodFilter</span> hiddenHttpMethodFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n        <span class=\"token class-name\">HiddenHttpMethodFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>encodingFilter<span class=\"token punctuation\">,</span> hiddenHttpMethodFilter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建SpringConfig配置类，代替spring的配置文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//ssm整合之后，spring的配置信息写在此类中</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建WebConfig配置类，代替SpringMVC的配置文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token comment\">//扫描组件</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.atguigu.mvc.controller\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//开启MVC注解驱动</span>\n<span class=\"token annotation punctuation\">@EnableWebMvc</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">//使用默认的servlet处理静态资源</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureDefaultServletHandling</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultServletHandlerConfigurer</span>\n    configurer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \tconfigurer<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//配置文件上传解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonsMultipartResolver</span> <span class=\"token function\">multipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonsMultipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//配置拦截器</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">MyInterceptor</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tregistry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//配置生成模板解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ITemplateResolver</span> <span class=\"token function\">templateResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">WebApplicationContext</span> webApplicationContext <span class=\"token operator\">=</span>\n        <span class=\"token class-name\">ContextLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过</span>\n        <span class=\"token class-name\">WebApplicationContext</span> 的方法获得\n        <span class=\"token class-name\">ServletContextTemplateResolver</span> templateResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n        <span class=\"token class-name\">ServletContextTemplateResolver</span><span class=\"token punctuation\">(</span>\n        webApplicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/templates/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemplateMode</span><span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> templateResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//生成模板引擎并为模板引擎注入模板解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringTemplateEngine</span> <span class=\"token function\">templateEngine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ITemplateResolver</span> templateResolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringTemplateEngine</span> templateEngine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateEngine<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateResolver</span><span class=\"token punctuation\">(</span>templateResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> templateEngine<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//生成视图解析器并为解析器注入模板引擎</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewResolver</span> <span class=\"token function\">viewResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringTemplateEngine</span> templateEngine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ThymeleafViewResolver</span> viewResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThymeleafViewResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateEngine</span><span class=\"token punctuation\">(</span>templateEngine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> viewResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"11-SpringMVC执行流程\"><a href=\"#11-SpringMVC执行流程\" class=\"headerlink\" title=\"11. SpringMVC执行流程\"></a>11. SpringMVC执行流程</h2><ol>\n<li><p>SpringMVC常用组件</p>\n<ul>\n<li><p>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供。</p>\n<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求 </p>\n</li>\n<li><p>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供。</p>\n<p>作用：根据请求的url、method等信息查找Handler，即控制器方法 </p>\n</li>\n<li><p>Handler：处理器，需要工程师开发。</p>\n<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>\n</li>\n<li><p>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供。</p>\n<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行 </p>\n</li>\n<li><p>ViewResolver：视图解析器，不需要工程师开发，由框架提供。</p>\n<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView </p>\n</li>\n<li><p>View：视图 </p>\n<p>作用：将模型数据通过页面展示给用户</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringMVC\"><a href=\"#SpringMVC\" class=\"headerlink\" title=\"SpringMVC\"></a>SpringMVC</h1><h2 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h2><p>​    MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分，SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、 WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目 表述层开发的首选方案。</p>\n<ul>\n<li><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据 JavaBean分为两类：</p>\n<ul>\n<li><p> 一类称为实体类Bean：专门存储业务数据的，如 Student、User 等 </p>\n</li>\n<li><p>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。 </p>\n</li>\n</ul>\n</li>\n<li><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>\n</li>\n<li><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器 MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller 调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器。</p>\n</li>\n</ul>\n<h2 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2. 特点\"></a>2. 特点</h2><pre><code>- Spring 家族原生产品，与 IOC 容器等基础设施无缝对接 \n- 基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一 处理 \n- 表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案 \n- 代码清新简洁，大幅度提升开发效率 \n- 内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可 \n- 性能卓著，尤其适合现代大型、超大型互联网项目要求\n</code></pre>\n<h2 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3. 配置\"></a>3. 配置</h2><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- SpringMVC --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 日志 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>ch.qos.logback<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>logback-classic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- ServletAPI --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring5和Thymeleaf整合包 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.thymeleaf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-spring5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.12.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>springMVC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- contextConfigLocation为固定值 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的\n        src/main/resources --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:springMVC.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--\n    作为框架的核心组件，在启动过程中有大量的初始化操作要做\n    而这些操作放在第一次请求时才执行会严重影响访问速度\n    因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>springMVC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!--\n    设置springMVC的核心控制器所能处理的请求的请求路径\n    /所匹配的请求可以是/login或.html或.js或.css方式的请求路径\n    但是/不能匹配.jsp请求路径的请求\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 自动扫描包 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.atguigu.mvc.controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- 配置Thymeleaf视图解析器 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewResolver<span class=\"token punctuation\">\"</span></span>\n<span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>order<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>characterEncoding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateEngine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span>\n                <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token comment\">&lt;!-- 视图前缀 --></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/WEB-INF/templates/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n                    <span class=\"token comment\">&lt;!-- 视图后缀 --></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>suffix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>templateMode<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTML5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>characterEncoding<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--\n处理静态资源，例如html、js、css、jpg\n若只设置该标签，则只能访问静态资源，其他请求则无法访问\n此时必须设置&lt;mvc:annotation-driven/>解决问题\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>default-servlet-handler</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!-- 开启mvc注解驱动 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>message-converters</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 处理响应中文内容乱码 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.http.converter.StringHttpMessageConverter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultCharset<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>supportedMediaTypes<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>text/html<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>application/json<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>message-converters</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>annotation-driven</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-RequestMapping\"><a href=\"#4-RequestMapping\" class=\"headerlink\" title=\"4. @RequestMapping\"></a>4. @RequestMapping</h2><ol>\n<li><p>作用：</p>\n<p>就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>\n</li>\n<li><p>位置：</p>\n<ul>\n<li><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息 </p>\n</li>\n<li><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>\n</li>\n</ul>\n</li>\n<li><p>value属性：</p>\n<ul>\n<li><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射 </p>\n</li>\n<li><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>\n</li>\n<li><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>\n</li>\n</ul>\n</li>\n<li><p>method属性：</p>\n<ul>\n<li><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射 </p>\n</li>\n<li><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>\n</li>\n</ul>\n</li>\n<li><p>params属性：</p>\n<ul>\n<li>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射 </li>\n<li>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系 <ul>\n<li>“param”：要求请求映射所匹配的请求必须携带param请求参数</li>\n<li>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数 </li>\n<li>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value </li>\n<li>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>headers属性：</p>\n<ul>\n<li>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射 </li>\n<li>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系<ul>\n<li>“header”：要求请求映射所匹配的请求必须携带header请求头信息 </li>\n<li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息 </li>\n<li>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value </li>\n<li>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>SpringMVC支持ant风格的路径：</p>\n<ul>\n<li><p>？：表示任意的单个字符 </p>\n</li>\n<li><p>*：表示任意的0个或多个字符 </p>\n</li>\n<li><p>**：表示任意层数的任意目录</p>\n</li>\n</ul>\n</li>\n<li><p>支持路径中的占位符</p>\n<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。</p>\n</li>\n</ol>\n<h2 id=\"5-SpringMVC获取请求参数\"><a href=\"#5-SpringMVC获取请求参数\" class=\"headerlink\" title=\"5. SpringMVC获取请求参数\"></a>5. SpringMVC获取请求参数</h2><ol>\n<li><p>通过ServletAPI获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testParam\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token operator\">+</span><span class=\"token string\">\",password:\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过控制器方法的形参获取</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testParam\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token operator\">+</span><span class=\"token string\">\",password:\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@RequestParam</p>\n<ul>\n<li>@RequestParam是将请求参数和控制器方法的形参创建映射关系 </li>\n<li>@RequestParam注解一共有三个属性： <ul>\n<li>value：指定为形参赋值的请求参数的参数名 </li>\n<li>required：设置是否必须传输此请求参数，默认值为true <ul>\n<li>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；</li>\n<li>若设置为 false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为 null </li>\n</ul>\n</li>\n<li>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>@RequestHeader</p>\n<ul>\n<li><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系 </p>\n</li>\n<li><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>\n</li>\n</ul>\n</li>\n<li><p>@CookieValue</p>\n<ul>\n<li>@CookieValue是将cookie数据和控制器方法的形参创建映射关系 </li>\n<li>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</li>\n</ul>\n</li>\n<li><p>通过POJO获取</p>\n<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实 体类中的属性名一致，那么请求参数就会为此属性赋值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testpojo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testPOJO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"6-RequestBody\"><a href=\"#6-RequestBody\" class=\"headerlink\" title=\"6. @RequestBody\"></a>6. @RequestBody</h2><ol>\n<li><p>@RequestBody</p>\n<p>可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/RequestBody\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">String</span> requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"requestBody:\"</span><span class=\"token operator\">+</span>requestBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>@RequestBody获取json格式的请求参数</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 导入jackson的依赖 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.12.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//将json格式的数据转换为map集合</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/RequestBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span>\n<span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//&#123;username=admin, password=123456&#125;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//将json格式的数据转换为实体类对象</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/RequestBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span>\nresponse<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//User&#123;id=null, username='admin', password='123456', age=null,</span>\n    gender<span class=\"token operator\">=</span><span class=\"token char\">'null'</span><span class=\"token punctuation\">&#125;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,axios\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"7-ResponseBody\"><a href=\"#7-ResponseBody\" class=\"headerlink\" title=\"7. @ResponseBody\"></a>7. @ResponseBody</h2><ol>\n<li><p>@ResponseBody</p>\n<p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>\n</li>\n<li><p>@ResponseBody响应浏览器json数据</p>\n<p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为 json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为 json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- 导入jackson的依赖 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.12.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//响应浏览器list集合</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/ResponseBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//响应浏览器map集合</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/ResponseBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">User</span> user3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1002\"</span><span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//响应浏览器实体类对象</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test/ResponseBody/json\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ResponseBody</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">testResponseBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"8-RestController注解\"><a href=\"#8-RestController注解\" class=\"headerlink\" title=\"8. @RestController注解\"></a>8. @RestController注解</h2><p>​    @RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>\n<h2 id=\"9-拦截器\"><a href=\"#9-拦截器\" class=\"headerlink\" title=\"9. 拦截器\"></a>9. 拦截器</h2><ol>\n<li><p>拦截器配置</p>\n<ul>\n<li><p>SpringMVC中的拦截器用于拦截控制器方法的执行 </p>\n</li>\n<li><p>SpringMVC中的拦截器需要实现HandlerInterceptor </p>\n</li>\n<li><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.learn.interceptor.MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>interceptor</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>mapping</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/**<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>exclude-mapping</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/testRequestEntity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ref</span> <span class=\"token attr-name\">bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyInterceptor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ref</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">mvc:</span>interceptor</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--\n以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过\nmvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求\n--></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>三个抽象方法</p>\n<ul>\n<li>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法 </li>\n<li>postHandle：控制器方法执行之后执行postHandle() </li>\n<li>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</li>\n</ul>\n</li>\n<li><p>执行顺序</p>\n<ol>\n<li>若每个拦截器的preHandle()都返回true 此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关： preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行 </li>\n<li>若某个拦截器的preHandle()返回了false preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false 的拦截器之前的拦截器的afterCompletion()会执行</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"10-注解配置MVC\"><a href=\"#10-注解配置MVC\" class=\"headerlink\" title=\"10. 注解配置MVC\"></a>10. 注解配置MVC</h2><ol>\n<li><p>创建初始化类，代替web.xml</p>\n<p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类， 如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配 置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自 动发现它，并用它来配置Servlet上下文。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebInit</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">/**\n    * 指定spring的配置类\n    * @return\n    */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">/**\n    * 指定SpringMVC的配置类\n    * @return\n    */</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">WebConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n    * 指定DispatcherServlet的映射规则，即url-pattern\n    * @return\n    */</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">/**\n    * 添加过滤器\n    * @return\n    */</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">CharacterEncodingFilter</span> encodingFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        encodingFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        encodingFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setForceRequestEncoding</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HiddenHttpMethodFilter</span> hiddenHttpMethodFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n        <span class=\"token class-name\">HiddenHttpMethodFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>encodingFilter<span class=\"token punctuation\">,</span> hiddenHttpMethodFilter<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建SpringConfig配置类，代替spring的配置文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//ssm整合之后，spring的配置信息写在此类中</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建WebConfig配置类，代替SpringMVC的配置文件</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token comment\">//扫描组件</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.atguigu.mvc.controller\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//开启MVC注解驱动</span>\n<span class=\"token annotation punctuation\">@EnableWebMvc</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token comment\">//使用默认的servlet处理静态资源</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configureDefaultServletHandling</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultServletHandlerConfigurer</span>\n    configurer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \tconfigurer<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//配置文件上传解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonsMultipartResolver</span> <span class=\"token function\">multipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonsMultipartResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//配置拦截器</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">MyInterceptor</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tregistry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//配置生成模板解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ITemplateResolver</span> <span class=\"token function\">templateResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">WebApplicationContext</span> webApplicationContext <span class=\"token operator\">=</span>\n        <span class=\"token class-name\">ContextLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过</span>\n        <span class=\"token class-name\">WebApplicationContext</span> 的方法获得\n        <span class=\"token class-name\">ServletContextTemplateResolver</span> templateResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\n        <span class=\"token class-name\">ServletContextTemplateResolver</span><span class=\"token punctuation\">(</span>\n        webApplicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/templates/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemplateMode</span><span class=\"token punctuation\">.</span>HTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> templateResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//生成模板引擎并为模板引擎注入模板解析器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SpringTemplateEngine</span> <span class=\"token function\">templateEngine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ITemplateResolver</span> templateResolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">SpringTemplateEngine</span> templateEngine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpringTemplateEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        templateEngine<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateResolver</span><span class=\"token punctuation\">(</span>templateResolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> templateEngine<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//生成视图解析器并为解析器注入模板引擎</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewResolver</span> <span class=\"token function\">viewResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringTemplateEngine</span> templateEngine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ThymeleafViewResolver</span> viewResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThymeleafViewResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    viewResolver<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateEngine</span><span class=\"token punctuation\">(</span>templateEngine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> viewResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"11-SpringMVC执行流程\"><a href=\"#11-SpringMVC执行流程\" class=\"headerlink\" title=\"11. SpringMVC执行流程\"></a>11. SpringMVC执行流程</h2><ol>\n<li><p>SpringMVC常用组件</p>\n<ul>\n<li><p>DispatcherServlet：前端控制器，不需要工程师开发，由框架提供。</p>\n<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求 </p>\n</li>\n<li><p>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供。</p>\n<p>作用：根据请求的url、method等信息查找Handler，即控制器方法 </p>\n</li>\n<li><p>Handler：处理器，需要工程师开发。</p>\n<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>\n</li>\n<li><p>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供。</p>\n<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行 </p>\n</li>\n<li><p>ViewResolver：视图解析器，不需要工程师开发，由框架提供。</p>\n<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView </p>\n</li>\n<li><p>View：视图 </p>\n<p>作用：将模型数据通过页面展示给用户</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"stop方法中断线程不安全","date":"2023-12-17T13:59:36.000Z","_content":"1. 调用 stop() 方法会立刻停止 run() 方法中剩余的全部工作，会导致一些清理性的工作的得不到完成，如文件，数据库等的关闭。\n2. 调用 stop() 方法会立即释放该线程所持有的所有的锁，导致数据得不到同步，出现数据不一致的问题。\n解决：\n1. 使用 interrupt()，在当前线程中打一个停止的标记\n2. 使用标志位\n``` java\n    private volatile boolean exitFlag = false; // 退出标志\n\n    public void run() {\n        while (!exitFlag) {\n            // 执行线程的任务\n            System.out.println(\"Thread is running...\");\n            try {\n                Thread.sleep(1000); // 模拟一些工作\n            } catch (InterruptedException e) {\n                // 处理中断（如果需要）\n                Thread.currentThread().interrupt(); // 重新设置中断状态\n            }\n        }\n        System.out.println(\"Thread is stopping...\");\n    }\n\n    public void stop() {\n        exitFlag = true; // 设置退出标志为true\n    }\n```\n","source":"_posts/stop方法中断线程不安全.md","raw":"---\ntitle: stop方法中断线程不安全\ndate: 2023-12-17 21:59:36\ntags: JAVA\ncategories: 问题记录\n---\n1. 调用 stop() 方法会立刻停止 run() 方法中剩余的全部工作，会导致一些清理性的工作的得不到完成，如文件，数据库等的关闭。\n2. 调用 stop() 方法会立即释放该线程所持有的所有的锁，导致数据得不到同步，出现数据不一致的问题。\n解决：\n1. 使用 interrupt()，在当前线程中打一个停止的标记\n2. 使用标志位\n``` java\n    private volatile boolean exitFlag = false; // 退出标志\n\n    public void run() {\n        while (!exitFlag) {\n            // 执行线程的任务\n            System.out.println(\"Thread is running...\");\n            try {\n                Thread.sleep(1000); // 模拟一些工作\n            } catch (InterruptedException e) {\n                // 处理中断（如果需要）\n                Thread.currentThread().interrupt(); // 重新设置中断状态\n            }\n        }\n        System.out.println(\"Thread is stopping...\");\n    }\n\n    public void stop() {\n        exitFlag = true; // 设置退出标志为true\n    }\n```\n","slug":"stop方法中断线程不安全","published":1,"updated":"2024-12-17T15:10:04.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka3001p94wa46p94m7m","content":"<ol>\n<li>调用 stop() 方法会立刻停止 run() 方法中剩余的全部工作，会导致一些清理性的工作的得不到完成，如文件，数据库等的关闭。</li>\n<li>调用 stop() 方法会立即释放该线程所持有的所有的锁，导致数据得不到同步，出现数据不一致的问题。<br>解决：</li>\n<li>使用 interrupt()，在当前线程中打一个停止的标记</li>\n<li>使用标志位<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> exitFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 退出标志</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exitFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 执行线程的任务</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread is running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟一些工作</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 处理中断（如果需要）</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新设置中断状态</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread is stopping...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    exitFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置退出标志为true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>调用 stop() 方法会立刻停止 run() 方法中剩余的全部工作，会导致一些清理性的工作的得不到完成，如文件，数据库等的关闭。</li>\n<li>调用 stop() 方法会立即释放该线程所持有的所有的锁，导致数据得不到同步，出现数据不一致的问题。<br>解决：</li>\n<li>使用 interrupt()，在当前线程中打一个停止的标记</li>\n<li>使用标志位<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> exitFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 退出标志</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exitFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 执行线程的任务</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread is running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟一些工作</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 处理中断（如果需要）</span>\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新设置中断状态</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread is stopping...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    exitFlag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置退出标志为true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n"},{"title":"数据结构和算法","date":"2022-07-22T11:26:07.000Z","_content":"\n# 数据结构和算法\n\n## 1. 时间复杂度\n\n- 常数操作：一个操作如果和样本的数据量没有关系，每次都是固定时间内完成的操作，叫做常数操作。\n- 时间复杂度：一个算法流程中，常数操作数量的一个指标，O\n- 表达式中只要高阶项，不要低阶项，也不要高阶项的系数，剩下的部分如果为f(N)，name时间复杂度为O(f(N))。\n- 常数项时间：评价一个算法流程的好坏，先看时间复杂度的指标，然后再分析不同数据样本下的实际运行时间，叫做常数项时间\n- O(1)常数阶 < O(logn)对数阶 < O(n)线性阶 < O(n^2)平方阶 < O(n^3)(立方阶) < O(2^n) (指数阶)\n\n{% asset_img image-1.png %}\n\n## 2. 对数器\n\n1. 有一个你想要测的方法a \n2. 实现复杂度不好但是容易实现的方法b \n3. 实现一个随机样本产生器 \n4. 把方法a和方法b跑相同的随机样本，看看得到的结果是否一样。 \n5. 如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者方法b \n6. 当样本数量很多时比对测试依然正确，可以确定方法a已经正确\n\n\n\n## 3. 比较器\n\n实现Comparator接口，重写compare方法，实现复杂的比价策略\n\n\n\n## 4. 递归\n\n1. master公式\n\n    ```\n    T(N) = a*T(N/b) + O(N^d)\n    // N:母规模,a:次数,b:子规模\n    ```\n    \n    - log(b,a) > d -> 复杂度为O(N^log(b,a))\n    \n    - log(b,a) = d -> 复杂度为O(N^d * logN)\n    \n    -  log(b,a) < d -> 复杂度为O(N^d)\n\n\n\n## 5. 树\n\n### 1. 描述\n\n- 特点\n\n  - 一棵树中的任意两个结点有且仅有唯一的一条路径连通。\n\n  - 一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。\n\n  - 一棵树不包含回路。\n\n- 概念\n\n  - **节点** ：树中的每个元素都可以统称为节点。\n  - **根节点** ：顶层节点或者说没有父节点的节点。\n  - **父节点** ：若一个节点含有子节点，则这个节点称为其子节点的父节点。\n  - **子节点** ：一个节点含有的子树的根节点称为该节点的子节点。\n  - **兄弟节点** ：具有相同父节点的节点互称为兄弟节点。\n  - **叶子节点** ：没有子节点的节点。\n  - **节点的高度** ：该节点到叶子节点的最长路径所包含的边数。\n  - **节点的深度** ：根节点到该节点的路径所包含的边数\n  - **节点的层数** ：节点的深度+1。\n  - **树的高度** ：根节点的高度。\n\n- 二叉树\n\n  **二叉树**（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。\n\n  **二叉树** 的分支通常被称作“**左子树**”或“**右子树**”。并且，**二叉树** 的分支具有左右次序，不能随意颠倒。\n\n  **二叉树** 的第 i 层至多拥有 `2^(i-1)` 个节点，深度为 k 的二叉树至多总共有 `2^(k+1)-1` 个节点（满二叉树的情况），至少有 2^(k) 个节点\n\n  ```java\n  class Node<V>{\n      V value;\n      Node left;\n      Node right;\n  }\n  ```\n\n- 满二叉树\n\n  一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 **满二叉树**。也就是说，如果一个二叉树的层数为 K，且结点总数是(2^k) -1 ，则它就是 **满二叉树**。满二叉树一定是完全二叉树。\n\n  - 判断方法：求深度k，求节点个数，满足(2^k) -1\n\n- 完全二叉树\n\n  除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则这个二叉树就是 **完全二叉树** 。\n\n  **父结点和子节点的序号有着对应关系。**\n\n  - 判断方法1：层级遍历，如果出现有右子节点无左子节点的情况，返回false；当遇到第一个左右子节点不全的节点，剩余节点必须是叶子结点，否则false\n\n- 平衡二叉树\n  1. 可以是一棵空树\n  2. 如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。\n  \n- 搜索二叉树\n\n  每个节点的左子节点都比它小，右子节点都比它大。经典搜索二叉树一般认为没有重复值。\n\n  中序遍历可以得出升序的排序\n\n  - 判断方法1：中序遍历后看排序是否升序\n  - 判断方法2：递归每一个子树是否满足搜索二叉树\n\n\n\n### 2. 存储\n\n1. 链式存储\n\n   二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。引用对象。\n\n2. 顺序存储\n\n   利用数组进行存储，数组中的每一个位置仅存储节点的 data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根结点的序号为 1，对于每个节点 Node，假设它存储在数组中下标为 i 的位置，那么它的左子节点就存储在 2i 的位置，它的右子节点存储在下标为 2i+1 的位置。\n\n\n\n### 3. 遍历\n\n- 先序遍历\n\n  二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。\n\n  ```java\n  public void preOrder(TreeNode root){\n  \tif(root == null){\n  \t\treturn;\n  \t}\n  \tsystem.out.println(root.data);\n  \tpreOrder(root.left);\n  \tpreOrder(root.right);\n  }\n  ```\n\n- 中序遍历\n\n  二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树。\n\n  ```java\n  public void inOrder(TreeNode root){\n  \tif(root == null){\n  \t\treturn;\n  \t}\n  \tinOrder(root.left);\n  \tsystem.out.println(root.data);\n  \tinOrder(root.right);\n  }\n  ```\n\n- 后序遍历\n\n  二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值\n\n  ```java\n  public void postOrder(TreeNode root){\n  \tif(root == null){\n  \t\treturn;\n  \t}\n  \tpostOrder(root.left);\n  \tpostOrder(root.right);\n  \tsystem.out.println(root.data);\n  }\n  ```\n\n\n\n### 4. 红黑树\n\n- **红黑树特点** :\n  1. 每个节点非红即黑；\n  2. 根节点总是黑色的；\n  3. 每个叶子节点都是黑色的空节点（NIL节点）；\n  4. 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；\n  5. 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。\n\n- **红黑树的应用** ：TreeMap、TreeSet以及JDK1.8的HashMap底层都用到了红黑树。\n\n- **为什么要用红黑树？** 简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。\n\n\n\n## 6. 堆\n\n### 1. 描述\n\n​\t堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。任意一个节点的值都大于等于（或小于等于）所有子节点的值。最大堆：每个节点都比子树中所有节点大。最小堆：每个节点都比子树中所有节点小。\n\n### 2. 用途\n\n   存在多次获取最大值或者最小值，多次插入或删除数据。\n\n### 3. 操作\n   - **插入元素** ：先将元素放至数组末尾，再自底向上堆化，将末尾元素上浮\n   - **删除堆顶元素** ：删除堆顶元素，将末尾元素放至堆顶，再自顶向下堆化，将堆顶元素下沉。也可以自底向上堆化，只是会产生“气泡”，浪费存储空间。最好采用自顶向下堆化的方式。\n\n\n\n## 7. 哈希表\n\n1. 哈希表在使用层面上可以理解为一种集合结构 \n2. 如果只有key，没有伴随数据value，可以使用HashSet结构\n3. 如果既有key，又有伴随数据value，可以使用HashMap结构\n4. 有无伴随数据，是HashMap和HashSet唯一的区别，底层的实际结构是一回事 \n5. 使用哈希表增(put)、删(remove)、改(put)和查(get)的操作，可以认为时间复杂度为 O(1)，但是常数时间比较大 \n6. 放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小 \n7. 放入哈希表的东西，如果不是基础类型，内部按引用传递，内存占用是这个东西内存地址的大小\n\n\n\n## 8. 有序表\n\n1. 有序表在使用层面上可以理解为一种集合结构\n2. 如果只有key，没有伴随数据value，可以使用TreeSet结构\n3. 如果既有key，又有伴随数据value，可以使用TreeMap结构\n4. 有无伴随数据，是TreeSet和TreeMap唯一的区别，底层的实际结构是一回事\n5. 有序表和哈希表的区别是，有序表把key按照顺序组织起来，而哈希表完全不组织\n6. 红黑树、AVL树、size-balance-tree和跳表等都属于有序表结构，只是底层具体实现不同 \n7. 放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小\n8. 放入有序表的东西，如果不是基础类型，必须提供比较器，内部按引用传递，内存占用是这个东西内存地址的大小\n9. 不管是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复杂度\n\n\n\n## 9. 单链表\n\n​\t**链表（LinkedList）** 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。\n\n​\t链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。\n\n​\t使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。\n\n单链表和双链表结构只需要给定一个头部节点head，就可以找到剩下的所有的节点。\n\n- 单链表的节点结构\n\n  ```java\n  Class Node{ \n      V value; \n      Node next; \n  } \n  ```\n\n​\t\t由以上结构的节点依次连接起来所形成的链叫单链表结构。 \n\n- 双链表的节点结构 \n\n  ```java\n  Class Node{ \n  \tV value; \n  \tNode next; \n  \tNode last; \n  }\n  ```\n\n  由以上结构的节点依次连接起来所形成的链叫双链表结构。 \n\n  \n\n## 10. 排序\n\n   同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。 \n\n   - 不具备稳定性的排序： 选择排序、快速排序、堆排序 \n   - 具备稳定性的排序： 冒泡排序、插入排序、归并排序、一切桶排序思想下的排序\n   - 目前没有找到时间复杂度O(N*logN)，额外空间复杂度O(1)，又稳定的排序。\n\n\n\n## 11. 图\n\n1. 描述\n\n   图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：**G(V,E)**，其中，G表示一个图，V表示顶点的集合，E表示边的集合。\n\n2. 概念\n\n   - 顶点\n\n     图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）\n\n     对应到好友关系图，每一个用户就代表一个顶点。\n\n   - 边\n\n     顶点之间的关系用边表示。\n\n     对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。\n\n   - 度\n\n     度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。\n\n     对应到好友关系图，度就代表了某个人的好友数量。\n\n   - 无向图和有向图\n\n     边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A是B的同学，那么B也肯定是A的同学，那么在表示A和B的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。\n\n     有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A是B的爸爸，但B肯定不是A的爸爸，A关注B，B不一定关注A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。\n\n   - 无权图和带权图\n\n     对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。\n\n     对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。\n\n3. 图的存储\n\n   - 邻接矩阵存储\n\n     邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。\n\n     如果第i个顶点和第j个顶点之间有关系，且关系权值为n，则 `A[i][j]=n` 。\n\n     在无向图中，我们只关心关系的有无，所以当顶点i和顶点j有关系时，`A[i][j]`=1，当顶点i和顶点j没有关系时，`A[i][j]`=0。\n\n     **无向图的邻接矩阵是一个对称矩阵**\n\n     邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，\n\n   - 邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点Vi，把所有邻接于Vi的顶点Vj链成一个单链表，这个单链表称为顶点Vi的 **邻接表**。\n\n     - 在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为7，邻接表存储的元素个数为14。\n     - 在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为8，邻接表存储的元素个数为8。\n\n4. 图的遍历\n\n   - 图的宽度优先遍历\n\n     1. 利用队列实现\n     2. 从源节点开始依次按照宽度进队列，然后弹出\n     3. 每弹出一个点，把该节点所有没有进过队列的邻接点放入队列\n     4. 直到队列变空\n\n   - 广度优先遍历\n\n     1. 利用栈实现\n     2. 从源节点开始把节点按照深度放入栈，然后弹出\n     3. 每弹出一个点，把该节点下一个没有进过栈的邻接点放入栈\n     4. 直到栈变空\n\n   - 拓扑排序\n\n     适用范围：要求有向图，且有入度为0的节点，且没有环\n     1. 找到入度为0的节点，保存到只存储入度为0的队列中\n     2. 添加到结果排序集\n     3. 找到此节点指向的其他节点，如果减掉此指向的入度为0，添加到队列和结果集中，循环此步骤\n\n   - kruskal算法（无向图生成最小生成树）\n\n     1. 遍历每个节点，生成对应只有自己的集合\n     2. 将图的所有边根据权重升序排列\n     3. 判断每条边的始末节点是否在同一个集合中，如果不在同一个集合中，合并两个集合，直到集合包含所有节点\n\n   - Prime算法\n\n     1. 从任意节点检查，将该节点的所有边选出权重最小的边\n     2. 检查该边的to节点是否已检查，如果没检查则将该节点的所有边选出权重最小的边\n     3. 重复上述步骤，直到所有节点都检查过\n","source":"_posts/数据结构和算法.md","raw":"---\ntitle: 数据结构和算法\ndate: 2022-07-22 19:26:07\ntags: JAVA\ncategories: 编程\n---\n\n# 数据结构和算法\n\n## 1. 时间复杂度\n\n- 常数操作：一个操作如果和样本的数据量没有关系，每次都是固定时间内完成的操作，叫做常数操作。\n- 时间复杂度：一个算法流程中，常数操作数量的一个指标，O\n- 表达式中只要高阶项，不要低阶项，也不要高阶项的系数，剩下的部分如果为f(N)，name时间复杂度为O(f(N))。\n- 常数项时间：评价一个算法流程的好坏，先看时间复杂度的指标，然后再分析不同数据样本下的实际运行时间，叫做常数项时间\n- O(1)常数阶 < O(logn)对数阶 < O(n)线性阶 < O(n^2)平方阶 < O(n^3)(立方阶) < O(2^n) (指数阶)\n\n{% asset_img image-1.png %}\n\n## 2. 对数器\n\n1. 有一个你想要测的方法a \n2. 实现复杂度不好但是容易实现的方法b \n3. 实现一个随机样本产生器 \n4. 把方法a和方法b跑相同的随机样本，看看得到的结果是否一样。 \n5. 如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者方法b \n6. 当样本数量很多时比对测试依然正确，可以确定方法a已经正确\n\n\n\n## 3. 比较器\n\n实现Comparator接口，重写compare方法，实现复杂的比价策略\n\n\n\n## 4. 递归\n\n1. master公式\n\n    ```\n    T(N) = a*T(N/b) + O(N^d)\n    // N:母规模,a:次数,b:子规模\n    ```\n    \n    - log(b,a) > d -> 复杂度为O(N^log(b,a))\n    \n    - log(b,a) = d -> 复杂度为O(N^d * logN)\n    \n    -  log(b,a) < d -> 复杂度为O(N^d)\n\n\n\n## 5. 树\n\n### 1. 描述\n\n- 特点\n\n  - 一棵树中的任意两个结点有且仅有唯一的一条路径连通。\n\n  - 一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。\n\n  - 一棵树不包含回路。\n\n- 概念\n\n  - **节点** ：树中的每个元素都可以统称为节点。\n  - **根节点** ：顶层节点或者说没有父节点的节点。\n  - **父节点** ：若一个节点含有子节点，则这个节点称为其子节点的父节点。\n  - **子节点** ：一个节点含有的子树的根节点称为该节点的子节点。\n  - **兄弟节点** ：具有相同父节点的节点互称为兄弟节点。\n  - **叶子节点** ：没有子节点的节点。\n  - **节点的高度** ：该节点到叶子节点的最长路径所包含的边数。\n  - **节点的深度** ：根节点到该节点的路径所包含的边数\n  - **节点的层数** ：节点的深度+1。\n  - **树的高度** ：根节点的高度。\n\n- 二叉树\n\n  **二叉树**（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。\n\n  **二叉树** 的分支通常被称作“**左子树**”或“**右子树**”。并且，**二叉树** 的分支具有左右次序，不能随意颠倒。\n\n  **二叉树** 的第 i 层至多拥有 `2^(i-1)` 个节点，深度为 k 的二叉树至多总共有 `2^(k+1)-1` 个节点（满二叉树的情况），至少有 2^(k) 个节点\n\n  ```java\n  class Node<V>{\n      V value;\n      Node left;\n      Node right;\n  }\n  ```\n\n- 满二叉树\n\n  一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 **满二叉树**。也就是说，如果一个二叉树的层数为 K，且结点总数是(2^k) -1 ，则它就是 **满二叉树**。满二叉树一定是完全二叉树。\n\n  - 判断方法：求深度k，求节点个数，满足(2^k) -1\n\n- 完全二叉树\n\n  除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则这个二叉树就是 **完全二叉树** 。\n\n  **父结点和子节点的序号有着对应关系。**\n\n  - 判断方法1：层级遍历，如果出现有右子节点无左子节点的情况，返回false；当遇到第一个左右子节点不全的节点，剩余节点必须是叶子结点，否则false\n\n- 平衡二叉树\n  1. 可以是一棵空树\n  2. 如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。\n  \n- 搜索二叉树\n\n  每个节点的左子节点都比它小，右子节点都比它大。经典搜索二叉树一般认为没有重复值。\n\n  中序遍历可以得出升序的排序\n\n  - 判断方法1：中序遍历后看排序是否升序\n  - 判断方法2：递归每一个子树是否满足搜索二叉树\n\n\n\n### 2. 存储\n\n1. 链式存储\n\n   二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。引用对象。\n\n2. 顺序存储\n\n   利用数组进行存储，数组中的每一个位置仅存储节点的 data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根结点的序号为 1，对于每个节点 Node，假设它存储在数组中下标为 i 的位置，那么它的左子节点就存储在 2i 的位置，它的右子节点存储在下标为 2i+1 的位置。\n\n\n\n### 3. 遍历\n\n- 先序遍历\n\n  二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。\n\n  ```java\n  public void preOrder(TreeNode root){\n  \tif(root == null){\n  \t\treturn;\n  \t}\n  \tsystem.out.println(root.data);\n  \tpreOrder(root.left);\n  \tpreOrder(root.right);\n  }\n  ```\n\n- 中序遍历\n\n  二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树。\n\n  ```java\n  public void inOrder(TreeNode root){\n  \tif(root == null){\n  \t\treturn;\n  \t}\n  \tinOrder(root.left);\n  \tsystem.out.println(root.data);\n  \tinOrder(root.right);\n  }\n  ```\n\n- 后序遍历\n\n  二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值\n\n  ```java\n  public void postOrder(TreeNode root){\n  \tif(root == null){\n  \t\treturn;\n  \t}\n  \tpostOrder(root.left);\n  \tpostOrder(root.right);\n  \tsystem.out.println(root.data);\n  }\n  ```\n\n\n\n### 4. 红黑树\n\n- **红黑树特点** :\n  1. 每个节点非红即黑；\n  2. 根节点总是黑色的；\n  3. 每个叶子节点都是黑色的空节点（NIL节点）；\n  4. 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；\n  5. 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。\n\n- **红黑树的应用** ：TreeMap、TreeSet以及JDK1.8的HashMap底层都用到了红黑树。\n\n- **为什么要用红黑树？** 简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。\n\n\n\n## 6. 堆\n\n### 1. 描述\n\n​\t堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。任意一个节点的值都大于等于（或小于等于）所有子节点的值。最大堆：每个节点都比子树中所有节点大。最小堆：每个节点都比子树中所有节点小。\n\n### 2. 用途\n\n   存在多次获取最大值或者最小值，多次插入或删除数据。\n\n### 3. 操作\n   - **插入元素** ：先将元素放至数组末尾，再自底向上堆化，将末尾元素上浮\n   - **删除堆顶元素** ：删除堆顶元素，将末尾元素放至堆顶，再自顶向下堆化，将堆顶元素下沉。也可以自底向上堆化，只是会产生“气泡”，浪费存储空间。最好采用自顶向下堆化的方式。\n\n\n\n## 7. 哈希表\n\n1. 哈希表在使用层面上可以理解为一种集合结构 \n2. 如果只有key，没有伴随数据value，可以使用HashSet结构\n3. 如果既有key，又有伴随数据value，可以使用HashMap结构\n4. 有无伴随数据，是HashMap和HashSet唯一的区别，底层的实际结构是一回事 \n5. 使用哈希表增(put)、删(remove)、改(put)和查(get)的操作，可以认为时间复杂度为 O(1)，但是常数时间比较大 \n6. 放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小 \n7. 放入哈希表的东西，如果不是基础类型，内部按引用传递，内存占用是这个东西内存地址的大小\n\n\n\n## 8. 有序表\n\n1. 有序表在使用层面上可以理解为一种集合结构\n2. 如果只有key，没有伴随数据value，可以使用TreeSet结构\n3. 如果既有key，又有伴随数据value，可以使用TreeMap结构\n4. 有无伴随数据，是TreeSet和TreeMap唯一的区别，底层的实际结构是一回事\n5. 有序表和哈希表的区别是，有序表把key按照顺序组织起来，而哈希表完全不组织\n6. 红黑树、AVL树、size-balance-tree和跳表等都属于有序表结构，只是底层具体实现不同 \n7. 放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小\n8. 放入有序表的东西，如果不是基础类型，必须提供比较器，内部按引用传递，内存占用是这个东西内存地址的大小\n9. 不管是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复杂度\n\n\n\n## 9. 单链表\n\n​\t**链表（LinkedList）** 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。\n\n​\t链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。\n\n​\t使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。\n\n单链表和双链表结构只需要给定一个头部节点head，就可以找到剩下的所有的节点。\n\n- 单链表的节点结构\n\n  ```java\n  Class Node{ \n      V value; \n      Node next; \n  } \n  ```\n\n​\t\t由以上结构的节点依次连接起来所形成的链叫单链表结构。 \n\n- 双链表的节点结构 \n\n  ```java\n  Class Node{ \n  \tV value; \n  \tNode next; \n  \tNode last; \n  }\n  ```\n\n  由以上结构的节点依次连接起来所形成的链叫双链表结构。 \n\n  \n\n## 10. 排序\n\n   同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。 \n\n   - 不具备稳定性的排序： 选择排序、快速排序、堆排序 \n   - 具备稳定性的排序： 冒泡排序、插入排序、归并排序、一切桶排序思想下的排序\n   - 目前没有找到时间复杂度O(N*logN)，额外空间复杂度O(1)，又稳定的排序。\n\n\n\n## 11. 图\n\n1. 描述\n\n   图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：**G(V,E)**，其中，G表示一个图，V表示顶点的集合，E表示边的集合。\n\n2. 概念\n\n   - 顶点\n\n     图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）\n\n     对应到好友关系图，每一个用户就代表一个顶点。\n\n   - 边\n\n     顶点之间的关系用边表示。\n\n     对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。\n\n   - 度\n\n     度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。\n\n     对应到好友关系图，度就代表了某个人的好友数量。\n\n   - 无向图和有向图\n\n     边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A是B的同学，那么B也肯定是A的同学，那么在表示A和B的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。\n\n     有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A是B的爸爸，但B肯定不是A的爸爸，A关注B，B不一定关注A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。\n\n   - 无权图和带权图\n\n     对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。\n\n     对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。\n\n3. 图的存储\n\n   - 邻接矩阵存储\n\n     邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。\n\n     如果第i个顶点和第j个顶点之间有关系，且关系权值为n，则 `A[i][j]=n` 。\n\n     在无向图中，我们只关心关系的有无，所以当顶点i和顶点j有关系时，`A[i][j]`=1，当顶点i和顶点j没有关系时，`A[i][j]`=0。\n\n     **无向图的邻接矩阵是一个对称矩阵**\n\n     邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，\n\n   - 邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点Vi，把所有邻接于Vi的顶点Vj链成一个单链表，这个单链表称为顶点Vi的 **邻接表**。\n\n     - 在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为7，邻接表存储的元素个数为14。\n     - 在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为8，邻接表存储的元素个数为8。\n\n4. 图的遍历\n\n   - 图的宽度优先遍历\n\n     1. 利用队列实现\n     2. 从源节点开始依次按照宽度进队列，然后弹出\n     3. 每弹出一个点，把该节点所有没有进过队列的邻接点放入队列\n     4. 直到队列变空\n\n   - 广度优先遍历\n\n     1. 利用栈实现\n     2. 从源节点开始把节点按照深度放入栈，然后弹出\n     3. 每弹出一个点，把该节点下一个没有进过栈的邻接点放入栈\n     4. 直到栈变空\n\n   - 拓扑排序\n\n     适用范围：要求有向图，且有入度为0的节点，且没有环\n     1. 找到入度为0的节点，保存到只存储入度为0的队列中\n     2. 添加到结果排序集\n     3. 找到此节点指向的其他节点，如果减掉此指向的入度为0，添加到队列和结果集中，循环此步骤\n\n   - kruskal算法（无向图生成最小生成树）\n\n     1. 遍历每个节点，生成对应只有自己的集合\n     2. 将图的所有边根据权重升序排列\n     3. 判断每条边的始末节点是否在同一个集合中，如果不在同一个集合中，合并两个集合，直到集合包含所有节点\n\n   - Prime算法\n\n     1. 从任意节点检查，将该节点的所有边选出权重最小的边\n     2. 检查该边的to节点是否已检查，如果没检查则将该节点的所有边选出权重最小的边\n     3. 重复上述步骤，直到所有节点都检查过\n","slug":"数据结构和算法","published":1,"updated":"2022-10-13T15:05:14.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka4001s94wa5oj325qp","content":"<h1 id=\"数据结构和算法\"><a href=\"#数据结构和算法\" class=\"headerlink\" title=\"数据结构和算法\"></a>数据结构和算法</h1><h2 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1. 时间复杂度\"></a>1. 时间复杂度</h2><ul>\n<li>常数操作：一个操作如果和样本的数据量没有关系，每次都是固定时间内完成的操作，叫做常数操作。</li>\n<li>时间复杂度：一个算法流程中，常数操作数量的一个指标，O</li>\n<li>表达式中只要高阶项，不要低阶项，也不要高阶项的系数，剩下的部分如果为f(N)，name时间复杂度为O(f(N))。</li>\n<li>常数项时间：评价一个算法流程的好坏，先看时间复杂度的指标，然后再分析不同数据样本下的实际运行时间，叫做常数项时间</li>\n<li>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(n^2)平方阶 &lt; O(n^3)(立方阶) &lt; O(2^n) (指数阶)</li>\n</ul>\n<img src=\"/2022/07/22/shu-ju-jie-gou-he-suan-fa/image-1.png\" class=\"\">\n\n<h2 id=\"2-对数器\"><a href=\"#2-对数器\" class=\"headerlink\" title=\"2. 对数器\"></a>2. 对数器</h2><ol>\n<li>有一个你想要测的方法a </li>\n<li>实现复杂度不好但是容易实现的方法b </li>\n<li>实现一个随机样本产生器 </li>\n<li>把方法a和方法b跑相同的随机样本，看看得到的结果是否一样。 </li>\n<li>如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者方法b </li>\n<li>当样本数量很多时比对测试依然正确，可以确定方法a已经正确</li>\n</ol>\n<h2 id=\"3-比较器\"><a href=\"#3-比较器\" class=\"headerlink\" title=\"3. 比较器\"></a>3. 比较器</h2><p>实现Comparator接口，重写compare方法，实现复杂的比价策略</p>\n<h2 id=\"4-递归\"><a href=\"#4-递归\" class=\"headerlink\" title=\"4. 递归\"></a>4. 递归</h2><ol>\n<li><p>master公式</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">T(N) &#x3D; a*T(N&#x2F;b) + O(N^d)\n&#x2F;&#x2F; N:母规模,a:次数,b:子规模<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>log(b,a) &gt; d -&gt; 复杂度为O(N^log(b,a))</li>\n<li>log(b,a) = d -&gt; 复杂度为O(N^d * logN)</li>\n<li> log(b,a) &lt; d -&gt; 复杂度为O(N^d)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5-树\"><a href=\"#5-树\" class=\"headerlink\" title=\"5. 树\"></a>5. 树</h2><h3 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h3><ul>\n<li><p>特点</p>\n<ul>\n<li><p>一棵树中的任意两个结点有且仅有唯一的一条路径连通。</p>\n</li>\n<li><p>一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。</p>\n</li>\n<li><p>一棵树不包含回路。</p>\n</li>\n</ul>\n</li>\n<li><p>概念</p>\n<ul>\n<li><strong>节点</strong> ：树中的每个元素都可以统称为节点。</li>\n<li><strong>根节点</strong> ：顶层节点或者说没有父节点的节点。</li>\n<li><strong>父节点</strong> ：若一个节点含有子节点，则这个节点称为其子节点的父节点。</li>\n<li><strong>子节点</strong> ：一个节点含有的子树的根节点称为该节点的子节点。</li>\n<li><strong>兄弟节点</strong> ：具有相同父节点的节点互称为兄弟节点。</li>\n<li><strong>叶子节点</strong> ：没有子节点的节点。</li>\n<li><strong>节点的高度</strong> ：该节点到叶子节点的最长路径所包含的边数。</li>\n<li><strong>节点的深度</strong> ：根节点到该节点的路径所包含的边数</li>\n<li><strong>节点的层数</strong> ：节点的深度+1。</li>\n<li><strong>树的高度</strong> ：根节点的高度。</li>\n</ul>\n</li>\n<li><p>二叉树</p>\n<p><strong>二叉树</strong>（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。</p>\n<p><strong>二叉树</strong> 的分支通常被称作“<strong>左子树</strong>”或“<strong>右子树</strong>”。并且，<strong>二叉树</strong> 的分支具有左右次序，不能随意颠倒。</p>\n<p><strong>二叉树</strong> 的第 i 层至多拥有 <code>2^(i-1)</code> 个节点，深度为 k 的二叉树至多总共有 <code>2^(k+1)-1</code> 个节点（满二叉树的情况），至少有 2^(k) 个节点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>满二叉树</p>\n<p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 <strong>满二叉树</strong>。也就是说，如果一个二叉树的层数为 K，且结点总数是(2^k) -1 ，则它就是 <strong>满二叉树</strong>。满二叉树一定是完全二叉树。</p>\n<ul>\n<li>判断方法：求深度k，求节点个数，满足(2^k) -1</li>\n</ul>\n</li>\n<li><p>完全二叉树</p>\n<p>除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则这个二叉树就是 <strong>完全二叉树</strong> 。</p>\n<p><strong>父结点和子节点的序号有着对应关系。</strong></p>\n<ul>\n<li>判断方法1：层级遍历，如果出现有右子节点无左子节点的情况，返回false；当遇到第一个左右子节点不全的节点，剩余节点必须是叶子结点，否则false</li>\n</ul>\n</li>\n<li><p>平衡二叉树</p>\n<ol>\n<li>可以是一棵空树</li>\n<li>如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</li>\n</ol>\n</li>\n<li><p>搜索二叉树</p>\n<p>每个节点的左子节点都比它小，右子节点都比它大。经典搜索二叉树一般认为没有重复值。</p>\n<p>中序遍历可以得出升序的排序</p>\n<ul>\n<li>判断方法1：中序遍历后看排序是否升序</li>\n<li>判断方法2：递归每一个子树是否满足搜索二叉树</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-存储\"><a href=\"#2-存储\" class=\"headerlink\" title=\"2. 存储\"></a>2. 存储</h3><ol>\n<li><p>链式存储</p>\n<p>二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。引用对象。</p>\n</li>\n<li><p>顺序存储</p>\n<p>利用数组进行存储，数组中的每一个位置仅存储节点的 data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根结点的序号为 1，对于每个节点 Node，假设它存储在数组中下标为 i 的位置，那么它的左子节点就存储在 2i 的位置，它的右子节点存储在下标为 2i+1 的位置。</p>\n</li>\n</ol>\n<h3 id=\"3-遍历\"><a href=\"#3-遍历\" class=\"headerlink\" title=\"3. 遍历\"></a>3. 遍历</h3><ul>\n<li><p>先序遍历</p>\n<p>二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tsystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>中序遍历</p>\n<p>二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>后序遍历</p>\n<p>二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-红黑树\"><a href=\"#4-红黑树\" class=\"headerlink\" title=\"4. 红黑树\"></a>4. 红黑树</h3><ul>\n<li><p><strong>红黑树特点</strong> :</p>\n<ol>\n<li>每个节点非红即黑；</li>\n<li>根节点总是黑色的；</li>\n<li>每个叶子节点都是黑色的空节点（NIL节点）；</li>\n<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li>\n<li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。</li>\n</ol>\n</li>\n<li><p><strong>红黑树的应用</strong> ：TreeMap、TreeSet以及JDK1.8的HashMap底层都用到了红黑树。</p>\n</li>\n<li><p><strong>为什么要用红黑树？</strong> 简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p>\n</li>\n</ul>\n<h2 id=\"6-堆\"><a href=\"#6-堆\" class=\"headerlink\" title=\"6. 堆\"></a>6. 堆</h2><h3 id=\"1-描述-1\"><a href=\"#1-描述-1\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h3><p>​    堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。任意一个节点的值都大于等于（或小于等于）所有子节点的值。最大堆：每个节点都比子树中所有节点大。最小堆：每个节点都比子树中所有节点小。</p>\n<h3 id=\"2-用途\"><a href=\"#2-用途\" class=\"headerlink\" title=\"2. 用途\"></a>2. 用途</h3><p>   存在多次获取最大值或者最小值，多次插入或删除数据。</p>\n<h3 id=\"3-操作\"><a href=\"#3-操作\" class=\"headerlink\" title=\"3. 操作\"></a>3. 操作</h3><ul>\n<li><strong>插入元素</strong> ：先将元素放至数组末尾，再自底向上堆化，将末尾元素上浮</li>\n<li><strong>删除堆顶元素</strong> ：删除堆顶元素，将末尾元素放至堆顶，再自顶向下堆化，将堆顶元素下沉。也可以自底向上堆化，只是会产生“气泡”，浪费存储空间。最好采用自顶向下堆化的方式。</li>\n</ul>\n<h2 id=\"7-哈希表\"><a href=\"#7-哈希表\" class=\"headerlink\" title=\"7. 哈希表\"></a>7. 哈希表</h2><ol>\n<li>哈希表在使用层面上可以理解为一种集合结构 </li>\n<li>如果只有key，没有伴随数据value，可以使用HashSet结构</li>\n<li>如果既有key，又有伴随数据value，可以使用HashMap结构</li>\n<li>有无伴随数据，是HashMap和HashSet唯一的区别，底层的实际结构是一回事 </li>\n<li>使用哈希表增(put)、删(remove)、改(put)和查(get)的操作，可以认为时间复杂度为 O(1)，但是常数时间比较大 </li>\n<li>放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小 </li>\n<li>放入哈希表的东西，如果不是基础类型，内部按引用传递，内存占用是这个东西内存地址的大小</li>\n</ol>\n<h2 id=\"8-有序表\"><a href=\"#8-有序表\" class=\"headerlink\" title=\"8. 有序表\"></a>8. 有序表</h2><ol>\n<li>有序表在使用层面上可以理解为一种集合结构</li>\n<li>如果只有key，没有伴随数据value，可以使用TreeSet结构</li>\n<li>如果既有key，又有伴随数据value，可以使用TreeMap结构</li>\n<li>有无伴随数据，是TreeSet和TreeMap唯一的区别，底层的实际结构是一回事</li>\n<li>有序表和哈希表的区别是，有序表把key按照顺序组织起来，而哈希表完全不组织</li>\n<li>红黑树、AVL树、size-balance-tree和跳表等都属于有序表结构，只是底层具体实现不同 </li>\n<li>放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小</li>\n<li>放入有序表的东西，如果不是基础类型，必须提供比较器，内部按引用传递，内存占用是这个东西内存地址的大小</li>\n<li>不管是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复杂度</li>\n</ol>\n<h2 id=\"9-单链表\"><a href=\"#9-单链表\" class=\"headerlink\" title=\"9. 单链表\"></a>9. 单链表</h2><p>​    <strong>链表（LinkedList）</strong> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。</p>\n<p>​    链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。</p>\n<p>​    使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。</p>\n<p>单链表和双链表结构只需要给定一个头部节点head，就可以找到剩下的所有的节点。</p>\n<ul>\n<li><p>单链表的节点结构</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p>​        由以上结构的节点依次连接起来所形成的链叫单链表结构。 </p>\n<ul>\n<li><p>双链表的节点结构 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span> \n\t<span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span> \n\t<span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span> \n\t<span class=\"token class-name\">Node</span> last<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由以上结构的节点依次连接起来所形成的链叫双链表结构。 </p>\n</li>\n</ul>\n<h2 id=\"10-排序\"><a href=\"#10-排序\" class=\"headerlink\" title=\"10. 排序\"></a>10. 排序</h2><p>   同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。 </p>\n<ul>\n<li>不具备稳定性的排序： 选择排序、快速排序、堆排序 </li>\n<li>具备稳定性的排序： 冒泡排序、插入排序、归并排序、一切桶排序思想下的排序</li>\n<li>目前没有找到时间复杂度O(N*logN)，额外空间复杂度O(1)，又稳定的排序。</li>\n</ul>\n<h2 id=\"11-图\"><a href=\"#11-图\" class=\"headerlink\" title=\"11. 图\"></a>11. 图</h2><ol>\n<li><p>描述</p>\n<p>图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：**G(V,E)**，其中，G表示一个图，V表示顶点的集合，E表示边的集合。</p>\n</li>\n<li><p>概念</p>\n<ul>\n<li><p>顶点</p>\n<p>图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）</p>\n<p>对应到好友关系图，每一个用户就代表一个顶点。</p>\n</li>\n<li><p>边</p>\n<p>顶点之间的关系用边表示。</p>\n<p>对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。</p>\n</li>\n<li><p>度</p>\n<p>度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。</p>\n<p>对应到好友关系图，度就代表了某个人的好友数量。</p>\n</li>\n<li><p>无向图和有向图</p>\n<p>边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A是B的同学，那么B也肯定是A的同学，那么在表示A和B的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。</p>\n<p>有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A是B的爸爸，但B肯定不是A的爸爸，A关注B，B不一定关注A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。</p>\n</li>\n<li><p>无权图和带权图</p>\n<p>对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。</p>\n<p>对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。</p>\n</li>\n</ul>\n</li>\n<li><p>图的存储</p>\n<ul>\n<li><p>邻接矩阵存储</p>\n<p>邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。</p>\n<p>如果第i个顶点和第j个顶点之间有关系，且关系权值为n，则 <code>A[i][j]=n</code> 。</p>\n<p>在无向图中，我们只关心关系的有无，所以当顶点i和顶点j有关系时，<code>A[i][j]</code>=1，当顶点i和顶点j没有关系时，<code>A[i][j]</code>=0。</p>\n<p><strong>无向图的邻接矩阵是一个对称矩阵</strong></p>\n<p>邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，</p>\n</li>\n<li><p>邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点Vi，把所有邻接于Vi的顶点Vj链成一个单链表，这个单链表称为顶点Vi的 <strong>邻接表</strong>。</p>\n<ul>\n<li>在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为7，邻接表存储的元素个数为14。</li>\n<li>在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为8，邻接表存储的元素个数为8。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图的遍历</p>\n<ul>\n<li><p>图的宽度优先遍历</p>\n<ol>\n<li>利用队列实现</li>\n<li>从源节点开始依次按照宽度进队列，然后弹出</li>\n<li>每弹出一个点，把该节点所有没有进过队列的邻接点放入队列</li>\n<li>直到队列变空</li>\n</ol>\n</li>\n<li><p>广度优先遍历</p>\n<ol>\n<li>利用栈实现</li>\n<li>从源节点开始把节点按照深度放入栈，然后弹出</li>\n<li>每弹出一个点，把该节点下一个没有进过栈的邻接点放入栈</li>\n<li>直到栈变空</li>\n</ol>\n</li>\n<li><p>拓扑排序</p>\n<p>适用范围：要求有向图，且有入度为0的节点，且没有环</p>\n<ol>\n<li>找到入度为0的节点，保存到只存储入度为0的队列中</li>\n<li>添加到结果排序集</li>\n<li>找到此节点指向的其他节点，如果减掉此指向的入度为0，添加到队列和结果集中，循环此步骤</li>\n</ol>\n</li>\n<li><p>kruskal算法（无向图生成最小生成树）</p>\n<ol>\n<li>遍历每个节点，生成对应只有自己的集合</li>\n<li>将图的所有边根据权重升序排列</li>\n<li>判断每条边的始末节点是否在同一个集合中，如果不在同一个集合中，合并两个集合，直到集合包含所有节点</li>\n</ol>\n</li>\n<li><p>Prime算法</p>\n<ol>\n<li>从任意节点检查，将该节点的所有边选出权重最小的边</li>\n<li>检查该边的to节点是否已检查，如果没检查则将该节点的所有边选出权重最小的边</li>\n<li>重复上述步骤，直到所有节点都检查过</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据结构和算法\"><a href=\"#数据结构和算法\" class=\"headerlink\" title=\"数据结构和算法\"></a>数据结构和算法</h1><h2 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1. 时间复杂度\"></a>1. 时间复杂度</h2><ul>\n<li>常数操作：一个操作如果和样本的数据量没有关系，每次都是固定时间内完成的操作，叫做常数操作。</li>\n<li>时间复杂度：一个算法流程中，常数操作数量的一个指标，O</li>\n<li>表达式中只要高阶项，不要低阶项，也不要高阶项的系数，剩下的部分如果为f(N)，name时间复杂度为O(f(N))。</li>\n<li>常数项时间：评价一个算法流程的好坏，先看时间复杂度的指标，然后再分析不同数据样本下的实际运行时间，叫做常数项时间</li>\n<li>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(n^2)平方阶 &lt; O(n^3)(立方阶) &lt; O(2^n) (指数阶)</li>\n</ul>\n<img src=\"/2022/07/22/shu-ju-jie-gou-he-suan-fa/image-1.png\" class=\"\">\n\n<h2 id=\"2-对数器\"><a href=\"#2-对数器\" class=\"headerlink\" title=\"2. 对数器\"></a>2. 对数器</h2><ol>\n<li>有一个你想要测的方法a </li>\n<li>实现复杂度不好但是容易实现的方法b </li>\n<li>实现一个随机样本产生器 </li>\n<li>把方法a和方法b跑相同的随机样本，看看得到的结果是否一样。 </li>\n<li>如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a或者方法b </li>\n<li>当样本数量很多时比对测试依然正确，可以确定方法a已经正确</li>\n</ol>\n<h2 id=\"3-比较器\"><a href=\"#3-比较器\" class=\"headerlink\" title=\"3. 比较器\"></a>3. 比较器</h2><p>实现Comparator接口，重写compare方法，实现复杂的比价策略</p>\n<h2 id=\"4-递归\"><a href=\"#4-递归\" class=\"headerlink\" title=\"4. 递归\"></a>4. 递归</h2><ol>\n<li><p>master公式</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">T(N) &#x3D; a*T(N&#x2F;b) + O(N^d)\n&#x2F;&#x2F; N:母规模,a:次数,b:子规模<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>log(b,a) &gt; d -&gt; 复杂度为O(N^log(b,a))</li>\n<li>log(b,a) = d -&gt; 复杂度为O(N^d * logN)</li>\n<li> log(b,a) &lt; d -&gt; 复杂度为O(N^d)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5-树\"><a href=\"#5-树\" class=\"headerlink\" title=\"5. 树\"></a>5. 树</h2><h3 id=\"1-描述\"><a href=\"#1-描述\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h3><ul>\n<li><p>特点</p>\n<ul>\n<li><p>一棵树中的任意两个结点有且仅有唯一的一条路径连通。</p>\n</li>\n<li><p>一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。</p>\n</li>\n<li><p>一棵树不包含回路。</p>\n</li>\n</ul>\n</li>\n<li><p>概念</p>\n<ul>\n<li><strong>节点</strong> ：树中的每个元素都可以统称为节点。</li>\n<li><strong>根节点</strong> ：顶层节点或者说没有父节点的节点。</li>\n<li><strong>父节点</strong> ：若一个节点含有子节点，则这个节点称为其子节点的父节点。</li>\n<li><strong>子节点</strong> ：一个节点含有的子树的根节点称为该节点的子节点。</li>\n<li><strong>兄弟节点</strong> ：具有相同父节点的节点互称为兄弟节点。</li>\n<li><strong>叶子节点</strong> ：没有子节点的节点。</li>\n<li><strong>节点的高度</strong> ：该节点到叶子节点的最长路径所包含的边数。</li>\n<li><strong>节点的深度</strong> ：根节点到该节点的路径所包含的边数</li>\n<li><strong>节点的层数</strong> ：节点的深度+1。</li>\n<li><strong>树的高度</strong> ：根节点的高度。</li>\n</ul>\n</li>\n<li><p>二叉树</p>\n<p><strong>二叉树</strong>（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。</p>\n<p><strong>二叉树</strong> 的分支通常被称作“<strong>左子树</strong>”或“<strong>右子树</strong>”。并且，<strong>二叉树</strong> 的分支具有左右次序，不能随意颠倒。</p>\n<p><strong>二叉树</strong> 的第 i 层至多拥有 <code>2^(i-1)</code> 个节点，深度为 k 的二叉树至多总共有 <code>2^(k+1)-1</code> 个节点（满二叉树的情况），至少有 2^(k) 个节点</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>满二叉树</p>\n<p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 <strong>满二叉树</strong>。也就是说，如果一个二叉树的层数为 K，且结点总数是(2^k) -1 ，则它就是 <strong>满二叉树</strong>。满二叉树一定是完全二叉树。</p>\n<ul>\n<li>判断方法：求深度k，求节点个数，满足(2^k) -1</li>\n</ul>\n</li>\n<li><p>完全二叉树</p>\n<p>除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则这个二叉树就是 <strong>完全二叉树</strong> 。</p>\n<p><strong>父结点和子节点的序号有着对应关系。</strong></p>\n<ul>\n<li>判断方法1：层级遍历，如果出现有右子节点无左子节点的情况，返回false；当遇到第一个左右子节点不全的节点，剩余节点必须是叶子结点，否则false</li>\n</ul>\n</li>\n<li><p>平衡二叉树</p>\n<ol>\n<li>可以是一棵空树</li>\n<li>如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</li>\n</ol>\n</li>\n<li><p>搜索二叉树</p>\n<p>每个节点的左子节点都比它小，右子节点都比它大。经典搜索二叉树一般认为没有重复值。</p>\n<p>中序遍历可以得出升序的排序</p>\n<ul>\n<li>判断方法1：中序遍历后看排序是否升序</li>\n<li>判断方法2：递归每一个子树是否满足搜索二叉树</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-存储\"><a href=\"#2-存储\" class=\"headerlink\" title=\"2. 存储\"></a>2. 存储</h3><ol>\n<li><p>链式存储</p>\n<p>二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。引用对象。</p>\n</li>\n<li><p>顺序存储</p>\n<p>利用数组进行存储，数组中的每一个位置仅存储节点的 data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根结点的序号为 1，对于每个节点 Node，假设它存储在数组中下标为 i 的位置，那么它的左子节点就存储在 2i 的位置，它的右子节点存储在下标为 2i+1 的位置。</p>\n</li>\n</ol>\n<h3 id=\"3-遍历\"><a href=\"#3-遍历\" class=\"headerlink\" title=\"3. 遍历\"></a>3. 遍历</h3><ul>\n<li><p>先序遍历</p>\n<p>二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tsystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>中序遍历</p>\n<p>二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>后序遍历</p>\n<p>二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-红黑树\"><a href=\"#4-红黑树\" class=\"headerlink\" title=\"4. 红黑树\"></a>4. 红黑树</h3><ul>\n<li><p><strong>红黑树特点</strong> :</p>\n<ol>\n<li>每个节点非红即黑；</li>\n<li>根节点总是黑色的；</li>\n<li>每个叶子节点都是黑色的空节点（NIL节点）；</li>\n<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li>\n<li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。</li>\n</ol>\n</li>\n<li><p><strong>红黑树的应用</strong> ：TreeMap、TreeSet以及JDK1.8的HashMap底层都用到了红黑树。</p>\n</li>\n<li><p><strong>为什么要用红黑树？</strong> 简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p>\n</li>\n</ul>\n<h2 id=\"6-堆\"><a href=\"#6-堆\" class=\"headerlink\" title=\"6. 堆\"></a>6. 堆</h2><h3 id=\"1-描述-1\"><a href=\"#1-描述-1\" class=\"headerlink\" title=\"1. 描述\"></a>1. 描述</h3><p>​    堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。任意一个节点的值都大于等于（或小于等于）所有子节点的值。最大堆：每个节点都比子树中所有节点大。最小堆：每个节点都比子树中所有节点小。</p>\n<h3 id=\"2-用途\"><a href=\"#2-用途\" class=\"headerlink\" title=\"2. 用途\"></a>2. 用途</h3><p>   存在多次获取最大值或者最小值，多次插入或删除数据。</p>\n<h3 id=\"3-操作\"><a href=\"#3-操作\" class=\"headerlink\" title=\"3. 操作\"></a>3. 操作</h3><ul>\n<li><strong>插入元素</strong> ：先将元素放至数组末尾，再自底向上堆化，将末尾元素上浮</li>\n<li><strong>删除堆顶元素</strong> ：删除堆顶元素，将末尾元素放至堆顶，再自顶向下堆化，将堆顶元素下沉。也可以自底向上堆化，只是会产生“气泡”，浪费存储空间。最好采用自顶向下堆化的方式。</li>\n</ul>\n<h2 id=\"7-哈希表\"><a href=\"#7-哈希表\" class=\"headerlink\" title=\"7. 哈希表\"></a>7. 哈希表</h2><ol>\n<li>哈希表在使用层面上可以理解为一种集合结构 </li>\n<li>如果只有key，没有伴随数据value，可以使用HashSet结构</li>\n<li>如果既有key，又有伴随数据value，可以使用HashMap结构</li>\n<li>有无伴随数据，是HashMap和HashSet唯一的区别，底层的实际结构是一回事 </li>\n<li>使用哈希表增(put)、删(remove)、改(put)和查(get)的操作，可以认为时间复杂度为 O(1)，但是常数时间比较大 </li>\n<li>放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小 </li>\n<li>放入哈希表的东西，如果不是基础类型，内部按引用传递，内存占用是这个东西内存地址的大小</li>\n</ol>\n<h2 id=\"8-有序表\"><a href=\"#8-有序表\" class=\"headerlink\" title=\"8. 有序表\"></a>8. 有序表</h2><ol>\n<li>有序表在使用层面上可以理解为一种集合结构</li>\n<li>如果只有key，没有伴随数据value，可以使用TreeSet结构</li>\n<li>如果既有key，又有伴随数据value，可以使用TreeMap结构</li>\n<li>有无伴随数据，是TreeSet和TreeMap唯一的区别，底层的实际结构是一回事</li>\n<li>有序表和哈希表的区别是，有序表把key按照顺序组织起来，而哈希表完全不组织</li>\n<li>红黑树、AVL树、size-balance-tree和跳表等都属于有序表结构，只是底层具体实现不同 </li>\n<li>放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小</li>\n<li>放入有序表的东西，如果不是基础类型，必须提供比较器，内部按引用传递，内存占用是这个东西内存地址的大小</li>\n<li>不管是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复杂度</li>\n</ol>\n<h2 id=\"9-单链表\"><a href=\"#9-单链表\" class=\"headerlink\" title=\"9. 单链表\"></a>9. 单链表</h2><p>​    <strong>链表（LinkedList）</strong> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。</p>\n<p>​    链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。</p>\n<p>​    使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。</p>\n<p>单链表和双链表结构只需要给定一个头部节点head，就可以找到剩下的所有的节点。</p>\n<ul>\n<li><p>单链表的节点结构</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p>​        由以上结构的节点依次连接起来所形成的链叫单链表结构。 </p>\n<ul>\n<li><p>双链表的节点结构 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">&#123;</span> \n\t<span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span> \n\t<span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span> \n\t<span class=\"token class-name\">Node</span> last<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由以上结构的节点依次连接起来所形成的链叫双链表结构。 </p>\n</li>\n</ul>\n<h2 id=\"10-排序\"><a href=\"#10-排序\" class=\"headerlink\" title=\"10. 排序\"></a>10. 排序</h2><p>   同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。 </p>\n<ul>\n<li>不具备稳定性的排序： 选择排序、快速排序、堆排序 </li>\n<li>具备稳定性的排序： 冒泡排序、插入排序、归并排序、一切桶排序思想下的排序</li>\n<li>目前没有找到时间复杂度O(N*logN)，额外空间复杂度O(1)，又稳定的排序。</li>\n</ul>\n<h2 id=\"11-图\"><a href=\"#11-图\" class=\"headerlink\" title=\"11. 图\"></a>11. 图</h2><ol>\n<li><p>描述</p>\n<p>图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：**G(V,E)**，其中，G表示一个图，V表示顶点的集合，E表示边的集合。</p>\n</li>\n<li><p>概念</p>\n<ul>\n<li><p>顶点</p>\n<p>图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）</p>\n<p>对应到好友关系图，每一个用户就代表一个顶点。</p>\n</li>\n<li><p>边</p>\n<p>顶点之间的关系用边表示。</p>\n<p>对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。</p>\n</li>\n<li><p>度</p>\n<p>度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。</p>\n<p>对应到好友关系图，度就代表了某个人的好友数量。</p>\n</li>\n<li><p>无向图和有向图</p>\n<p>边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A是B的同学，那么B也肯定是A的同学，那么在表示A和B的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。</p>\n<p>有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A是B的爸爸，但B肯定不是A的爸爸，A关注B，B不一定关注A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。</p>\n</li>\n<li><p>无权图和带权图</p>\n<p>对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。</p>\n<p>对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。</p>\n</li>\n</ul>\n</li>\n<li><p>图的存储</p>\n<ul>\n<li><p>邻接矩阵存储</p>\n<p>邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。</p>\n<p>如果第i个顶点和第j个顶点之间有关系，且关系权值为n，则 <code>A[i][j]=n</code> 。</p>\n<p>在无向图中，我们只关心关系的有无，所以当顶点i和顶点j有关系时，<code>A[i][j]</code>=1，当顶点i和顶点j没有关系时，<code>A[i][j]</code>=0。</p>\n<p><strong>无向图的邻接矩阵是一个对称矩阵</strong></p>\n<p>邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，</p>\n</li>\n<li><p>邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点Vi，把所有邻接于Vi的顶点Vj链成一个单链表，这个单链表称为顶点Vi的 <strong>邻接表</strong>。</p>\n<ul>\n<li>在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为7，邻接表存储的元素个数为14。</li>\n<li>在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为8，邻接表存储的元素个数为8。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图的遍历</p>\n<ul>\n<li><p>图的宽度优先遍历</p>\n<ol>\n<li>利用队列实现</li>\n<li>从源节点开始依次按照宽度进队列，然后弹出</li>\n<li>每弹出一个点，把该节点所有没有进过队列的邻接点放入队列</li>\n<li>直到队列变空</li>\n</ol>\n</li>\n<li><p>广度优先遍历</p>\n<ol>\n<li>利用栈实现</li>\n<li>从源节点开始把节点按照深度放入栈，然后弹出</li>\n<li>每弹出一个点，把该节点下一个没有进过栈的邻接点放入栈</li>\n<li>直到栈变空</li>\n</ol>\n</li>\n<li><p>拓扑排序</p>\n<p>适用范围：要求有向图，且有入度为0的节点，且没有环</p>\n<ol>\n<li>找到入度为0的节点，保存到只存储入度为0的队列中</li>\n<li>添加到结果排序集</li>\n<li>找到此节点指向的其他节点，如果减掉此指向的入度为0，添加到队列和结果集中，循环此步骤</li>\n</ol>\n</li>\n<li><p>kruskal算法（无向图生成最小生成树）</p>\n<ol>\n<li>遍历每个节点，生成对应只有自己的集合</li>\n<li>将图的所有边根据权重升序排列</li>\n<li>判断每条边的始末节点是否在同一个集合中，如果不在同一个集合中，合并两个集合，直到集合包含所有节点</li>\n</ol>\n</li>\n<li><p>Prime算法</p>\n<ol>\n<li>从任意节点检查，将该节点的所有边选出权重最小的边</li>\n<li>检查该边的to节点是否已检查，如果没检查则将该节点的所有边选出权重最小的边</li>\n<li>重复上述步骤，直到所有节点都检查过</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"线性数据结构 :数组、链表、栈、队列","date":"2022-07-06T01:56:15.000Z","_content":"# 线性数据结构 :数组、链表、栈、队列\n\n## 1. 数组\n\n**数组（Array）** 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。\n\n我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。\n\n数组的特点是：**提供随机访问** 并且容量有限。\n\n```\n假如数组的长度为 n。\n访问：O（1）//访问特定位置的元素\n插入：O（n ）//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时\n删除：O（n）//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时\n```\n\n[![数组](https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67)](https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67)\n\n## 2. 链表\n\n### 2.1. 链表简介\n\n**链表（LinkedList）** 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。\n\n链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。\n\n使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。\n\n### 2.2. 链表分类\n\n**常见链表分类：**\n\n1. 单链表\n2. 双向链表\n3. 循环链表\n4. 双向循环链表\n\n```\n假如链表中有n个元素。\n访问：O（n）//访问特定位置的元素\n插入删除：O（1）//必须要要知道插入元素的位置\n```\n\n#### 2.2.1. 单链表\n\n**单链表** 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。\n\n[![单链表](https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67)](https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67)\n\n#### 2.2.2. 循环链表\n\n**循环链表** 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。\n\n[![循环链表](https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67)](https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67)\n\n#### 2.2.3. 双向链表\n\n**双向链表** 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。\n\n[![双向链表](https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67)](https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67)\n\n#### 2.2.4. 双向循环链表\n\n**双向循环链表** 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。\n\n[![双向循环链表](https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67)](https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67)\n\n### 2.3. 应用场景\n\n- 如果需要支持随机访问的话，链表没办法做到。\n- 如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。\n- 如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。\n\n### 2.4. 数组 vs 链表\n\n- 数组支持随机访问，而链表不支持。\n- 数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。\n- 数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！\n\n## 3. 栈\n\n### 3.1. 栈简介\n\n**栈** (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 **后进先出（LIFO, Last In First Out）** 的原理运作。**在栈中，push 和 pop 的操作都发生在栈顶。**\n\n栈常用一维数组或链表来实现，用数组实现的栈叫作 **顺序栈** ，用链表实现的栈叫作 **链式栈** 。\n\n```\n假设堆栈中有n个元素。\n访问：O（n）//最坏情况\n插入删除：O（1）//顶端插入和删除元素\n```\n\n[![栈](https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67)](https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67)\n\n### 3.2. 栈的常见应用常见应用场景\n\n当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 **后进先出（LIFO, Last In First Out）** 的特性时，我们就可以使用栈这个数据结构。\n\n#### 3.2.1. 实现浏览器的回退和前进功能\n\n我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:\n\n[![栈实现浏览器倒退和前进](https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67)](https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67)\n\n#### 3.2.2. 检查符号是否成对出现\n\n> 给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断该字符串是否有效。\n>\n> 有效字符串需满足：\n>\n> 1. 左括号必须用相同类型的右括号闭合。\n> 2. 左括号必须以正确的顺序闭合。\n>\n> 比如 \"()\"、\"()[]{}\"、\"{[]}\" 都是有效字符串，而 \"(]\" 、\"([)]\" 则不是。\n\n这个问题实际是 Leetcode 的一道题目，我们可以利用栈 `Stack` 来解决这个问题。\n\n1. 首先我们将括号间的对应规则存放在 `Map` 中，这一点应该毋容置疑；\n2. 创建一个栈。遍历字符串，如果字符是左括号就直接加入`stack`中，否则将`stack` 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果`stack`为空，返回 `true`。\n\n```\npublic boolean isValid(String s){\n    // 括号之间的对应规则\n    HashMap<Character, Character> mappings = new HashMap<Character, Character>();\n    mappings.put(')', '(');\n    mappings.put('}', '{');\n    mappings.put(']', '[');\n    Stack<Character> stack = new Stack<Character>();\n    char[] chars = s.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        if (mappings.containsKey(chars[i])) {\n            char topElement = stack.empty() ? '#' : stack.pop();\n            if (topElement != mappings.get(chars[i])) {\n                return false;\n            }\n        } else {\n            stack.push(chars[i]);\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n#### 3.2.3. 反转字符串\n\n将字符串中的每个字符先入栈再出栈就可以了。\n\n#### 3.2.4. 维护函数调用\n\n最后一个被调用的函数必须先完成执行，符合栈的 **后进先出（LIFO, Last In First Out）** 特性。\n\n### 3.3. 栈的实现\n\n栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。\n\n下面我们使用数组来实现一个栈，并且这个栈具有`push()`、`pop()`（返回栈顶元素并出栈）、`peek()` （返回栈顶元素不出栈）、`isEmpty()`、`size()`这些基本的方法。\n\n> 提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用`Arrays.copyOf()`进行扩容；\n\n```\npublic class MyStack {\n    private int[] storage;//存放栈中元素的数组\n    private int capacity;//栈的容量\n    private int count;//栈中元素数量\n    private static final int GROW_FACTOR = 2;\n\n    //不带初始容量的构造方法。默认容量为8\n    public MyStack() {\n        this.capacity = 8;\n        this.storage=new int[8];\n        this.count = 0;\n    }\n\n    //带初始容量的构造方法\n    public MyStack(int initialCapacity) {\n        if (initialCapacity < 1)\n            throw new IllegalArgumentException(\"Capacity too small.\");\n\n        this.capacity = initialCapacity;\n        this.storage = new int[initialCapacity];\n        this.count = 0;\n    }\n\n    //入栈\n    public void push(int value) {\n        if (count == capacity) {\n            ensureCapacity();\n        }\n        storage[count++] = value;\n    }\n\n    //确保容量大小\n    private void ensureCapacity() {\n        int newCapacity = capacity * GROW_FACTOR;\n        storage = Arrays.copyOf(storage, newCapacity);\n        capacity = newCapacity;\n    }\n\n    //返回栈顶元素并出栈\n    private int pop() {\n        if (count == 0)\n            throw new IllegalArgumentException(\"Stack is empty.\");\n        count--;\n        return storage[count];\n    }\n\n    //返回栈顶元素不出栈\n    private int peek() {\n        if (count == 0){\n            throw new IllegalArgumentException(\"Stack is empty.\");\n        }else {\n            return storage[count-1];\n        }\n    }\n\n    //判断栈是否为空\n    private boolean isEmpty() {\n        return count == 0;\n    }\n\n    //返回栈中元素的个数\n    private int size() {\n        return count;\n    }\n\n}\n```\n\n验证\n\n```\nMyStack myStack = new MyStack(3);\nmyStack.push(1);\nmyStack.push(2);\nmyStack.push(3);\nmyStack.push(4);\nmyStack.push(5);\nmyStack.push(6);\nmyStack.push(7);\nmyStack.push(8);\nSystem.out.println(myStack.peek());//8\nSystem.out.println(myStack.size());//8\nfor (int i = 0; i < 8; i++) {\n    System.out.println(myStack.pop());\n}\nSystem.out.println(myStack.isEmpty());//true\nmyStack.pop();//报错：java.lang.IllegalArgumentException: Stack is empty.\n```\n\n## 4. 队列\n\n### 4.1. 队列简介\n\n**队列** 是 **先进先出( FIFO，First In, First Out)** 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 **顺序队列** ，用链表实现的队列叫作 **链式队列** 。**队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue**\n\n队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。\n\n```\n假设队列中有n个元素。\n访问：O（n）//最坏情况\n插入删除：O（1）//后端插入前端删除元素\n```\n\n[![队列](https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67)](https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67)\n\n### 4.2. 队列分类\n\n#### 4.2.1. 单队列\n\n单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 **顺序队列（数组实现）** 和 **链式队列（链表实现）**。\n\n**顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。**\n\n假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 **”假溢出“** 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。\n\n> 为了避免当只有一个元素的时候，队头和队尾重合使处理变得麻烦，所以引入两个指针，front 指针指向对头元素，rear 指针指向队列最后一个元素的下一个位置，这样当 front 等于 rear 时，此队列不是还剩一个元素，而是空队列。——From 《大话数据结构》\n\n[![顺序队列假溢出](https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67)](https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67)\n\n#### 4.2.2. 循环队列\n\n循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。\n\n还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。\n\n[![循环队列](https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67)](https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67)\n\n顺序队列中，我们说 `front==rear` 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：\n\n1. 可以设置一个标志变量 `flag`,当 `front==rear` 并且 `flag=0` 的时候队列为空，当`front==rear` 并且 `flag=1` 的时候队列为满。\n2. 队列为空的时候就是 `front==rear` ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是： `(rear+1) % QueueSize= front` 。\n\n[![循环队列-队满](https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67)](https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67)\n\n### 4.3. 常见应用场景\n\n当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。\n\n- **阻塞队列：** 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。\n- **线程池中的请求/任务队列：** 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ：`FixedThreadPool` 使用无界队列 `LinkedBlockingQueue`。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出`java.util.concurrent.RejectedExecutionException` 异常。\n- Linux 内核进程队列（按优先级排队）\n- 现实生活中的派对，播放器上的播放列表;\n- 消息队列","source":"_posts/线性数据结构 数组、链表、栈、队列.md","raw":"---\ntitle: 线性数据结构 :数组、链表、栈、队列\ndate: 2022-07-06 09:56:15\ntags: JAVA\ncategories: 编程\n---\n# 线性数据结构 :数组、链表、栈、队列\n\n## 1. 数组\n\n**数组（Array）** 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。\n\n我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。\n\n数组的特点是：**提供随机访问** 并且容量有限。\n\n```\n假如数组的长度为 n。\n访问：O（1）//访问特定位置的元素\n插入：O（n ）//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时\n删除：O（n）//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时\n```\n\n[![数组](https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67)](https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67)\n\n## 2. 链表\n\n### 2.1. 链表简介\n\n**链表（LinkedList）** 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。\n\n链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。\n\n使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。\n\n### 2.2. 链表分类\n\n**常见链表分类：**\n\n1. 单链表\n2. 双向链表\n3. 循环链表\n4. 双向循环链表\n\n```\n假如链表中有n个元素。\n访问：O（n）//访问特定位置的元素\n插入删除：O（1）//必须要要知道插入元素的位置\n```\n\n#### 2.2.1. 单链表\n\n**单链表** 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。\n\n[![单链表](https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67)](https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67)\n\n#### 2.2.2. 循环链表\n\n**循环链表** 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。\n\n[![循环链表](https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67)](https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67)\n\n#### 2.2.3. 双向链表\n\n**双向链表** 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。\n\n[![双向链表](https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67)](https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67)\n\n#### 2.2.4. 双向循环链表\n\n**双向循环链表** 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。\n\n[![双向循环链表](https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67)](https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67)\n\n### 2.3. 应用场景\n\n- 如果需要支持随机访问的话，链表没办法做到。\n- 如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。\n- 如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。\n\n### 2.4. 数组 vs 链表\n\n- 数组支持随机访问，而链表不支持。\n- 数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。\n- 数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！\n\n## 3. 栈\n\n### 3.1. 栈简介\n\n**栈** (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 **后进先出（LIFO, Last In First Out）** 的原理运作。**在栈中，push 和 pop 的操作都发生在栈顶。**\n\n栈常用一维数组或链表来实现，用数组实现的栈叫作 **顺序栈** ，用链表实现的栈叫作 **链式栈** 。\n\n```\n假设堆栈中有n个元素。\n访问：O（n）//最坏情况\n插入删除：O（1）//顶端插入和删除元素\n```\n\n[![栈](https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67)](https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67)\n\n### 3.2. 栈的常见应用常见应用场景\n\n当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 **后进先出（LIFO, Last In First Out）** 的特性时，我们就可以使用栈这个数据结构。\n\n#### 3.2.1. 实现浏览器的回退和前进功能\n\n我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:\n\n[![栈实现浏览器倒退和前进](https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67)](https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67)\n\n#### 3.2.2. 检查符号是否成对出现\n\n> 给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串，判断该字符串是否有效。\n>\n> 有效字符串需满足：\n>\n> 1. 左括号必须用相同类型的右括号闭合。\n> 2. 左括号必须以正确的顺序闭合。\n>\n> 比如 \"()\"、\"()[]{}\"、\"{[]}\" 都是有效字符串，而 \"(]\" 、\"([)]\" 则不是。\n\n这个问题实际是 Leetcode 的一道题目，我们可以利用栈 `Stack` 来解决这个问题。\n\n1. 首先我们将括号间的对应规则存放在 `Map` 中，这一点应该毋容置疑；\n2. 创建一个栈。遍历字符串，如果字符是左括号就直接加入`stack`中，否则将`stack` 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果`stack`为空，返回 `true`。\n\n```\npublic boolean isValid(String s){\n    // 括号之间的对应规则\n    HashMap<Character, Character> mappings = new HashMap<Character, Character>();\n    mappings.put(')', '(');\n    mappings.put('}', '{');\n    mappings.put(']', '[');\n    Stack<Character> stack = new Stack<Character>();\n    char[] chars = s.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        if (mappings.containsKey(chars[i])) {\n            char topElement = stack.empty() ? '#' : stack.pop();\n            if (topElement != mappings.get(chars[i])) {\n                return false;\n            }\n        } else {\n            stack.push(chars[i]);\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n#### 3.2.3. 反转字符串\n\n将字符串中的每个字符先入栈再出栈就可以了。\n\n#### 3.2.4. 维护函数调用\n\n最后一个被调用的函数必须先完成执行，符合栈的 **后进先出（LIFO, Last In First Out）** 特性。\n\n### 3.3. 栈的实现\n\n栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。\n\n下面我们使用数组来实现一个栈，并且这个栈具有`push()`、`pop()`（返回栈顶元素并出栈）、`peek()` （返回栈顶元素不出栈）、`isEmpty()`、`size()`这些基本的方法。\n\n> 提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用`Arrays.copyOf()`进行扩容；\n\n```\npublic class MyStack {\n    private int[] storage;//存放栈中元素的数组\n    private int capacity;//栈的容量\n    private int count;//栈中元素数量\n    private static final int GROW_FACTOR = 2;\n\n    //不带初始容量的构造方法。默认容量为8\n    public MyStack() {\n        this.capacity = 8;\n        this.storage=new int[8];\n        this.count = 0;\n    }\n\n    //带初始容量的构造方法\n    public MyStack(int initialCapacity) {\n        if (initialCapacity < 1)\n            throw new IllegalArgumentException(\"Capacity too small.\");\n\n        this.capacity = initialCapacity;\n        this.storage = new int[initialCapacity];\n        this.count = 0;\n    }\n\n    //入栈\n    public void push(int value) {\n        if (count == capacity) {\n            ensureCapacity();\n        }\n        storage[count++] = value;\n    }\n\n    //确保容量大小\n    private void ensureCapacity() {\n        int newCapacity = capacity * GROW_FACTOR;\n        storage = Arrays.copyOf(storage, newCapacity);\n        capacity = newCapacity;\n    }\n\n    //返回栈顶元素并出栈\n    private int pop() {\n        if (count == 0)\n            throw new IllegalArgumentException(\"Stack is empty.\");\n        count--;\n        return storage[count];\n    }\n\n    //返回栈顶元素不出栈\n    private int peek() {\n        if (count == 0){\n            throw new IllegalArgumentException(\"Stack is empty.\");\n        }else {\n            return storage[count-1];\n        }\n    }\n\n    //判断栈是否为空\n    private boolean isEmpty() {\n        return count == 0;\n    }\n\n    //返回栈中元素的个数\n    private int size() {\n        return count;\n    }\n\n}\n```\n\n验证\n\n```\nMyStack myStack = new MyStack(3);\nmyStack.push(1);\nmyStack.push(2);\nmyStack.push(3);\nmyStack.push(4);\nmyStack.push(5);\nmyStack.push(6);\nmyStack.push(7);\nmyStack.push(8);\nSystem.out.println(myStack.peek());//8\nSystem.out.println(myStack.size());//8\nfor (int i = 0; i < 8; i++) {\n    System.out.println(myStack.pop());\n}\nSystem.out.println(myStack.isEmpty());//true\nmyStack.pop();//报错：java.lang.IllegalArgumentException: Stack is empty.\n```\n\n## 4. 队列\n\n### 4.1. 队列简介\n\n**队列** 是 **先进先出( FIFO，First In, First Out)** 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 **顺序队列** ，用链表实现的队列叫作 **链式队列** 。**队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue**\n\n队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。\n\n```\n假设队列中有n个元素。\n访问：O（n）//最坏情况\n插入删除：O（1）//后端插入前端删除元素\n```\n\n[![队列](https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67)](https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67)\n\n### 4.2. 队列分类\n\n#### 4.2.1. 单队列\n\n单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 **顺序队列（数组实现）** 和 **链式队列（链表实现）**。\n\n**顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。**\n\n假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 **”假溢出“** 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。\n\n> 为了避免当只有一个元素的时候，队头和队尾重合使处理变得麻烦，所以引入两个指针，front 指针指向对头元素，rear 指针指向队列最后一个元素的下一个位置，这样当 front 等于 rear 时，此队列不是还剩一个元素，而是空队列。——From 《大话数据结构》\n\n[![顺序队列假溢出](https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67)](https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67)\n\n#### 4.2.2. 循环队列\n\n循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。\n\n还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。\n\n[![循环队列](https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67)](https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67)\n\n顺序队列中，我们说 `front==rear` 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：\n\n1. 可以设置一个标志变量 `flag`,当 `front==rear` 并且 `flag=0` 的时候队列为空，当`front==rear` 并且 `flag=1` 的时候队列为满。\n2. 队列为空的时候就是 `front==rear` ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是： `(rear+1) % QueueSize= front` 。\n\n[![循环队列-队满](https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67)](https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67)\n\n### 4.3. 常见应用场景\n\n当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。\n\n- **阻塞队列：** 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。\n- **线程池中的请求/任务队列：** 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ：`FixedThreadPool` 使用无界队列 `LinkedBlockingQueue`。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出`java.util.concurrent.RejectedExecutionException` 异常。\n- Linux 内核进程队列（按优先级排队）\n- 现实生活中的派对，播放器上的播放列表;\n- 消息队列","slug":"线性数据结构 数组、链表、栈、队列","published":1,"updated":"2022-10-13T15:00:38.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka4001v94wa3s4u5tkn","content":"<h1 id=\"线性数据结构-数组、链表、栈、队列\"><a href=\"#线性数据结构-数组、链表、栈、队列\" class=\"headerlink\" title=\"线性数据结构 :数组、链表、栈、队列\"></a>线性数据结构 :数组、链表、栈、队列</h1><h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2><p><strong>数组（Array）</strong> 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。</p>\n<p>我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。</p>\n<p>数组的特点是：<strong>提供随机访问</strong> 并且容量有限。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假如数组的长度为 n。\n访问：O（1）&#x2F;&#x2F;访问特定位置的元素\n插入：O（n ）&#x2F;&#x2F;最坏的情况发生在插入发生在数组的首部并需要移动所有元素时\n删除：O（n）&#x2F;&#x2F;最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67\"><img src=\"https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67\" alt=\"数组\"></a></p>\n<h2 id=\"2-链表\"><a href=\"#2-链表\" class=\"headerlink\" title=\"2. 链表\"></a>2. 链表</h2><h3 id=\"2-1-链表简介\"><a href=\"#2-1-链表简介\" class=\"headerlink\" title=\"2.1. 链表简介\"></a>2.1. 链表简介</h3><p><strong>链表（LinkedList）</strong> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。</p>\n<p>链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。</p>\n<p>使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。</p>\n<h3 id=\"2-2-链表分类\"><a href=\"#2-2-链表分类\" class=\"headerlink\" title=\"2.2. 链表分类\"></a>2.2. 链表分类</h3><p><strong>常见链表分类：</strong></p>\n<ol>\n<li>单链表</li>\n<li>双向链表</li>\n<li>循环链表</li>\n<li>双向循环链表</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假如链表中有n个元素。\n访问：O（n）&#x2F;&#x2F;访问特定位置的元素\n插入删除：O（1）&#x2F;&#x2F;必须要要知道插入元素的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-1-单链表\"><a href=\"#2-2-1-单链表\" class=\"headerlink\" title=\"2.2.1. 单链表\"></a>2.2.1. 单链表</h4><p><strong>单链表</strong> 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。</p>\n<p><a href=\"https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67\"><img src=\"https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67\" alt=\"单链表\"></a></p>\n<h4 id=\"2-2-2-循环链表\"><a href=\"#2-2-2-循环链表\" class=\"headerlink\" title=\"2.2.2. 循环链表\"></a>2.2.2. 循环链表</h4><p><strong>循环链表</strong> 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。</p>\n<p><a href=\"https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67\"><img src=\"https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67\" alt=\"循环链表\"></a></p>\n<h4 id=\"2-2-3-双向链表\"><a href=\"#2-2-3-双向链表\" class=\"headerlink\" title=\"2.2.3. 双向链表\"></a>2.2.3. 双向链表</h4><p><strong>双向链表</strong> 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。</p>\n<p><a href=\"https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67\"><img src=\"https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67\" alt=\"双向链表\"></a></p>\n<h4 id=\"2-2-4-双向循环链表\"><a href=\"#2-2-4-双向循环链表\" class=\"headerlink\" title=\"2.2.4. 双向循环链表\"></a>2.2.4. 双向循环链表</h4><p><strong>双向循环链表</strong> 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。</p>\n<p><a href=\"https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67\"><img src=\"https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67\" alt=\"双向循环链表\"></a></p>\n<h3 id=\"2-3-应用场景\"><a href=\"#2-3-应用场景\" class=\"headerlink\" title=\"2.3. 应用场景\"></a>2.3. 应用场景</h3><ul>\n<li>如果需要支持随机访问的话，链表没办法做到。</li>\n<li>如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。</li>\n<li>如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。</li>\n</ul>\n<h3 id=\"2-4-数组-vs-链表\"><a href=\"#2-4-数组-vs-链表\" class=\"headerlink\" title=\"2.4. 数组 vs 链表\"></a>2.4. 数组 vs 链表</h3><ul>\n<li>数组支持随机访问，而链表不支持。</li>\n<li>数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。</li>\n<li>数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！</li>\n</ul>\n<h2 id=\"3-栈\"><a href=\"#3-栈\" class=\"headerlink\" title=\"3. 栈\"></a>3. 栈</h2><h3 id=\"3-1-栈简介\"><a href=\"#3-1-栈简介\" class=\"headerlink\" title=\"3.1. 栈简介\"></a>3.1. 栈简介</h3><p><strong>栈</strong> (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 <strong>后进先出（LIFO, Last In First Out）</strong> 的原理运作。<strong>在栈中，push 和 pop 的操作都发生在栈顶。</strong></p>\n<p>栈常用一维数组或链表来实现，用数组实现的栈叫作 <strong>顺序栈</strong> ，用链表实现的栈叫作 <strong>链式栈</strong> 。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假设堆栈中有n个元素。\n访问：O（n）&#x2F;&#x2F;最坏情况\n插入删除：O（1）&#x2F;&#x2F;顶端插入和删除元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67\"><img src=\"https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67\" alt=\"栈\"></a></p>\n<h3 id=\"3-2-栈的常见应用常见应用场景\"><a href=\"#3-2-栈的常见应用常见应用场景\" class=\"headerlink\" title=\"3.2. 栈的常见应用常见应用场景\"></a>3.2. 栈的常见应用常见应用场景</h3><p>当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 <strong>后进先出（LIFO, Last In First Out）</strong> 的特性时，我们就可以使用栈这个数据结构。</p>\n<h4 id=\"3-2-1-实现浏览器的回退和前进功能\"><a href=\"#3-2-1-实现浏览器的回退和前进功能\" class=\"headerlink\" title=\"3.2.1. 实现浏览器的回退和前进功能\"></a>3.2.1. 实现浏览器的回退和前进功能</h4><p>我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:</p>\n<p><a href=\"https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67\"><img src=\"https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67\" alt=\"栈实现浏览器倒退和前进\"></a></p>\n<h4 id=\"3-2-2-检查符号是否成对出现\"><a href=\"#3-2-2-检查符号是否成对出现\" class=\"headerlink\" title=\"3.2.2. 检查符号是否成对出现\"></a>3.2.2. 检查符号是否成对出现</h4><blockquote>\n<p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断该字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n</ol>\n<p>比如 “()”、”()[]{}”、”{[]}” 都是有效字符串，而 “(]” 、”([)]” 则不是。</p>\n</blockquote>\n<p>这个问题实际是 Leetcode 的一道题目，我们可以利用栈 <code>Stack</code> 来解决这个问题。</p>\n<ol>\n<li>首先我们将括号间的对应规则存放在 <code>Map</code> 中，这一点应该毋容置疑；</li>\n<li>创建一个栈。遍历字符串，如果字符是左括号就直接加入<code>stack</code>中，否则将<code>stack</code> 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果<code>stack</code>为空，返回 <code>true</code>。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public boolean isValid(String s)&#123;\n    &#x2F;&#x2F; 括号之间的对应规则\n    HashMap&lt;Character, Character&gt; mappings &#x3D; new HashMap&lt;Character, Character&gt;();\n    mappings.put(&#39;)&#39;, &#39;(&#39;);\n    mappings.put(&#39;&#125;&#39;, &#39;&#123;&#39;);\n    mappings.put(&#39;]&#39;, &#39;[&#39;);\n    Stack&lt;Character&gt; stack &#x3D; new Stack&lt;Character&gt;();\n    char[] chars &#x3D; s.toCharArray();\n    for (int i &#x3D; 0; i &lt; chars.length; i++) &#123;\n        if (mappings.containsKey(chars[i])) &#123;\n            char topElement &#x3D; stack.empty() ? &#39;#&#39; : stack.pop();\n            if (topElement !&#x3D; mappings.get(chars[i])) &#123;\n                return false;\n            &#125;\n        &#125; else &#123;\n            stack.push(chars[i]);\n        &#125;\n    &#125;\n    return stack.isEmpty();\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-3-反转字符串\"><a href=\"#3-2-3-反转字符串\" class=\"headerlink\" title=\"3.2.3. 反转字符串\"></a>3.2.3. 反转字符串</h4><p>将字符串中的每个字符先入栈再出栈就可以了。</p>\n<h4 id=\"3-2-4-维护函数调用\"><a href=\"#3-2-4-维护函数调用\" class=\"headerlink\" title=\"3.2.4. 维护函数调用\"></a>3.2.4. 维护函数调用</h4><p>最后一个被调用的函数必须先完成执行，符合栈的 <strong>后进先出（LIFO, Last In First Out）</strong> 特性。</p>\n<h3 id=\"3-3-栈的实现\"><a href=\"#3-3-栈的实现\" class=\"headerlink\" title=\"3.3. 栈的实现\"></a>3.3. 栈的实现</h3><p>栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。</p>\n<p>下面我们使用数组来实现一个栈，并且这个栈具有<code>push()</code>、<code>pop()</code>（返回栈顶元素并出栈）、<code>peek()</code> （返回栈顶元素不出栈）、<code>isEmpty()</code>、<code>size()</code>这些基本的方法。</p>\n<blockquote>\n<p>提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用<code>Arrays.copyOf()</code>进行扩容；</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class MyStack &#123;\n    private int[] storage;&#x2F;&#x2F;存放栈中元素的数组\n    private int capacity;&#x2F;&#x2F;栈的容量\n    private int count;&#x2F;&#x2F;栈中元素数量\n    private static final int GROW_FACTOR &#x3D; 2;\n\n    &#x2F;&#x2F;不带初始容量的构造方法。默认容量为8\n    public MyStack() &#123;\n        this.capacity &#x3D; 8;\n        this.storage&#x3D;new int[8];\n        this.count &#x3D; 0;\n    &#125;\n\n    &#x2F;&#x2F;带初始容量的构造方法\n    public MyStack(int initialCapacity) &#123;\n        if (initialCapacity &lt; 1)\n            throw new IllegalArgumentException(&quot;Capacity too small.&quot;);\n\n        this.capacity &#x3D; initialCapacity;\n        this.storage &#x3D; new int[initialCapacity];\n        this.count &#x3D; 0;\n    &#125;\n\n    &#x2F;&#x2F;入栈\n    public void push(int value) &#123;\n        if (count &#x3D;&#x3D; capacity) &#123;\n            ensureCapacity();\n        &#125;\n        storage[count++] &#x3D; value;\n    &#125;\n\n    &#x2F;&#x2F;确保容量大小\n    private void ensureCapacity() &#123;\n        int newCapacity &#x3D; capacity * GROW_FACTOR;\n        storage &#x3D; Arrays.copyOf(storage, newCapacity);\n        capacity &#x3D; newCapacity;\n    &#125;\n\n    &#x2F;&#x2F;返回栈顶元素并出栈\n    private int pop() &#123;\n        if (count &#x3D;&#x3D; 0)\n            throw new IllegalArgumentException(&quot;Stack is empty.&quot;);\n        count--;\n        return storage[count];\n    &#125;\n\n    &#x2F;&#x2F;返回栈顶元素不出栈\n    private int peek() &#123;\n        if (count &#x3D;&#x3D; 0)&#123;\n            throw new IllegalArgumentException(&quot;Stack is empty.&quot;);\n        &#125;else &#123;\n            return storage[count-1];\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;判断栈是否为空\n    private boolean isEmpty() &#123;\n        return count &#x3D;&#x3D; 0;\n    &#125;\n\n    &#x2F;&#x2F;返回栈中元素的个数\n    private int size() &#123;\n        return count;\n    &#125;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>验证</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MyStack myStack &#x3D; new MyStack(3);\nmyStack.push(1);\nmyStack.push(2);\nmyStack.push(3);\nmyStack.push(4);\nmyStack.push(5);\nmyStack.push(6);\nmyStack.push(7);\nmyStack.push(8);\nSystem.out.println(myStack.peek());&#x2F;&#x2F;8\nSystem.out.println(myStack.size());&#x2F;&#x2F;8\nfor (int i &#x3D; 0; i &lt; 8; i++) &#123;\n    System.out.println(myStack.pop());\n&#125;\nSystem.out.println(myStack.isEmpty());&#x2F;&#x2F;true\nmyStack.pop();&#x2F;&#x2F;报错：java.lang.IllegalArgumentException: Stack is empty.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-队列\"><a href=\"#4-队列\" class=\"headerlink\" title=\"4. 队列\"></a>4. 队列</h2><h3 id=\"4-1-队列简介\"><a href=\"#4-1-队列简介\" class=\"headerlink\" title=\"4.1. 队列简介\"></a>4.1. 队列简介</h3><p><strong>队列</strong> 是 <strong>先进先出( FIFO，First In, First Out)</strong> 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 <strong>顺序队列</strong> ，用链表实现的队列叫作 <strong>链式队列</strong> 。<strong>队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue</strong></p>\n<p>队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假设队列中有n个元素。\n访问：O（n）&#x2F;&#x2F;最坏情况\n插入删除：O（1）&#x2F;&#x2F;后端插入前端删除元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67\"><img src=\"https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67\" alt=\"队列\"></a></p>\n<h3 id=\"4-2-队列分类\"><a href=\"#4-2-队列分类\" class=\"headerlink\" title=\"4.2. 队列分类\"></a>4.2. 队列分类</h3><h4 id=\"4-2-1-单队列\"><a href=\"#4-2-1-单队列\" class=\"headerlink\" title=\"4.2.1. 单队列\"></a>4.2.1. 单队列</h4><p>单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 <strong>顺序队列（数组实现）</strong> 和 <strong>链式队列（链表实现）</strong>。</p>\n<p><strong>顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。</strong></p>\n<p>假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 <strong>”假溢出“</strong> 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。</p>\n<blockquote>\n<p>为了避免当只有一个元素的时候，队头和队尾重合使处理变得麻烦，所以引入两个指针，front 指针指向对头元素，rear 指针指向队列最后一个元素的下一个位置，这样当 front 等于 rear 时，此队列不是还剩一个元素，而是空队列。——From 《大话数据结构》</p>\n</blockquote>\n<p><a href=\"https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67\"><img src=\"https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67\" alt=\"顺序队列假溢出\"></a></p>\n<h4 id=\"4-2-2-循环队列\"><a href=\"#4-2-2-循环队列\" class=\"headerlink\" title=\"4.2.2. 循环队列\"></a>4.2.2. 循环队列</h4><p>循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。</p>\n<p>还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。</p>\n<p><a href=\"https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67\"><img src=\"https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67\" alt=\"循环队列\"></a></p>\n<p>顺序队列中，我们说 <code>front==rear</code> 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：</p>\n<ol>\n<li>可以设置一个标志变量 <code>flag</code>,当 <code>front==rear</code> 并且 <code>flag=0</code> 的时候队列为空，当<code>front==rear</code> 并且 <code>flag=1</code> 的时候队列为满。</li>\n<li>队列为空的时候就是 <code>front==rear</code> ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是： <code>(rear+1) % QueueSize= front</code> 。</li>\n</ol>\n<p><a href=\"https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67\"><img src=\"https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67\" alt=\"循环队列-队满\"></a></p>\n<h3 id=\"4-3-常见应用场景\"><a href=\"#4-3-常见应用场景\" class=\"headerlink\" title=\"4.3. 常见应用场景\"></a>4.3. 常见应用场景</h3><p>当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。</p>\n<ul>\n<li><strong>阻塞队列：</strong> 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。</li>\n<li><strong>线程池中的请求/任务队列：</strong> 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ：<code>FixedThreadPool</code> 使用无界队列 <code>LinkedBlockingQueue</code>。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出<code>java.util.concurrent.RejectedExecutionException</code> 异常。</li>\n<li>Linux 内核进程队列（按优先级排队）</li>\n<li>现实生活中的派对，播放器上的播放列表;</li>\n<li>消息队列</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"线性数据结构-数组、链表、栈、队列\"><a href=\"#线性数据结构-数组、链表、栈、队列\" class=\"headerlink\" title=\"线性数据结构 :数组、链表、栈、队列\"></a>线性数据结构 :数组、链表、栈、队列</h1><h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2><p><strong>数组（Array）</strong> 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。</p>\n<p>我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。</p>\n<p>数组的特点是：<strong>提供随机访问</strong> 并且容量有限。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假如数组的长度为 n。\n访问：O（1）&#x2F;&#x2F;访问特定位置的元素\n插入：O（n ）&#x2F;&#x2F;最坏的情况发生在插入发生在数组的首部并需要移动所有元素时\n删除：O（n）&#x2F;&#x2F;最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67\"><img src=\"https://camo.githubusercontent.com/46f587fe2966892bbf19d0432c9793770e28f69a45a217428768b6912af7c606/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362539352542302545372542422538342e706e67\" alt=\"数组\"></a></p>\n<h2 id=\"2-链表\"><a href=\"#2-链表\" class=\"headerlink\" title=\"2. 链表\"></a>2. 链表</h2><h3 id=\"2-1-链表简介\"><a href=\"#2-1-链表简介\" class=\"headerlink\" title=\"2.1. 链表简介\"></a>2.1. 链表简介</h3><p><strong>链表（LinkedList）</strong> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。</p>\n<p>链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。</p>\n<p>使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。</p>\n<h3 id=\"2-2-链表分类\"><a href=\"#2-2-链表分类\" class=\"headerlink\" title=\"2.2. 链表分类\"></a>2.2. 链表分类</h3><p><strong>常见链表分类：</strong></p>\n<ol>\n<li>单链表</li>\n<li>双向链表</li>\n<li>循环链表</li>\n<li>双向循环链表</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假如链表中有n个元素。\n访问：O（n）&#x2F;&#x2F;访问特定位置的元素\n插入删除：O（1）&#x2F;&#x2F;必须要要知道插入元素的位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-1-单链表\"><a href=\"#2-2-1-单链表\" class=\"headerlink\" title=\"2.2.1. 单链表\"></a>2.2.1. 单链表</h4><p><strong>单链表</strong> 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。</p>\n<p><a href=\"https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67\"><img src=\"https://camo.githubusercontent.com/1d8bf245b30ede53ec1bcab9bd44708b70f880f174eb4f9d17af2dc3ee330d47/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535253844253935254539253933254245254538254131254138322e706e67\" alt=\"单链表\"></a></p>\n<h4 id=\"2-2-2-循环链表\"><a href=\"#2-2-2-循环链表\" class=\"headerlink\" title=\"2.2.2. 循环链表\"></a>2.2.2. 循环链表</h4><p><strong>循环链表</strong> 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。</p>\n<p><a href=\"https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67\"><img src=\"https://camo.githubusercontent.com/3556e4a0b077e5cee95738f6b177929875f53d359b582af5e12b59188e8f5d8c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254535254245254141254537253845254146254539253933254245254538254131254138322e706e67\" alt=\"循环链表\"></a></p>\n<h4 id=\"2-2-3-双向链表\"><a href=\"#2-2-3-双向链表\" class=\"headerlink\" title=\"2.2.3. 双向链表\"></a>2.2.3. 双向链表</h4><p><strong>双向链表</strong> 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。</p>\n<p><a href=\"https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67\"><img src=\"https://camo.githubusercontent.com/d7fd1913224b9e4bb2ac5aff7ac57097b1876de11c1744b21cfe6dcc9d2c05d6/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545392539332542452545382541312541382e706e67\" alt=\"双向链表\"></a></p>\n<h4 id=\"2-2-4-双向循环链表\"><a href=\"#2-2-4-双向循环链表\" class=\"headerlink\" title=\"2.2.4. 双向循环链表\"></a>2.2.4. 双向循环链表</h4><p><strong>双向循环链表</strong> 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。</p>\n<p><a href=\"https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67\"><img src=\"https://camo.githubusercontent.com/7e710661bccc541450e8726b61379a7b5bcc5bfdfb897bf8eb66568280fdcc9a/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352538462538432545352539302539312545352542452541412545372538452541462545392539332542452545382541312541382e706e67\" alt=\"双向循环链表\"></a></p>\n<h3 id=\"2-3-应用场景\"><a href=\"#2-3-应用场景\" class=\"headerlink\" title=\"2.3. 应用场景\"></a>2.3. 应用场景</h3><ul>\n<li>如果需要支持随机访问的话，链表没办法做到。</li>\n<li>如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。</li>\n<li>如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。</li>\n</ul>\n<h3 id=\"2-4-数组-vs-链表\"><a href=\"#2-4-数组-vs-链表\" class=\"headerlink\" title=\"2.4. 数组 vs 链表\"></a>2.4. 数组 vs 链表</h3><ul>\n<li>数组支持随机访问，而链表不支持。</li>\n<li>数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。</li>\n<li>数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！</li>\n</ul>\n<h2 id=\"3-栈\"><a href=\"#3-栈\" class=\"headerlink\" title=\"3. 栈\"></a>3. 栈</h2><h3 id=\"3-1-栈简介\"><a href=\"#3-1-栈简介\" class=\"headerlink\" title=\"3.1. 栈简介\"></a>3.1. 栈简介</h3><p><strong>栈</strong> (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 <strong>后进先出（LIFO, Last In First Out）</strong> 的原理运作。<strong>在栈中，push 和 pop 的操作都发生在栈顶。</strong></p>\n<p>栈常用一维数组或链表来实现，用数组实现的栈叫作 <strong>顺序栈</strong> ，用链表实现的栈叫作 <strong>链式栈</strong> 。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假设堆栈中有n个元素。\n访问：O（n）&#x2F;&#x2F;最坏情况\n插入删除：O（1）&#x2F;&#x2F;顶端插入和删除元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67\"><img src=\"https://camo.githubusercontent.com/6a7b6ad68765003b517ee559cf0b660f33ad97665ad317ce12de96cc692fbf5c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382e706e67\" alt=\"栈\"></a></p>\n<h3 id=\"3-2-栈的常见应用常见应用场景\"><a href=\"#3-2-栈的常见应用常见应用场景\" class=\"headerlink\" title=\"3.2. 栈的常见应用常见应用场景\"></a>3.2. 栈的常见应用常见应用场景</h3><p>当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 <strong>后进先出（LIFO, Last In First Out）</strong> 的特性时，我们就可以使用栈这个数据结构。</p>\n<h4 id=\"3-2-1-实现浏览器的回退和前进功能\"><a href=\"#3-2-1-实现浏览器的回退和前进功能\" class=\"headerlink\" title=\"3.2.1. 实现浏览器的回退和前进功能\"></a>3.2.1. 实现浏览器的回退和前进功能</h4><p>我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:</p>\n<p><a href=\"https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67\"><img src=\"https://camo.githubusercontent.com/49ee24a13f80f001accee74a168091ba1cf88f49b1897b81a5d748f5209baa9c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545362541302538382545352541452539452545372538452542302545362542352538462545382541372538382545352539392541382545352538302539322545392538302538302545352539322538432545352538392538442545382542462539422e706e67\" alt=\"栈实现浏览器倒退和前进\"></a></p>\n<h4 id=\"3-2-2-检查符号是否成对出现\"><a href=\"#3-2-2-检查符号是否成对出现\" class=\"headerlink\" title=\"3.2.2. 检查符号是否成对出现\"></a>3.2.2. 检查符号是否成对出现</h4><blockquote>\n<p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断该字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n</ol>\n<p>比如 “()”、”()[]{}”、”{[]}” 都是有效字符串，而 “(]” 、”([)]” 则不是。</p>\n</blockquote>\n<p>这个问题实际是 Leetcode 的一道题目，我们可以利用栈 <code>Stack</code> 来解决这个问题。</p>\n<ol>\n<li>首先我们将括号间的对应规则存放在 <code>Map</code> 中，这一点应该毋容置疑；</li>\n<li>创建一个栈。遍历字符串，如果字符是左括号就直接加入<code>stack</code>中，否则将<code>stack</code> 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果<code>stack</code>为空，返回 <code>true</code>。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public boolean isValid(String s)&#123;\n    &#x2F;&#x2F; 括号之间的对应规则\n    HashMap&lt;Character, Character&gt; mappings &#x3D; new HashMap&lt;Character, Character&gt;();\n    mappings.put(&#39;)&#39;, &#39;(&#39;);\n    mappings.put(&#39;&#125;&#39;, &#39;&#123;&#39;);\n    mappings.put(&#39;]&#39;, &#39;[&#39;);\n    Stack&lt;Character&gt; stack &#x3D; new Stack&lt;Character&gt;();\n    char[] chars &#x3D; s.toCharArray();\n    for (int i &#x3D; 0; i &lt; chars.length; i++) &#123;\n        if (mappings.containsKey(chars[i])) &#123;\n            char topElement &#x3D; stack.empty() ? &#39;#&#39; : stack.pop();\n            if (topElement !&#x3D; mappings.get(chars[i])) &#123;\n                return false;\n            &#125;\n        &#125; else &#123;\n            stack.push(chars[i]);\n        &#125;\n    &#125;\n    return stack.isEmpty();\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-3-反转字符串\"><a href=\"#3-2-3-反转字符串\" class=\"headerlink\" title=\"3.2.3. 反转字符串\"></a>3.2.3. 反转字符串</h4><p>将字符串中的每个字符先入栈再出栈就可以了。</p>\n<h4 id=\"3-2-4-维护函数调用\"><a href=\"#3-2-4-维护函数调用\" class=\"headerlink\" title=\"3.2.4. 维护函数调用\"></a>3.2.4. 维护函数调用</h4><p>最后一个被调用的函数必须先完成执行，符合栈的 <strong>后进先出（LIFO, Last In First Out）</strong> 特性。</p>\n<h3 id=\"3-3-栈的实现\"><a href=\"#3-3-栈的实现\" class=\"headerlink\" title=\"3.3. 栈的实现\"></a>3.3. 栈的实现</h3><p>栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。</p>\n<p>下面我们使用数组来实现一个栈，并且这个栈具有<code>push()</code>、<code>pop()</code>（返回栈顶元素并出栈）、<code>peek()</code> （返回栈顶元素不出栈）、<code>isEmpty()</code>、<code>size()</code>这些基本的方法。</p>\n<blockquote>\n<p>提示：每次入栈之前先判断栈的容量是否够用，如果不够用就用<code>Arrays.copyOf()</code>进行扩容；</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public class MyStack &#123;\n    private int[] storage;&#x2F;&#x2F;存放栈中元素的数组\n    private int capacity;&#x2F;&#x2F;栈的容量\n    private int count;&#x2F;&#x2F;栈中元素数量\n    private static final int GROW_FACTOR &#x3D; 2;\n\n    &#x2F;&#x2F;不带初始容量的构造方法。默认容量为8\n    public MyStack() &#123;\n        this.capacity &#x3D; 8;\n        this.storage&#x3D;new int[8];\n        this.count &#x3D; 0;\n    &#125;\n\n    &#x2F;&#x2F;带初始容量的构造方法\n    public MyStack(int initialCapacity) &#123;\n        if (initialCapacity &lt; 1)\n            throw new IllegalArgumentException(&quot;Capacity too small.&quot;);\n\n        this.capacity &#x3D; initialCapacity;\n        this.storage &#x3D; new int[initialCapacity];\n        this.count &#x3D; 0;\n    &#125;\n\n    &#x2F;&#x2F;入栈\n    public void push(int value) &#123;\n        if (count &#x3D;&#x3D; capacity) &#123;\n            ensureCapacity();\n        &#125;\n        storage[count++] &#x3D; value;\n    &#125;\n\n    &#x2F;&#x2F;确保容量大小\n    private void ensureCapacity() &#123;\n        int newCapacity &#x3D; capacity * GROW_FACTOR;\n        storage &#x3D; Arrays.copyOf(storage, newCapacity);\n        capacity &#x3D; newCapacity;\n    &#125;\n\n    &#x2F;&#x2F;返回栈顶元素并出栈\n    private int pop() &#123;\n        if (count &#x3D;&#x3D; 0)\n            throw new IllegalArgumentException(&quot;Stack is empty.&quot;);\n        count--;\n        return storage[count];\n    &#125;\n\n    &#x2F;&#x2F;返回栈顶元素不出栈\n    private int peek() &#123;\n        if (count &#x3D;&#x3D; 0)&#123;\n            throw new IllegalArgumentException(&quot;Stack is empty.&quot;);\n        &#125;else &#123;\n            return storage[count-1];\n        &#125;\n    &#125;\n\n    &#x2F;&#x2F;判断栈是否为空\n    private boolean isEmpty() &#123;\n        return count &#x3D;&#x3D; 0;\n    &#125;\n\n    &#x2F;&#x2F;返回栈中元素的个数\n    private int size() &#123;\n        return count;\n    &#125;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>验证</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MyStack myStack &#x3D; new MyStack(3);\nmyStack.push(1);\nmyStack.push(2);\nmyStack.push(3);\nmyStack.push(4);\nmyStack.push(5);\nmyStack.push(6);\nmyStack.push(7);\nmyStack.push(8);\nSystem.out.println(myStack.peek());&#x2F;&#x2F;8\nSystem.out.println(myStack.size());&#x2F;&#x2F;8\nfor (int i &#x3D; 0; i &lt; 8; i++) &#123;\n    System.out.println(myStack.pop());\n&#125;\nSystem.out.println(myStack.isEmpty());&#x2F;&#x2F;true\nmyStack.pop();&#x2F;&#x2F;报错：java.lang.IllegalArgumentException: Stack is empty.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-队列\"><a href=\"#4-队列\" class=\"headerlink\" title=\"4. 队列\"></a>4. 队列</h2><h3 id=\"4-1-队列简介\"><a href=\"#4-1-队列简介\" class=\"headerlink\" title=\"4.1. 队列简介\"></a>4.1. 队列简介</h3><p><strong>队列</strong> 是 <strong>先进先出( FIFO，First In, First Out)</strong> 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 <strong>顺序队列</strong> ，用链表实现的队列叫作 <strong>链式队列</strong> 。<strong>队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue</strong></p>\n<p>队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">假设队列中有n个元素。\n访问：O（n）&#x2F;&#x2F;最坏情况\n插入删除：O（1）&#x2F;&#x2F;后端插入前端删除元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67\"><img src=\"https://camo.githubusercontent.com/1cccc99cbd4ebea2d6052101ec02eeac55c4d69c70cca50724aec43f13d9b14d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382539462545352538382539372e706e67\" alt=\"队列\"></a></p>\n<h3 id=\"4-2-队列分类\"><a href=\"#4-2-队列分类\" class=\"headerlink\" title=\"4.2. 队列分类\"></a>4.2. 队列分类</h3><h4 id=\"4-2-1-单队列\"><a href=\"#4-2-1-单队列\" class=\"headerlink\" title=\"4.2.1. 单队列\"></a>4.2.1. 单队列</h4><p>单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 <strong>顺序队列（数组实现）</strong> 和 <strong>链式队列（链表实现）</strong>。</p>\n<p><strong>顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。</strong></p>\n<p>假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 <strong>”假溢出“</strong> 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。</p>\n<blockquote>\n<p>为了避免当只有一个元素的时候，队头和队尾重合使处理变得麻烦，所以引入两个指针，front 指针指向对头元素，rear 指针指向队列最后一个元素的下一个位置，这样当 front 等于 rear 时，此队列不是还剩一个元素，而是空队列。——From 《大话数据结构》</p>\n</blockquote>\n<p><a href=\"https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67\"><img src=\"https://camo.githubusercontent.com/2c7f7db9b67ac298f2a0fd7983fb4c3a5cf4ee11a2f6070fcc82af6f42fdf71c/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f254539254131254241254535254241253846254539253938253946254535253838253937254535253831253837254536254241254132254535253837254241312e706e67\" alt=\"顺序队列假溢出\"></a></p>\n<h4 id=\"4-2-2-循环队列\"><a href=\"#4-2-2-循环队列\" class=\"headerlink\" title=\"4.2.2. 循环队列\"></a>4.2.2. 循环队列</h4><p>循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。</p>\n<p>还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。</p>\n<p><a href=\"https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67\"><img src=\"https://camo.githubusercontent.com/eb679149c00da98b44d7b5dbd1fa11fd17f80ecda9d3580d5dcffe9ceb2a2460/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372e706e67\" alt=\"循环队列\"></a></p>\n<p>顺序队列中，我们说 <code>front==rear</code> 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：</p>\n<ol>\n<li>可以设置一个标志变量 <code>flag</code>,当 <code>front==rear</code> 并且 <code>flag=0</code> 的时候队列为空，当<code>front==rear</code> 并且 <code>flag=1</code> 的时候队列为满。</li>\n<li>队列为空的时候就是 <code>front==rear</code> ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是： <code>(rear+1) % QueueSize= front</code> 。</li>\n</ol>\n<p><a href=\"https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67\"><img src=\"https://camo.githubusercontent.com/fe8ca177732ef10b11746882e611f13b048e26f291372edcea1709b50485e6b1/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545352542452541412545372538452541462545392539382539462545352538382539372d2545352541302538362545362542422541312e706e67\" alt=\"循环队列-队满\"></a></p>\n<h3 id=\"4-3-常见应用场景\"><a href=\"#4-3-常见应用场景\" class=\"headerlink\" title=\"4.3. 常见应用场景\"></a>4.3. 常见应用场景</h3><p>当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。</p>\n<ul>\n<li><strong>阻塞队列：</strong> 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。</li>\n<li><strong>线程池中的请求/任务队列：</strong> 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ：<code>FixedThreadPool</code> 使用无界队列 <code>LinkedBlockingQueue</code>。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出<code>java.util.concurrent.RejectedExecutionException</code> 异常。</li>\n<li>Linux 内核进程队列（按优先级排队）</li>\n<li>现实生活中的派对，播放器上的播放列表;</li>\n<li>消息队列</li>\n</ul>\n"},{"title":"Tomcat启动乱码","date":"2019-09-28T15:06:56.000Z","_content":"\n# Tomcat启动乱码\n\n修改tomcat的conf下的logging.properties中的参数，\n\n```properties\njava.util.logging.ConsoleHandler.encoding = GBK\n```\n\n重启","source":"_posts/问题记录-Tomcat启动乱码.md","raw":"---\ntitle: Tomcat启动乱码\ndate: 2019-09-28 23:06:56\ntags: JAVA\ncategories: 问题记录\n---\n\n# Tomcat启动乱码\n\n修改tomcat的conf下的logging.properties中的参数，\n\n```properties\njava.util.logging.ConsoleHandler.encoding = GBK\n```\n\n重启","slug":"问题记录-Tomcat启动乱码","published":1,"updated":"2022-08-25T12:10:57.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka7002894wa3m1sat6m","content":"<h1 id=\"Tomcat启动乱码\"><a href=\"#Tomcat启动乱码\" class=\"headerlink\" title=\"Tomcat启动乱码\"></a>Tomcat启动乱码</h1><p>修改tomcat的conf下的logging.properties中的参数，</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">java.util.logging.ConsoleHandler.encoding</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">GBK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>重启</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Tomcat启动乱码\"><a href=\"#Tomcat启动乱码\" class=\"headerlink\" title=\"Tomcat启动乱码\"></a>Tomcat启动乱码</h1><p>修改tomcat的conf下的logging.properties中的参数，</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"><span class=\"token attr-name\">java.util.logging.ConsoleHandler.encoding</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">GBK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>重启</p>\n"},{"title":"Servlet找不到包","date":"2019-09-26T14:15:54.000Z","_content":"\n# Servlet找不到包\n\n实现Servlet方法后javac时找不到`javax.Servlet`，查阅后发现在Tomcat 10版本中`Jakarta.servlet`\n\n","source":"_posts/问题记录-Servlet找不到包.md","raw":"---\ntitle: Servlet找不到包\ndate: 2019-09-26 22:15:54\ntags: JAVA\ncategories: 问题记录\n---\n\n# Servlet找不到包\n\n实现Servlet方法后javac时找不到`javax.Servlet`，查阅后发现在Tomcat 10版本中`Jakarta.servlet`\n\n","slug":"问题记录-Servlet找不到包","published":1,"updated":"2022-08-25T12:10:52.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka8002994wa8husattn","content":"<h1 id=\"Servlet找不到包\"><a href=\"#Servlet找不到包\" class=\"headerlink\" title=\"Servlet找不到包\"></a>Servlet找不到包</h1><p>实现Servlet方法后javac时找不到<code>javax.Servlet</code>，查阅后发现在Tomcat 10版本中<code>Jakarta.servlet</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Servlet找不到包\"><a href=\"#Servlet找不到包\" class=\"headerlink\" title=\"Servlet找不到包\"></a>Servlet找不到包</h1><p>实现Servlet方法后javac时找不到<code>javax.Servlet</code>，查阅后发现在Tomcat 10版本中<code>Jakarta.servlet</code></p>\n"},{"title":"权限模型","date":"2023-01-05T06:43:11.000Z","_content":"\n# 权限模型RBAC\n\nRBAC 其实是一种分析模型，主要分为：**基本模型 RBAC0**、**角色分层模型 RBAC1**、**角色限制模型 RBAC2** 和 **统一模型 RBAC3**。\n\nRBAC 权限模型是基于角色的权限控制。模型中有几个关键的术语：\n\n+ 用户：系统接口及访问的操作者\n+ 权限：能够访问某接口或者做某操作的授权资格\n+ 角色：具有一类相同操作权限的用户的总称\n\n### 1. RBAC0\n\nRBAC0 是由四部分构成：用户、角色、会话、许可\n\n+ 用户和角色的含义很简单，通过字面意思即可明白，\n+ **会话：**指用户被赋予角色的过程，称之为会话或者是说激活角色；\n+ **许可：** 就是角色拥有的权限（操作和和被控制的对象），简单的说就是用户可使用的功能或者可查看的数据。\n\n### 2. RBAC1\n\n​\tRBAC1 是在 RBAC0 权限模型的基础上，在角色中加入了继承的概念，添加了继承的概念后，角色就有了上下级或者等级关系。\n\n​\t上层角色拥有下层的所有角色的权限，且上层角色可拥有额外的权限。\n\n### 3. RBAC2\n\n​\tRBAC2 是在 RBAC0 权限模型的基础上，在用户和角色以及会话和角色之间分别加入了约束的概念（职责分离），职责分离指的是同一个人不能拥有两种特定的权限。\n\n### 4. RBAC3\n​\tRBAC3 是 RBAC1 与 RBAC2 的合集，所以 RBAC3 包含继承和约束。\n\n\n\n对于系统中大量的用户的权限设置可以更好的建立管理，角色的引入让具有相同权限的用户可以统一关联到相同的角色中，这样只需要在系统中设置一次角色的权限，后续的用户便可以直接关联这些角色，这样就省去了重复设置权限的过程。\n\n其他权限模型：\n+ ACL 模型：访问控制列表，每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为\n+ DAC 模型：自主访问控制，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递\n+ MAC 模型：强制访问控制，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系\n+ ABAC 模型：基于属性的访问控制，通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制\n+ RBAC 模型：基于角色的权限访问控制\n","source":"_posts/权限模型.md","raw":"---\ntitle: 权限模型\ndate: 2023-01-05 14:43:11\ntags: JAVA\ncategories: 编程\n---\n\n# 权限模型RBAC\n\nRBAC 其实是一种分析模型，主要分为：**基本模型 RBAC0**、**角色分层模型 RBAC1**、**角色限制模型 RBAC2** 和 **统一模型 RBAC3**。\n\nRBAC 权限模型是基于角色的权限控制。模型中有几个关键的术语：\n\n+ 用户：系统接口及访问的操作者\n+ 权限：能够访问某接口或者做某操作的授权资格\n+ 角色：具有一类相同操作权限的用户的总称\n\n### 1. RBAC0\n\nRBAC0 是由四部分构成：用户、角色、会话、许可\n\n+ 用户和角色的含义很简单，通过字面意思即可明白，\n+ **会话：**指用户被赋予角色的过程，称之为会话或者是说激活角色；\n+ **许可：** 就是角色拥有的权限（操作和和被控制的对象），简单的说就是用户可使用的功能或者可查看的数据。\n\n### 2. RBAC1\n\n​\tRBAC1 是在 RBAC0 权限模型的基础上，在角色中加入了继承的概念，添加了继承的概念后，角色就有了上下级或者等级关系。\n\n​\t上层角色拥有下层的所有角色的权限，且上层角色可拥有额外的权限。\n\n### 3. RBAC2\n\n​\tRBAC2 是在 RBAC0 权限模型的基础上，在用户和角色以及会话和角色之间分别加入了约束的概念（职责分离），职责分离指的是同一个人不能拥有两种特定的权限。\n\n### 4. RBAC3\n​\tRBAC3 是 RBAC1 与 RBAC2 的合集，所以 RBAC3 包含继承和约束。\n\n\n\n对于系统中大量的用户的权限设置可以更好的建立管理，角色的引入让具有相同权限的用户可以统一关联到相同的角色中，这样只需要在系统中设置一次角色的权限，后续的用户便可以直接关联这些角色，这样就省去了重复设置权限的过程。\n\n其他权限模型：\n+ ACL 模型：访问控制列表，每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为\n+ DAC 模型：自主访问控制，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递\n+ MAC 模型：强制访问控制，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系\n+ ABAC 模型：基于属性的访问控制，通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制\n+ RBAC 模型：基于角色的权限访问控制\n","slug":"权限模型","published":1,"updated":"2024-12-16T11:58:25.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm67vdka8002b94wafxnh4r3e","content":"<h1 id=\"权限模型RBAC\"><a href=\"#权限模型RBAC\" class=\"headerlink\" title=\"权限模型RBAC\"></a>权限模型RBAC</h1><p>RBAC 其实是一种分析模型，主要分为：<strong>基本模型 RBAC0</strong>、<strong>角色分层模型 RBAC1</strong>、<strong>角色限制模型 RBAC2</strong> 和 <strong>统一模型 RBAC3</strong>。</p>\n<p>RBAC 权限模型是基于角色的权限控制。模型中有几个关键的术语：</p>\n<ul>\n<li>用户：系统接口及访问的操作者</li>\n<li>权限：能够访问某接口或者做某操作的授权资格</li>\n<li>角色：具有一类相同操作权限的用户的总称</li>\n</ul>\n<h3 id=\"1-RBAC0\"><a href=\"#1-RBAC0\" class=\"headerlink\" title=\"1. RBAC0\"></a>1. RBAC0</h3><p>RBAC0 是由四部分构成：用户、角色、会话、许可</p>\n<ul>\n<li>用户和角色的含义很简单，通过字面意思即可明白，</li>\n<li><strong>会话：</strong>指用户被赋予角色的过程，称之为会话或者是说激活角色；</li>\n<li><strong>许可：</strong> 就是角色拥有的权限（操作和和被控制的对象），简单的说就是用户可使用的功能或者可查看的数据。</li>\n</ul>\n<h3 id=\"2-RBAC1\"><a href=\"#2-RBAC1\" class=\"headerlink\" title=\"2. RBAC1\"></a>2. RBAC1</h3><p>​    RBAC1 是在 RBAC0 权限模型的基础上，在角色中加入了继承的概念，添加了继承的概念后，角色就有了上下级或者等级关系。</p>\n<p>​    上层角色拥有下层的所有角色的权限，且上层角色可拥有额外的权限。</p>\n<h3 id=\"3-RBAC2\"><a href=\"#3-RBAC2\" class=\"headerlink\" title=\"3. RBAC2\"></a>3. RBAC2</h3><p>​    RBAC2 是在 RBAC0 权限模型的基础上，在用户和角色以及会话和角色之间分别加入了约束的概念（职责分离），职责分离指的是同一个人不能拥有两种特定的权限。</p>\n<h3 id=\"4-RBAC3\"><a href=\"#4-RBAC3\" class=\"headerlink\" title=\"4. RBAC3\"></a>4. RBAC3</h3><p>​    RBAC3 是 RBAC1 与 RBAC2 的合集，所以 RBAC3 包含继承和约束。</p>\n<p>对于系统中大量的用户的权限设置可以更好的建立管理，角色的引入让具有相同权限的用户可以统一关联到相同的角色中，这样只需要在系统中设置一次角色的权限，后续的用户便可以直接关联这些角色，这样就省去了重复设置权限的过程。</p>\n<p>其他权限模型：</p>\n<ul>\n<li>ACL 模型：访问控制列表，每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为</li>\n<li>DAC 模型：自主访问控制，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递</li>\n<li>MAC 模型：强制访问控制，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系</li>\n<li>ABAC 模型：基于属性的访问控制，通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制</li>\n<li>RBAC 模型：基于角色的权限访问控制</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"权限模型RBAC\"><a href=\"#权限模型RBAC\" class=\"headerlink\" title=\"权限模型RBAC\"></a>权限模型RBAC</h1><p>RBAC 其实是一种分析模型，主要分为：<strong>基本模型 RBAC0</strong>、<strong>角色分层模型 RBAC1</strong>、<strong>角色限制模型 RBAC2</strong> 和 <strong>统一模型 RBAC3</strong>。</p>\n<p>RBAC 权限模型是基于角色的权限控制。模型中有几个关键的术语：</p>\n<ul>\n<li>用户：系统接口及访问的操作者</li>\n<li>权限：能够访问某接口或者做某操作的授权资格</li>\n<li>角色：具有一类相同操作权限的用户的总称</li>\n</ul>\n<h3 id=\"1-RBAC0\"><a href=\"#1-RBAC0\" class=\"headerlink\" title=\"1. RBAC0\"></a>1. RBAC0</h3><p>RBAC0 是由四部分构成：用户、角色、会话、许可</p>\n<ul>\n<li>用户和角色的含义很简单，通过字面意思即可明白，</li>\n<li><strong>会话：</strong>指用户被赋予角色的过程，称之为会话或者是说激活角色；</li>\n<li><strong>许可：</strong> 就是角色拥有的权限（操作和和被控制的对象），简单的说就是用户可使用的功能或者可查看的数据。</li>\n</ul>\n<h3 id=\"2-RBAC1\"><a href=\"#2-RBAC1\" class=\"headerlink\" title=\"2. RBAC1\"></a>2. RBAC1</h3><p>​    RBAC1 是在 RBAC0 权限模型的基础上，在角色中加入了继承的概念，添加了继承的概念后，角色就有了上下级或者等级关系。</p>\n<p>​    上层角色拥有下层的所有角色的权限，且上层角色可拥有额外的权限。</p>\n<h3 id=\"3-RBAC2\"><a href=\"#3-RBAC2\" class=\"headerlink\" title=\"3. RBAC2\"></a>3. RBAC2</h3><p>​    RBAC2 是在 RBAC0 权限模型的基础上，在用户和角色以及会话和角色之间分别加入了约束的概念（职责分离），职责分离指的是同一个人不能拥有两种特定的权限。</p>\n<h3 id=\"4-RBAC3\"><a href=\"#4-RBAC3\" class=\"headerlink\" title=\"4. RBAC3\"></a>4. RBAC3</h3><p>​    RBAC3 是 RBAC1 与 RBAC2 的合集，所以 RBAC3 包含继承和约束。</p>\n<p>对于系统中大量的用户的权限设置可以更好的建立管理，角色的引入让具有相同权限的用户可以统一关联到相同的角色中，这样只需要在系统中设置一次角色的权限，后续的用户便可以直接关联这些角色，这样就省去了重复设置权限的过程。</p>\n<p>其他权限模型：</p>\n<ul>\n<li>ACL 模型：访问控制列表，每一个客体都有一个列表，列表中记录的是哪些主体可以对这个客体做哪些行为</li>\n<li>DAC 模型：自主访问控制，允许主体可以将自己拥有的权限自主地授予其他主体，所以权限可以任意传递</li>\n<li>MAC 模型：强制访问控制，MAC 模型中主要的是双向验证机制。常见于机密机构或者其他等级观念强烈的行业，如军用和市政安全领域的软件。主体有一个权限标识，客体也有一个权限标识，而主体能否对该客体进行操作取决于双方的权限标识的关系</li>\n<li>ABAC 模型：基于属性的访问控制，通过动态计算一个或一组属性是否满足某种机制来授权，是一种很灵活的权限模型，可以按需实现不同颗粒度的权限控制</li>\n<li>RBAC 模型：基于角色的权限访问控制</li>\n</ul>\n"},{"title":"redis数据结构","date":"2023-10-11T12:55:55.000Z","_content":"\n# 全局哈希表\n一维数组 + 二维链表\nhash(key) % 数组长度\n时间复杂度O(1)\n {% asset_img image-1.png %}\n\n## 1.string类型\n应用：计数器/分布式锁/对象缓存\n#### 1.int 存整形\n#### 2.SDS： 字符串是一个字符串值并且长度大于44个字节 简单动态字符串，encoding设置为raw\n```\n/*  \n * 保存字符串对象的结构  \n */  \nstruct sdshdr {  \n    int len;  // buf 中已占用空间的长度  \n    int free;  // buf 中剩余可用空间的长度\n    char buf[];  // 数据空间  \n};\n\n```\nSDS 相比C 字符串的优势：\n\nSDS保存了字符串的长度，而C字符串不保存长度，需要遍历整个数组（找到’\\0’为止）才能取到字符串长度。\n修改SDS时，检查给定SDS空间是否足够，如果不够会先拓展SDS 的空间，防止缓冲区溢出。C字符串不会检查字符串空间是否足够，调用一些函数时很容易造成缓冲区溢出（比如strcat字符串连接函数）。\nSDS预分配空间的机制，可以减少为字符串重新分配空间的次数。空间预分配用于优化 SDS 的字符串增长操作\n惰性空间释放用于优化 SDS 的字符串缩短操作，程序不会立即使用内存重分配来回收缩短后多出来的字节，而是使用 free 属性将这个字节的数量记录起来，并等待将来使用\n\n#### 3.embstr：字符串长度小于等于44个字节，encoding设置为embstr\n\n## 2.Hash类型\n应用：对象信息（电商购物车）(对象各属性存到value又是key-value的形式)/高并发场景下使用Redis生成唯一的id\n#### 1.字典,hashtable\n```\ntypedef struct dictht {\n   dictEntry **table;//哈希表数组   \n   unsigned long size;//哈希表大小  \n   unsigned long sizemask;//哈希表大小掩码，用于计算索引值\n   unsigned long used;//该哈希表已有节点的数量\n}\n```\nhashtable中计算出hash值后，还要通过哈希表大小掩码sizemask 属性和哈希值再次得到数组下标。\n解决哈希冲突：假如hashtable中不同的key通过计算得到同一个index，就会形成单向链表（链地址法又叫拉链法）\n渐进式rehash\n#### 2.ziplist 压缩列表 （当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个 ，所有值都小于hash-max-ziplist-value配置，默认64字节）\n压缩列表（ziplist）是一组连续内存块组成的顺序的数据结构，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。\n {% asset_img image-2.png %}\n\n- zlbytes：4个字节的大小，记录压缩列表占用内存的字节数。\n- zltail：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。\n- zllen：2个字节的大小，记录压缩列表中的节点数。\n- entry：表示列表中的每一个节点。\n    每一个entry节点又有三部分组成，包括previous_entry_ength、encoding、content。\n    - previous_entry_ength表示前一个节点entry的长度，可用于计算前一个节点的真实地址，因为他们的地址是连续的。\n    - encoding：这里保存的是content的内容类型和长度。\n    - content：content保存的是每一个节点的内容。\n- zlend：表示压缩列表的特殊结束符号'0xFF'。\n\n## 3.List类型\n应用：阻塞队列/栈\n#### 1.zipList （元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\n同上\n#### 2.双向链表\n {% asset_img image-3.png %}\nRedis中链表的特性：\n每一个节点都有指向前一个节点和后一个节点的指针。\n头节点和尾节点的prev和next指针指向为null，所以链表是无环的。\n链表有自己长度的信息，获取长度的时间复杂度为O(1)。\n\n## 4.Set集合\n应用：去重、抽奖、共同好友、二度好友\n#### 1.hashtable\n同上\n#### 2.intset （Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\ninset也叫做整数集合，用于保存整数值的数据结构类型，它可以保存int16_t、int32_t 或者int64_t 的整数值\n有三个属性值encoding、length、contents[]，分别表示编码方式、整数集合的长度、以及元素内容，length就是记录contents里面的大小。\n在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：\n\n首先扩展底层数组的大小，并且数组的类型为新元素的类型。\n然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。\n整数集合升级后就不会再降级，编码会一直保持升级后的状态。\n\n## 5.zset集合\n应用：排行榜\n#### 1.ziplist（数据少时用）\nziplist为了节省内存，每个元素占用的空间可以不同，对于大的数据（long long），就多用一些字节来存储，而对于小的数据（short），就少用一些字节来存储。因此查找的时候需要按顺序遍历。ziplist省内存但是查找效率低。\n#### 2.字典+skiplist （数据多时用）\n {% asset_img image-3.png %}\n有序单链表构造的，通过构建索引提高查找效率，空间换时间，查找方式是从最上面的链表层层往下查找，最后在最底层的链表找到对应的节点\n除了最底层的一层保存的是原始链表的完整数据，上层的节点数会越来越少，并且跨度会越来越大\n\n## 6.3种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)\n","source":"_posts/redis数据结构.md","raw":"---\ntitle: redis数据结构\ndate: 2023-10-11 20:55:55\ntags: redis\n---\n\n# 全局哈希表\n一维数组 + 二维链表\nhash(key) % 数组长度\n时间复杂度O(1)\n {% asset_img image-1.png %}\n\n## 1.string类型\n应用：计数器/分布式锁/对象缓存\n#### 1.int 存整形\n#### 2.SDS： 字符串是一个字符串值并且长度大于44个字节 简单动态字符串，encoding设置为raw\n```\n/*  \n * 保存字符串对象的结构  \n */  \nstruct sdshdr {  \n    int len;  // buf 中已占用空间的长度  \n    int free;  // buf 中剩余可用空间的长度\n    char buf[];  // 数据空间  \n};\n\n```\nSDS 相比C 字符串的优势：\n\nSDS保存了字符串的长度，而C字符串不保存长度，需要遍历整个数组（找到’\\0’为止）才能取到字符串长度。\n修改SDS时，检查给定SDS空间是否足够，如果不够会先拓展SDS 的空间，防止缓冲区溢出。C字符串不会检查字符串空间是否足够，调用一些函数时很容易造成缓冲区溢出（比如strcat字符串连接函数）。\nSDS预分配空间的机制，可以减少为字符串重新分配空间的次数。空间预分配用于优化 SDS 的字符串增长操作\n惰性空间释放用于优化 SDS 的字符串缩短操作，程序不会立即使用内存重分配来回收缩短后多出来的字节，而是使用 free 属性将这个字节的数量记录起来，并等待将来使用\n\n#### 3.embstr：字符串长度小于等于44个字节，encoding设置为embstr\n\n## 2.Hash类型\n应用：对象信息（电商购物车）(对象各属性存到value又是key-value的形式)/高并发场景下使用Redis生成唯一的id\n#### 1.字典,hashtable\n```\ntypedef struct dictht {\n   dictEntry **table;//哈希表数组   \n   unsigned long size;//哈希表大小  \n   unsigned long sizemask;//哈希表大小掩码，用于计算索引值\n   unsigned long used;//该哈希表已有节点的数量\n}\n```\nhashtable中计算出hash值后，还要通过哈希表大小掩码sizemask 属性和哈希值再次得到数组下标。\n解决哈希冲突：假如hashtable中不同的key通过计算得到同一个index，就会形成单向链表（链地址法又叫拉链法）\n渐进式rehash\n#### 2.ziplist 压缩列表 （当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个 ，所有值都小于hash-max-ziplist-value配置，默认64字节）\n压缩列表（ziplist）是一组连续内存块组成的顺序的数据结构，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。\n {% asset_img image-2.png %}\n\n- zlbytes：4个字节的大小，记录压缩列表占用内存的字节数。\n- zltail：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。\n- zllen：2个字节的大小，记录压缩列表中的节点数。\n- entry：表示列表中的每一个节点。\n    每一个entry节点又有三部分组成，包括previous_entry_ength、encoding、content。\n    - previous_entry_ength表示前一个节点entry的长度，可用于计算前一个节点的真实地址，因为他们的地址是连续的。\n    - encoding：这里保存的是content的内容类型和长度。\n    - content：content保存的是每一个节点的内容。\n- zlend：表示压缩列表的特殊结束符号'0xFF'。\n\n## 3.List类型\n应用：阻塞队列/栈\n#### 1.zipList （元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\n同上\n#### 2.双向链表\n {% asset_img image-3.png %}\nRedis中链表的特性：\n每一个节点都有指向前一个节点和后一个节点的指针。\n头节点和尾节点的prev和next指针指向为null，所以链表是无环的。\n链表有自己长度的信息，获取长度的时间复杂度为O(1)。\n\n## 4.Set集合\n应用：去重、抽奖、共同好友、二度好友\n#### 1.hashtable\n同上\n#### 2.intset （Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\ninset也叫做整数集合，用于保存整数值的数据结构类型，它可以保存int16_t、int32_t 或者int64_t 的整数值\n有三个属性值encoding、length、contents[]，分别表示编码方式、整数集合的长度、以及元素内容，length就是记录contents里面的大小。\n在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：\n\n首先扩展底层数组的大小，并且数组的类型为新元素的类型。\n然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。\n整数集合升级后就不会再降级，编码会一直保持升级后的状态。\n\n## 5.zset集合\n应用：排行榜\n#### 1.ziplist（数据少时用）\nziplist为了节省内存，每个元素占用的空间可以不同，对于大的数据（long long），就多用一些字节来存储，而对于小的数据（short），就少用一些字节来存储。因此查找的时候需要按顺序遍历。ziplist省内存但是查找效率低。\n#### 2.字典+skiplist （数据多时用）\n {% asset_img image-3.png %}\n有序单链表构造的，通过构建索引提高查找效率，空间换时间，查找方式是从最上面的链表层层往下查找，最后在最底层的链表找到对应的节点\n除了最底层的一层保存的是原始链表的完整数据，上层的节点数会越来越少，并且跨度会越来越大\n\n## 6.3种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)\n","slug":"redis数据结构","published":1,"updated":"2025-03-11T14:17:30.733Z","_id":"cm84kpy8y0000fswa9n0196y8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"全局哈希表\"><a href=\"#全局哈希表\" class=\"headerlink\" title=\"全局哈希表\"></a>全局哈希表</h1><p>一维数组 + 二维链表<br>hash(key) % 数组长度<br>时间复杂度O(1)<br> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-1.png\" class=\"\"></p>\n<h2 id=\"1-string类型\"><a href=\"#1-string类型\" class=\"headerlink\" title=\"1.string类型\"></a>1.string类型</h2><p>应用：计数器/分布式锁/对象缓存</p>\n<h4 id=\"1-int-存整形\"><a href=\"#1-int-存整形\" class=\"headerlink\" title=\"1.int 存整形\"></a>1.int 存整形</h4><h4 id=\"2-SDS：-字符串是一个字符串值并且长度大于44个字节-简单动态字符串，encoding设置为raw\"><a href=\"#2-SDS：-字符串是一个字符串值并且长度大于44个字节-简单动态字符串，encoding设置为raw\" class=\"headerlink\" title=\"2.SDS： 字符串是一个字符串值并且长度大于44个字节 简单动态字符串，encoding设置为raw\"></a>2.SDS： 字符串是一个字符串值并且长度大于44个字节 简单动态字符串，encoding设置为raw</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;*  \n * 保存字符串对象的结构  \n *&#x2F;  \nstruct sdshdr &#123;  \n    int len;  &#x2F;&#x2F; buf 中已占用空间的长度  \n    int free;  &#x2F;&#x2F; buf 中剩余可用空间的长度\n    char buf[];  &#x2F;&#x2F; 数据空间  \n&#125;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>SDS 相比C 字符串的优势：</p>\n<p>SDS保存了字符串的长度，而C字符串不保存长度，需要遍历整个数组（找到’\\0’为止）才能取到字符串长度。<br>修改SDS时，检查给定SDS空间是否足够，如果不够会先拓展SDS 的空间，防止缓冲区溢出。C字符串不会检查字符串空间是否足够，调用一些函数时很容易造成缓冲区溢出（比如strcat字符串连接函数）。<br>SDS预分配空间的机制，可以减少为字符串重新分配空间的次数。空间预分配用于优化 SDS 的字符串增长操作<br>惰性空间释放用于优化 SDS 的字符串缩短操作，程序不会立即使用内存重分配来回收缩短后多出来的字节，而是使用 free 属性将这个字节的数量记录起来，并等待将来使用</p>\n<h4 id=\"3-embstr：字符串长度小于等于44个字节，encoding设置为embstr\"><a href=\"#3-embstr：字符串长度小于等于44个字节，encoding设置为embstr\" class=\"headerlink\" title=\"3.embstr：字符串长度小于等于44个字节，encoding设置为embstr\"></a>3.embstr：字符串长度小于等于44个字节，encoding设置为embstr</h4><h2 id=\"2-Hash类型\"><a href=\"#2-Hash类型\" class=\"headerlink\" title=\"2.Hash类型\"></a>2.Hash类型</h2><p>应用：对象信息（电商购物车）(对象各属性存到value又是key-value的形式)/高并发场景下使用Redis生成唯一的id</p>\n<h4 id=\"1-字典-hashtable\"><a href=\"#1-字典-hashtable\" class=\"headerlink\" title=\"1.字典,hashtable\"></a>1.字典,hashtable</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct dictht &#123;\n   dictEntry **table;&#x2F;&#x2F;哈希表数组   \n   unsigned long size;&#x2F;&#x2F;哈希表大小  \n   unsigned long sizemask;&#x2F;&#x2F;哈希表大小掩码，用于计算索引值\n   unsigned long used;&#x2F;&#x2F;该哈希表已有节点的数量\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>hashtable中计算出hash值后，还要通过哈希表大小掩码sizemask 属性和哈希值再次得到数组下标。<br>解决哈希冲突：假如hashtable中不同的key通过计算得到同一个index，就会形成单向链表（链地址法又叫拉链法）<br>渐进式rehash</p>\n<h4 id=\"2-ziplist-压缩列表-（当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个-，所有值都小于hash-max-ziplist-value配置，默认64字节）\"><a href=\"#2-ziplist-压缩列表-（当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个-，所有值都小于hash-max-ziplist-value配置，默认64字节）\" class=\"headerlink\" title=\"2.ziplist 压缩列表 （当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个 ，所有值都小于hash-max-ziplist-value配置，默认64字节）\"></a>2.ziplist 压缩列表 （当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个 ，所有值都小于hash-max-ziplist-value配置，默认64字节）</h4><p>压缩列表（ziplist）是一组连续内存块组成的顺序的数据结构，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。<br> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-2.png\" class=\"\"></p>\n<ul>\n<li>zlbytes：4个字节的大小，记录压缩列表占用内存的字节数。</li>\n<li>zltail：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li>\n<li>zllen：2个字节的大小，记录压缩列表中的节点数。</li>\n<li>entry：表示列表中的每一个节点。<br>  每一个entry节点又有三部分组成，包括previous_entry_ength、encoding、content。<ul>\n<li>previous_entry_ength表示前一个节点entry的长度，可用于计算前一个节点的真实地址，因为他们的地址是连续的。</li>\n<li>encoding：这里保存的是content的内容类型和长度。</li>\n<li>content：content保存的是每一个节点的内容。</li>\n</ul>\n</li>\n<li>zlend：表示压缩列表的特殊结束符号’0xFF’。</li>\n</ul>\n<h2 id=\"3-List类型\"><a href=\"#3-List类型\" class=\"headerlink\" title=\"3.List类型\"></a>3.List类型</h2><p>应用：阻塞队列/栈</p>\n<h4 id=\"1-zipList-（元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\"><a href=\"#1-zipList-（元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\" class=\"headerlink\" title=\"1.zipList （元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\"></a>1.zipList （元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）</h4><p>同上</p>\n<h4 id=\"2-双向链表\"><a href=\"#2-双向链表\" class=\"headerlink\" title=\"2.双向链表\"></a>2.双向链表</h4> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-3.png\" class=\"\">\n<p>Redis中链表的特性：<br>每一个节点都有指向前一个节点和后一个节点的指针。<br>头节点和尾节点的prev和next指针指向为null，所以链表是无环的。<br>链表有自己长度的信息，获取长度的时间复杂度为O(1)。</p>\n<h2 id=\"4-Set集合\"><a href=\"#4-Set集合\" class=\"headerlink\" title=\"4.Set集合\"></a>4.Set集合</h2><p>应用：去重、抽奖、共同好友、二度好友</p>\n<h4 id=\"1-hashtable\"><a href=\"#1-hashtable\" class=\"headerlink\" title=\"1.hashtable\"></a>1.hashtable</h4><p>同上</p>\n<h4 id=\"2-intset-（Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\"><a href=\"#2-intset-（Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\" class=\"headerlink\" title=\"2.intset （Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\"></a>2.intset （Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）</h4><p>inset也叫做整数集合，用于保存整数值的数据结构类型，它可以保存int16_t、int32_t 或者int64_t 的整数值<br>有三个属性值encoding、length、contents[]，分别表示编码方式、整数集合的长度、以及元素内容，length就是记录contents里面的大小。<br>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p>\n<p>首先扩展底层数组的大小，并且数组的类型为新元素的类型。<br>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。<br>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</p>\n<h2 id=\"5-zset集合\"><a href=\"#5-zset集合\" class=\"headerlink\" title=\"5.zset集合\"></a>5.zset集合</h2><p>应用：排行榜</p>\n<h4 id=\"1-ziplist（数据少时用）\"><a href=\"#1-ziplist（数据少时用）\" class=\"headerlink\" title=\"1.ziplist（数据少时用）\"></a>1.ziplist（数据少时用）</h4><p>ziplist为了节省内存，每个元素占用的空间可以不同，对于大的数据（long long），就多用一些字节来存储，而对于小的数据（short），就少用一些字节来存储。因此查找的时候需要按顺序遍历。ziplist省内存但是查找效率低。</p>\n<h4 id=\"2-字典-skiplist-（数据多时用）\"><a href=\"#2-字典-skiplist-（数据多时用）\" class=\"headerlink\" title=\"2.字典+skiplist （数据多时用）\"></a>2.字典+skiplist （数据多时用）</h4> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-3.png\" class=\"\">\n<p>有序单链表构造的，通过构建索引提高查找效率，空间换时间，查找方式是从最上面的链表层层往下查找，最后在最底层的链表找到对应的节点<br>除了最底层的一层保存的是原始链表的完整数据，上层的节点数会越来越少，并且跨度会越来越大</p>\n<h2 id=\"6-3种特殊数据结构-：HyperLogLogs（基数统计）、Bitmap-（位存储）、Geospatial-地理位置\"><a href=\"#6-3种特殊数据结构-：HyperLogLogs（基数统计）、Bitmap-（位存储）、Geospatial-地理位置\" class=\"headerlink\" title=\"6.3种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)\"></a>6.3种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"全局哈希表\"><a href=\"#全局哈希表\" class=\"headerlink\" title=\"全局哈希表\"></a>全局哈希表</h1><p>一维数组 + 二维链表<br>hash(key) % 数组长度<br>时间复杂度O(1)<br> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-1.png\" class=\"\"></p>\n<h2 id=\"1-string类型\"><a href=\"#1-string类型\" class=\"headerlink\" title=\"1.string类型\"></a>1.string类型</h2><p>应用：计数器/分布式锁/对象缓存</p>\n<h4 id=\"1-int-存整形\"><a href=\"#1-int-存整形\" class=\"headerlink\" title=\"1.int 存整形\"></a>1.int 存整形</h4><h4 id=\"2-SDS：-字符串是一个字符串值并且长度大于44个字节-简单动态字符串，encoding设置为raw\"><a href=\"#2-SDS：-字符串是一个字符串值并且长度大于44个字节-简单动态字符串，encoding设置为raw\" class=\"headerlink\" title=\"2.SDS： 字符串是一个字符串值并且长度大于44个字节 简单动态字符串，encoding设置为raw\"></a>2.SDS： 字符串是一个字符串值并且长度大于44个字节 简单动态字符串，encoding设置为raw</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;*  \n * 保存字符串对象的结构  \n *&#x2F;  \nstruct sdshdr &#123;  \n    int len;  &#x2F;&#x2F; buf 中已占用空间的长度  \n    int free;  &#x2F;&#x2F; buf 中剩余可用空间的长度\n    char buf[];  &#x2F;&#x2F; 数据空间  \n&#125;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>SDS 相比C 字符串的优势：</p>\n<p>SDS保存了字符串的长度，而C字符串不保存长度，需要遍历整个数组（找到’\\0’为止）才能取到字符串长度。<br>修改SDS时，检查给定SDS空间是否足够，如果不够会先拓展SDS 的空间，防止缓冲区溢出。C字符串不会检查字符串空间是否足够，调用一些函数时很容易造成缓冲区溢出（比如strcat字符串连接函数）。<br>SDS预分配空间的机制，可以减少为字符串重新分配空间的次数。空间预分配用于优化 SDS 的字符串增长操作<br>惰性空间释放用于优化 SDS 的字符串缩短操作，程序不会立即使用内存重分配来回收缩短后多出来的字节，而是使用 free 属性将这个字节的数量记录起来，并等待将来使用</p>\n<h4 id=\"3-embstr：字符串长度小于等于44个字节，encoding设置为embstr\"><a href=\"#3-embstr：字符串长度小于等于44个字节，encoding设置为embstr\" class=\"headerlink\" title=\"3.embstr：字符串长度小于等于44个字节，encoding设置为embstr\"></a>3.embstr：字符串长度小于等于44个字节，encoding设置为embstr</h4><h2 id=\"2-Hash类型\"><a href=\"#2-Hash类型\" class=\"headerlink\" title=\"2.Hash类型\"></a>2.Hash类型</h2><p>应用：对象信息（电商购物车）(对象各属性存到value又是key-value的形式)/高并发场景下使用Redis生成唯一的id</p>\n<h4 id=\"1-字典-hashtable\"><a href=\"#1-字典-hashtable\" class=\"headerlink\" title=\"1.字典,hashtable\"></a>1.字典,hashtable</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">typedef struct dictht &#123;\n   dictEntry **table;&#x2F;&#x2F;哈希表数组   \n   unsigned long size;&#x2F;&#x2F;哈希表大小  \n   unsigned long sizemask;&#x2F;&#x2F;哈希表大小掩码，用于计算索引值\n   unsigned long used;&#x2F;&#x2F;该哈希表已有节点的数量\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>hashtable中计算出hash值后，还要通过哈希表大小掩码sizemask 属性和哈希值再次得到数组下标。<br>解决哈希冲突：假如hashtable中不同的key通过计算得到同一个index，就会形成单向链表（链地址法又叫拉链法）<br>渐进式rehash</p>\n<h4 id=\"2-ziplist-压缩列表-（当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个-，所有值都小于hash-max-ziplist-value配置，默认64字节）\"><a href=\"#2-ziplist-压缩列表-（当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个-，所有值都小于hash-max-ziplist-value配置，默认64字节）\" class=\"headerlink\" title=\"2.ziplist 压缩列表 （当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个 ，所有值都小于hash-max-ziplist-value配置，默认64字节）\"></a>2.ziplist 压缩列表 （当哈希类型元素个数小于hash-max-ziplist-entries配置，默认512个 ，所有值都小于hash-max-ziplist-value配置，默认64字节）</h4><p>压缩列表（ziplist）是一组连续内存块组成的顺序的数据结构，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。<br> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-2.png\" class=\"\"></p>\n<ul>\n<li>zlbytes：4个字节的大小，记录压缩列表占用内存的字节数。</li>\n<li>zltail：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li>\n<li>zllen：2个字节的大小，记录压缩列表中的节点数。</li>\n<li>entry：表示列表中的每一个节点。<br>  每一个entry节点又有三部分组成，包括previous_entry_ength、encoding、content。<ul>\n<li>previous_entry_ength表示前一个节点entry的长度，可用于计算前一个节点的真实地址，因为他们的地址是连续的。</li>\n<li>encoding：这里保存的是content的内容类型和长度。</li>\n<li>content：content保存的是每一个节点的内容。</li>\n</ul>\n</li>\n<li>zlend：表示压缩列表的特殊结束符号’0xFF’。</li>\n</ul>\n<h2 id=\"3-List类型\"><a href=\"#3-List类型\" class=\"headerlink\" title=\"3.List类型\"></a>3.List类型</h2><p>应用：阻塞队列/栈</p>\n<h4 id=\"1-zipList-（元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\"><a href=\"#1-zipList-（元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\" class=\"headerlink\" title=\"1.zipList （元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）\"></a>1.zipList （元素个数小于zset-max-ziplist-entries配置，默认128，所有值都小于zset-max-ziplist-value配置，默认64）</h4><p>同上</p>\n<h4 id=\"2-双向链表\"><a href=\"#2-双向链表\" class=\"headerlink\" title=\"2.双向链表\"></a>2.双向链表</h4> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-3.png\" class=\"\">\n<p>Redis中链表的特性：<br>每一个节点都有指向前一个节点和后一个节点的指针。<br>头节点和尾节点的prev和next指针指向为null，所以链表是无环的。<br>链表有自己长度的信息，获取长度的时间复杂度为O(1)。</p>\n<h2 id=\"4-Set集合\"><a href=\"#4-Set集合\" class=\"headerlink\" title=\"4.Set集合\"></a>4.Set集合</h2><p>应用：去重、抽奖、共同好友、二度好友</p>\n<h4 id=\"1-hashtable\"><a href=\"#1-hashtable\" class=\"headerlink\" title=\"1.hashtable\"></a>1.hashtable</h4><p>同上</p>\n<h4 id=\"2-intset-（Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\"><a href=\"#2-intset-（Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\" class=\"headerlink\" title=\"2.intset （Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）\"></a>2.intset （Set集合中必须是64位有符号的十进制整型且元素个数不超过set-max-intset-entries配置，默认512）</h4><p>inset也叫做整数集合，用于保存整数值的数据结构类型，它可以保存int16_t、int32_t 或者int64_t 的整数值<br>有三个属性值encoding、length、contents[]，分别表示编码方式、整数集合的长度、以及元素内容，length就是记录contents里面的大小。<br>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p>\n<p>首先扩展底层数组的大小，并且数组的类型为新元素的类型。<br>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。<br>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</p>\n<h2 id=\"5-zset集合\"><a href=\"#5-zset集合\" class=\"headerlink\" title=\"5.zset集合\"></a>5.zset集合</h2><p>应用：排行榜</p>\n<h4 id=\"1-ziplist（数据少时用）\"><a href=\"#1-ziplist（数据少时用）\" class=\"headerlink\" title=\"1.ziplist（数据少时用）\"></a>1.ziplist（数据少时用）</h4><p>ziplist为了节省内存，每个元素占用的空间可以不同，对于大的数据（long long），就多用一些字节来存储，而对于小的数据（short），就少用一些字节来存储。因此查找的时候需要按顺序遍历。ziplist省内存但是查找效率低。</p>\n<h4 id=\"2-字典-skiplist-（数据多时用）\"><a href=\"#2-字典-skiplist-（数据多时用）\" class=\"headerlink\" title=\"2.字典+skiplist （数据多时用）\"></a>2.字典+skiplist （数据多时用）</h4> <img src=\"/2023/10/11/redis-shu-ju-jie-gou/image-3.png\" class=\"\">\n<p>有序单链表构造的，通过构建索引提高查找效率，空间换时间，查找方式是从最上面的链表层层往下查找，最后在最底层的链表找到对应的节点<br>除了最底层的一层保存的是原始链表的完整数据，上层的节点数会越来越少，并且跨度会越来越大</p>\n<h2 id=\"6-3种特殊数据结构-：HyperLogLogs（基数统计）、Bitmap-（位存储）、Geospatial-地理位置\"><a href=\"#6-3种特殊数据结构-：HyperLogLogs（基数统计）、Bitmap-（位存储）、Geospatial-地理位置\" class=\"headerlink\" title=\"6.3种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)\"></a>6.3种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)</h2>"}],"PostAsset":[{"_id":"source/_posts/JAVA-IO/image-1.png","slug":"image-1.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-10.png","slug":"image-10.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-11.png","slug":"image-11.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-12.png","slug":"image-12.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-13.png","slug":"image-13.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-2.png","slug":"image-2.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-3.png","slug":"image-3.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-4.png","slug":"image-4.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-5.png","slug":"image-5.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-6.png","slug":"image-6.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-7.png","slug":"image-7.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-8.png","slug":"image-8.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-IO/image-9.png","slug":"image-9.png","post":"cm67vdk9j000194wa97u0hnyg","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-Servlet/image-1.png","slug":"image-1.png","post":"cm67vdk9n000394wa94457ist","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-Servlet/image-2.png","slug":"image-2.png","post":"cm67vdk9n000394wa94457ist","modified":0,"renderable":0},{"_id":"source/_posts/JAVA-Servlet/image-3.png","slug":"image-3.png","post":"cm67vdk9n000394wa94457ist","modified":0,"renderable":0},{"_id":"source/_posts/JAVA 多线程/image-1.png","slug":"image-1.png","post":"cm67vdk9q000794wabju0cedp","modified":0,"renderable":0},{"_id":"source/_posts/JAVA基础梳理/image-1.png","slug":"image-1.png","post":"cm67vdk9s000b94wa2lpd9rzj","modified":0,"renderable":0},{"_id":"source/_posts/JAVA基础梳理/image-2.png","slug":"image-2.png","post":"cm67vdk9s000b94wa2lpd9rzj","modified":0,"renderable":0},{"_id":"source/_posts/JAVA基础梳理/image-3.png","slug":"image-3.png","post":"cm67vdk9s000b94wa2lpd9rzj","modified":0,"renderable":0},{"_id":"source/_posts/JAVA反射/image-1.png","slug":"image-1.png","post":"cm67vdk9r000994wadyo85qze","modified":0,"renderable":0},{"_id":"source/_posts/JAVA反射/image-2.png","slug":"image-2.png","post":"cm67vdk9r000994wadyo85qze","modified":0,"renderable":0},{"_id":"source/_posts/JAVA反射/image-20221001140225816.png","slug":"image-20221001140225816.png","post":"cm67vdk9r000994wadyo85qze","modified":0,"renderable":0},{"_id":"source/_posts/JAVA反射/image-20221002202918484.png","slug":"image-20221002202918484.png","post":"cm67vdk9r000994wadyo85qze","modified":0,"renderable":0},{"_id":"source/_posts/JAVA反射/image-3.png","slug":"image-3.png","post":"cm67vdk9r000994wadyo85qze","modified":0,"renderable":0},{"_id":"source/_posts/JAVA反射/image-4.png","slug":"image-4.png","post":"cm67vdk9r000994wadyo85qze","modified":0,"renderable":0},{"_id":"source/_posts/JAVA集合/image-1.png","slug":"image-1.png","post":"cm67vdk9w000m94wa4o3g92jw","modified":0,"renderable":0},{"_id":"source/_posts/JAVA项目分层/1626175175_1.png","slug":"1626175175_1.png","post":"cm67vdk9w000p94wa58a7by6t","modified":0,"renderable":0},{"_id":"source/_posts/JAVA项目分层/1626175175_2.png","slug":"1626175175_2.png","post":"cm67vdk9w000p94wa58a7by6t","modified":0,"renderable":0},{"_id":"source/_posts/JAVA项目分层/1626175175_3.png","slug":"1626175175_3.png","post":"cm67vdk9w000p94wa58a7by6t","modified":0,"renderable":0},{"_id":"source/_posts/JAVA项目分层/1626175175_4.png","slug":"1626175175_4.png","post":"cm67vdk9w000p94wa58a7by6t","modified":0,"renderable":0},{"_id":"source/_posts/JAVA项目分层/1626175175_5.png","slug":"1626175175_5.png","post":"cm67vdk9w000p94wa58a7by6t","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-1.png","slug":"image-1.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-10.png","slug":"image-10.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-11.png","slug":"image-11.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-12.png","slug":"image-12.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-13.png","slug":"image-13.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-14.png","slug":"image-14.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-15.png","slug":"image-15.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-16.png","slug":"image-16.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-17.png","slug":"image-17.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-18.png","slug":"image-18.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-19.png","slug":"image-19.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-2.png","slug":"image-2.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-20.png","slug":"image-20.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-21.png","slug":"image-21.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-22.png","slug":"image-22.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-23.png","slug":"image-23.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-24.png","slug":"image-24.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-25.png","slug":"image-25.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-26.png","slug":"image-26.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-27.png","slug":"image-27.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-28.png","slug":"image-28.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-29.png","slug":"image-29.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-3.png","slug":"image-3.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-30.png","slug":"image-30.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-31.png","slug":"image-31.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-32.png","slug":"image-32.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-33.png","slug":"image-33.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-34.png","slug":"image-34.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-35.png","slug":"image-35.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-36.png","slug":"image-36.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-37.png","slug":"image-37.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-38.png","slug":"image-38.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-39.png","slug":"image-39.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-4.png","slug":"image-4.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-40.png","slug":"image-40.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-41.png","slug":"image-41.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-42.png","slug":"image-42.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-43.png","slug":"image-43.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-44.png","slug":"image-44.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-45.png","slug":"image-45.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-46.png","slug":"image-46.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-47.png","slug":"image-47.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-48.png","slug":"image-48.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-49.png","slug":"image-49.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-5.png","slug":"image-5.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-50.png","slug":"image-50.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-51.png","slug":"image-51.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-52.png","slug":"image-52.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-53.png","slug":"image-53.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-54.png","slug":"image-54.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-55.png","slug":"image-55.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-56.png","slug":"image-56.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-57.png","slug":"image-57.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-58.png","slug":"image-58.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-6.png","slug":"image-6.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-7.png","slug":"image-7.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-8.png","slug":"image-8.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/Redis/image-9.png","slug":"image-9.png","post":"cm67vdk9y000y94waazuohbkx","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-1.png","slug":"image-1.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-10.png","slug":"image-10.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-11.png","slug":"image-11.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-12.png","slug":"image-12.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-13.png","slug":"image-13.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-14.png","slug":"image-14.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-2.png","slug":"image-2.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-3.png","slug":"image-3.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-4.png","slug":"image-4.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-5.png","slug":"image-5.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-6.png","slug":"image-6.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-7.png","slug":"image-7.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-8.png","slug":"image-8.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/JVM/image-9.png","slug":"image-9.png","post":"cm67vdk9x000s94wa1qbkdeft","modified":0,"renderable":0},{"_id":"source/_posts/MySQL数据库知识点梳理/qizhongjon.png","slug":"qizhongjon.png","post":"cm67vdk9z001194wa81e92bph","modified":0,"renderable":0},{"_id":"source/_posts/maven/image-1.png","slug":"image-1.png","post":"cm67vdka0001894wa7c6wgo2d","modified":0,"renderable":0},{"_id":"source/_posts/maven/image-2.png","slug":"image-2.png","post":"cm67vdka0001894wa7c6wgo2d","modified":0,"renderable":0},{"_id":"source/_posts/ssm框架-Spring/image-1.png","slug":"image-1.png","post":"cm67vdka2001h94wa2kvx47dz","modified":0,"renderable":0},{"_id":"source/_posts/ssm框架-Spring/image-2.png","slug":"image-2.png","post":"cm67vdka2001h94wa2kvx47dz","modified":0,"renderable":0},{"_id":"source/_posts/ssm框架-Spring/image-3.png","slug":"image-3.png","post":"cm67vdka2001h94wa2kvx47dz","modified":0,"renderable":0},{"_id":"source/_posts/ssm框架-Spring/image-4.png","slug":"image-4.png","post":"cm67vdka2001h94wa2kvx47dz","modified":0,"renderable":0},{"_id":"source/_posts/数据结构和算法/image-1.png","slug":"image-1.png","post":"cm67vdka4001s94wa5oj325qp","modified":0,"renderable":0},{"_id":"source/_posts/redis数据结构/image-1.png","slug":"image-1.png","post":"cm84kpy8y0000fswa9n0196y8","modified":0,"renderable":0},{"_id":"source/_posts/redis数据结构/image-2.png","slug":"image-2.png","post":"cm84kpy8y0000fswa9n0196y8","modified":0,"renderable":0},{"_id":"source/_posts/redis数据结构/image-3.png","slug":"image-3.png","post":"cm84kpy8y0000fswa9n0196y8","modified":0,"renderable":0},{"_id":"source/_posts/redis数据结构/image-4.png","slug":"image-4.png","post":"cm84kpy8y0000fswa9n0196y8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm67vdk9r000994wadyo85qze","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9v000i94wadjlc5oj0"},{"post_id":"cm67vdk9j000194wa97u0hnyg","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9w000n94wa84g5f9ge"},{"post_id":"cm67vdk9s000b94wa2lpd9rzj","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9x000q94wahy39da3f"},{"post_id":"cm67vdk9u000f94wa0jv94abx","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9y000t94wag8efez8s"},{"post_id":"cm67vdk9n000394wa94457ist","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9y000w94wa4h2g4n8x"},{"post_id":"cm67vdk9u000h94wa05dm6ttk","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9z000z94wa832c9nel"},{"post_id":"cm67vdk9w000m94wa4o3g92jw","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdk9z001294wa14dbdc8t"},{"post_id":"cm67vdk9q000794wabju0cedp","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka0001594waepd1a77u"},{"post_id":"cm67vdk9w000p94wa58a7by6t","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka1001994waaow8gavh"},{"post_id":"cm67vdk9x000s94wa1qbkdeft","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka1001c94waaos10vze"},{"post_id":"cm67vdk9y000v94wa0wfa7mm6","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka2001f94waaxzweus3"},{"post_id":"cm67vdk9y000y94waazuohbkx","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka2001i94wa9ne4gf03"},{"post_id":"cm67vdk9z001194wa81e92bph","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka3001n94wa7z9hb2ye"},{"post_id":"cm67vdk9z001494wa3y727xsa","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka3001q94wa0tbd0evu"},{"post_id":"cm67vdka0001894wa7c6wgo2d","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka4001t94wa9vtae1tv"},{"post_id":"cm67vdka1001b94waa4tsbian","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka5001w94wagp6mdn7u"},{"post_id":"cm67vdka2001h94wa2kvx47dz","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka5001y94wag93dd2iq"},{"post_id":"cm67vdka3001m94wa7pzj19p7","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka5002094wadreccoyh"},{"post_id":"cm67vdka3001p94wa46p94m7m","category_id":"cm67vdka2001j94wag8gz0e23","_id":"cm67vdka5002294wa3cqw72kt"},{"post_id":"cm67vdka1001e94wa9qhdeuei","category_id":"cm67vdka2001j94wag8gz0e23","_id":"cm67vdka5002494wa9w70fr7o"},{"post_id":"cm67vdka4001s94wa5oj325qp","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka5002694wahqhd235b"},{"post_id":"cm67vdka4001v94wa3s4u5tkn","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka5002794waffpq2awz"},{"post_id":"cm67vdka7002894wa3m1sat6m","category_id":"cm67vdka2001j94wag8gz0e23","_id":"cm67vdka9002d94wa9f1eex8i"},{"post_id":"cm67vdka8002994wa8husattn","category_id":"cm67vdka2001j94wag8gz0e23","_id":"cm67vdka9002f94wa2itvelwc"},{"post_id":"cm67vdka8002b94wafxnh4r3e","category_id":"cm67vdk9o000494wagpnpbu0f","_id":"cm67vdka9002g94wag5didifn"}],"PostTag":[{"post_id":"cm67vdk9r000994wadyo85qze","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9u000e94wacbex3pgf"},{"post_id":"cm67vdk9j000194wa97u0hnyg","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9u000g94wacvvh2sfh"},{"post_id":"cm67vdk9s000b94wa2lpd9rzj","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9v000l94wa44t295hw"},{"post_id":"cm67vdk9u000f94wa0jv94abx","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9w000o94wa3pw5ezsr"},{"post_id":"cm67vdk9n000394wa94457ist","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9x000r94waejx0d4ft"},{"post_id":"cm67vdk9u000h94wa05dm6ttk","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9y000u94wabpdb0joh"},{"post_id":"cm67vdk9w000m94wa4o3g92jw","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9y000x94wa3m8o5rqw"},{"post_id":"cm67vdk9q000794wabju0cedp","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9z001094wa17mxhrjb"},{"post_id":"cm67vdk9w000p94wa58a7by6t","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdk9z001394wagmb24m1a"},{"post_id":"cm67vdk9x000s94wa1qbkdeft","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka0001794wa4jsa75c0"},{"post_id":"cm67vdk9y000v94wa0wfa7mm6","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka1001a94wa4z4navb3"},{"post_id":"cm67vdk9z001494wa3y727xsa","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka2001g94wabjvye15u"},{"post_id":"cm67vdka0001894wa7c6wgo2d","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka3001l94wa7e21cwr4"},{"post_id":"cm67vdka1001b94waa4tsbian","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka3001o94wadnkc29r0"},{"post_id":"cm67vdk9z001194wa81e92bph","tag_id":"cm67vdka0001694waddvq6l78","_id":"cm67vdka4001r94wa1ds62n88"},{"post_id":"cm67vdka2001h94wa2kvx47dz","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka4001u94wadhfgejjq"},{"post_id":"cm67vdka3001m94wa7pzj19p7","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka5001x94wahsr5372s"},{"post_id":"cm67vdka3001p94wa46p94m7m","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka5001z94wab9wiep2g"},{"post_id":"cm67vdka1001e94wa9qhdeuei","tag_id":"cm67vdka2001k94waatbhfs4m","_id":"cm67vdka5002194wa7i6595jf"},{"post_id":"cm67vdka4001s94wa5oj325qp","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka5002394wa3x1g82m6"},{"post_id":"cm67vdka4001v94wa3s4u5tkn","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka5002594wa1ll5g2w4"},{"post_id":"cm67vdka7002894wa3m1sat6m","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka8002a94wacvldg0k4"},{"post_id":"cm67vdka8002994wa8husattn","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka9002c94wafeoccznm"},{"post_id":"cm67vdka8002b94wafxnh4r3e","tag_id":"cm67vdk9p000594waa6qh5fge","_id":"cm67vdka9002e94wah9gb194o"},{"post_id":"cm67vdk9y000y94waazuohbkx","tag_id":"cm84kpy8z0001fswa2brphxsi","_id":"cm84kpy930003fswah3smbmha"},{"post_id":"cm84kpy8y0000fswa9n0196y8","tag_id":"cm84kpy8z0001fswa2brphxsi","_id":"cm84kpy940004fswa8rcv6cbj"}],"Tag":[{"name":"JAVA","_id":"cm67vdk9p000594waa6qh5fge"},{"name":"数据库","_id":"cm67vdka0001694waddvq6l78"},{"name":"Linux","_id":"cm67vdka2001k94waatbhfs4m"},{"name":"redis","_id":"cm84kpy8z0001fswa2brphxsi"}]}}